function o(t,e,r){this.extend(o,google.maps.OverlayView),this.map_=t,this.markers_=[],this.clusters_=[],this.sizes=[53,56,66,78,90],this.styles_=[],this.ready_=!1;var i=r||{};this.gridSize_=i.gridSize||60,this.minClusterSize_=i.minimumClusterSize||2,this.maxZoom_=i.maxZoom||null,this.styles_=i.styles||[],this.imagePath_=i.imagePath||this.MARKER_CLUSTER_IMAGE_PATH_,this.imageExtension_=i.imageExtension||this.MARKER_CLUSTER_IMAGE_EXTENSION_,this.zoomOnClick_=!0,null!=i.zoomOnClick&&(this.zoomOnClick_=i.zoomOnClick),this.averageCenter_=!1,null!=i.averageCenter&&(this.averageCenter_=i.averageCenter),this.setupStyles_(),this.setMap(t),this.prevZoom_=this.map_.getZoom();var s=this;google.maps.event.addListener(this.map_,"zoom_changed",function(){var t=s.map_.getZoom(),e=s.map_.minZoom||0,r=Math.min(s.map_.maxZoom||100,s.map_.mapTypes[s.map_.getMapTypeId()].maxZoom);t=Math.min(Math.max(t,e),r),s.prevZoom_!=t&&(s.prevZoom_=t,s.resetViewport())}),google.maps.event.addListener(this.map_,"idle",function(){s.redraw()}),e&&(e.length||Object.keys(e).length)&&this.addMarkers(e,!1)}function a(t){this.markerClusterer_=t,this.map_=t.getMap(),this.gridSize_=t.getGridSize(),this.minClusterSize_=t.getMinClusterSize(),this.averageCenter_=t.isAverageCenter(),this.center_=null,this.markers_=[],this.bounds_=null,this.clusterIcon_=new i(this,t.getStyles(),t.getGridSize())}function i(t,e,r){t.getMarkerClusterer().extend(i,google.maps.OverlayView),this.styles_=e,this.padding_=r||0,this.cluster_=t,this.center_=null,this.map_=t.getMap(),this.div_=null,this.sums_=null,this.visible_=!1,this.setMap(this.map_)}function t(t){this.items=[]}var e,r,s,n,h,l,p,u,c;function _(t,e){this.gMap=new n.maps.Map(t,e),this.markers=h.create(),e.cluster&&(this.markerClusterer=new o(this.gMap,[],e.cluster.options)),e.geocoder&&(this.geocoder=new n.maps.Geocoder)}o.prototype.MARKER_CLUSTER_IMAGE_PATH_="../images/m",o.prototype.MARKER_CLUSTER_IMAGE_EXTENSION_="png",o.prototype.extend=function(t,e){return function(t){for(var e in t.prototype)this.prototype[e]=t.prototype[e];return this}.apply(t,[e])},o.prototype.onAdd=function(){this.setReady_(!0)},o.prototype.draw=function(){},o.prototype.setupStyles_=function(){if(!this.styles_.length)for(var t,e=0;t=this.sizes[e];e++)this.styles_.push({url:this.imagePath_+(e+1)+"."+this.imageExtension_,height:t,width:t})},o.prototype.fitMapToMarkers=function(){for(var t,e=this.getMarkers(),r=new google.maps.LatLngBounds,i=0;t=e[i];i++)r.extend(t.getPosition());this.map_.fitBounds(r)},o.prototype.setStyles=function(t){this.styles_=t},o.prototype.getStyles=function(){return this.styles_},o.prototype.isZoomOnClick=function(){return this.zoomOnClick_},o.prototype.isAverageCenter=function(){return this.averageCenter_},o.prototype.getMarkers=function(){return this.markers_},o.prototype.getTotalMarkers=function(){return this.markers_.length},o.prototype.setMaxZoom=function(t){this.maxZoom_=t},o.prototype.getMaxZoom=function(){return this.maxZoom_},o.prototype.calculator_=function(t,e){for(var r=0,i=t.length,s=i;0!==s;)s=parseInt(s/10,10),r++;return{text:i,index:r=Math.min(r,e)}},o.prototype.setCalculator=function(t){this.calculator_=t},o.prototype.getCalculator=function(){return this.calculator_},o.prototype.addMarkers=function(t,e){if(t.length)for(var r=0;i=t[r];r++)this.pushMarkerTo_(i);else if(Object.keys(t).length)for(var i in t)this.pushMarkerTo_(t[i]);e||this.redraw()},o.prototype.pushMarkerTo_=function(t){if(t.isAdded=!1,t.draggable){var e=this;google.maps.event.addListener(t,"dragend",function(){t.isAdded=!1,e.repaint()})}this.markers_.push(t)},o.prototype.addMarker=function(t,e){this.pushMarkerTo_(t),e||this.redraw()},o.prototype.removeMarker_=function(t){var e=-1;if(this.markers_.indexOf)e=this.markers_.indexOf(t);else for(var r,i=0;r=this.markers_[i];i++)if(r==t){e=i;break}return-1!=e&&(t.setMap(null),this.markers_.splice(e,1),!0)},o.prototype.removeMarker=function(t,e){var r=this.removeMarker_(t);return!(e||!r)&&(this.resetViewport(),this.redraw(),!0)},o.prototype.removeMarkers=function(t,e){for(var r,i=!1,s=0;r=t[s];s++){var o=this.removeMarker_(r);i=i||o}if(!e&&i)return this.resetViewport(),this.redraw(),!0},o.prototype.setReady_=function(t){this.ready_||(this.ready_=t,this.createClusters_())},o.prototype.getTotalClusters=function(){return this.clusters_.length},o.prototype.getMap=function(){return this.map_},o.prototype.setMap=function(t){this.map_=t},o.prototype.getGridSize=function(){return this.gridSize_},o.prototype.setGridSize=function(t){this.gridSize_=t},o.prototype.getMinClusterSize=function(){return this.minClusterSize_},o.prototype.setMinClusterSize=function(t){this.minClusterSize_=t},o.prototype.getExtendedBounds=function(t){var e=this.getProjection(),r=new google.maps.LatLng(t.getNorthEast().lat(),t.getNorthEast().lng()),i=new google.maps.LatLng(t.getSouthWest().lat(),t.getSouthWest().lng()),s=e.fromLatLngToDivPixel(r);s.x+=this.gridSize_,s.y-=this.gridSize_;var o=e.fromLatLngToDivPixel(i);o.x-=this.gridSize_,o.y+=this.gridSize_;var n=e.fromDivPixelToLatLng(s),a=e.fromDivPixelToLatLng(o);return t.extend(n),t.extend(a),t},o.prototype.isMarkerInBounds_=function(t,e){return e.contains(t.getPosition())},o.prototype.clearMarkers=function(){this.resetViewport(!0),this.markers_=[]},o.prototype.resetViewport=function(t){for(var e,r=0;e=this.clusters_[r];r++)e.remove();var i;for(r=0;i=this.markers_[r];r++)i.isAdded=!1,t&&i.setMap(null);this.clusters_=[]},o.prototype.repaint=function(){var r=this.clusters_.slice();this.clusters_.length=0,this.resetViewport(),this.redraw(),window.setTimeout(function(){for(var t,e=0;t=r[e];e++)t.remove()},0)},o.prototype.redraw=function(){this.createClusters_()},o.prototype.distanceBetweenPoints_=function(t,e){if(!t||!e)return 0;var r=(e.lat()-t.lat())*Math.PI/180,i=(e.lng()-t.lng())*Math.PI/180,s=Math.sin(r/2)*Math.sin(r/2)+Math.cos(t.lat()*Math.PI/180)*Math.cos(e.lat()*Math.PI/180)*Math.sin(i/2)*Math.sin(i/2);return 6371*(2*Math.atan2(Math.sqrt(s),Math.sqrt(1-s)))},o.prototype.addToClosestCluster_=function(t){for(var e,r=4e4,i=null,s=(t.getPosition(),0);e=this.clusters_[s];s++){var o=e.getCenter();if(o){var n=this.distanceBetweenPoints_(o,t.getPosition());n<r&&(r=n,i=e)}}i&&i.isMarkerInClusterBounds(t)?i.addMarker(t):((e=new a(this)).addMarker(t),this.clusters_.push(e))},o.prototype.createClusters_=function(){if(this.ready_)for(var t,e=new google.maps.LatLngBounds(this.map_.getBounds().getSouthWest(),this.map_.getBounds().getNorthEast()),r=this.getExtendedBounds(e),i=0;t=this.markers_[i];i++)!t.isAdded&&this.isMarkerInBounds_(t,r)&&this.addToClosestCluster_(t)},a.prototype.isMarkerAlreadyAdded=function(t){if(this.markers_.indexOf)return-1!=this.markers_.indexOf(t);for(var e,r=0;e=this.markers_[r];r++)if(e==t)return!0;return!1},a.prototype.addMarker=function(t){if(this.isMarkerAlreadyAdded(t))return!1;if(this.center_){if(this.averageCenter_){var e=this.markers_.length+1,r=(this.center_.lat()*(e-1)+t.getPosition().lat())/e,i=(this.center_.lng()*(e-1)+t.getPosition().lng())/e;this.center_=new google.maps.LatLng(r,i),this.calculateBounds_()}}else this.center_=t.getPosition(),this.calculateBounds_();t.isAdded=!0,this.markers_.push(t);var s=this.markers_.length;if(s<this.minClusterSize_&&t.getMap()!=this.map_&&t.setMap(this.map_),s==this.minClusterSize_)for(var o=0;o<s;o++)this.markers_[o].setMap(null);return s>=this.minClusterSize_&&t.setMap(null),this.updateIcon(),!0},a.prototype.getMarkerClusterer=function(){return this.markerClusterer_},a.prototype.getBounds=function(){for(var t,e=new google.maps.LatLngBounds(this.center_,this.center_),r=this.getMarkers(),i=0;t=r[i];i++)e.extend(t.getPosition());return e},a.prototype.remove=function(){this.clusterIcon_.remove(),this.markers_.length=0,delete this.markers_},a.prototype.getSize=function(){return this.markers_.length},a.prototype.getMarkers=function(){return this.markers_},a.prototype.getCenter=function(){return this.center_},a.prototype.calculateBounds_=function(){var t=new google.maps.LatLngBounds(this.center_,this.center_);this.bounds_=this.markerClusterer_.getExtendedBounds(t)},a.prototype.isMarkerInClusterBounds=function(t){return this.bounds_.contains(t.getPosition())},a.prototype.getMap=function(){return this.map_},a.prototype.updateIcon=function(){var t=this.map_.getZoom(),e=this.markerClusterer_.getMaxZoom();if(e&&e<t)for(var r,i=0;r=this.markers_[i];i++)r.setMap(this.map_);else if(this.markers_.length<this.minClusterSize_)this.clusterIcon_.hide();else{var s=this.markerClusterer_.getStyles().length,o=this.markerClusterer_.getCalculator()(this.markers_,s);this.clusterIcon_.setCenter(this.center_),this.clusterIcon_.setSums(o),this.clusterIcon_.show()}},i.prototype.triggerClusterClick=function(){var t=this.cluster_.getMarkerClusterer();google.maps.event.trigger(t,"clusterclick",this.cluster_),t.isZoomOnClick()&&this.map_.fitBounds(this.cluster_.getBounds())},i.prototype.onAdd=function(){if(this.div_=document.createElement("DIV"),this.visible_){var t=this.getPosFromLatLng_(this.center_);this.div_.style.cssText=this.createCss(t),this.div_.innerHTML=this.sums_.text}this.getPanes().overlayMouseTarget.appendChild(this.div_);var e=this;google.maps.event.addDomListener(this.div_,"click",function(){e.triggerClusterClick()})},i.prototype.getPosFromLatLng_=function(t){var e=this.getProjection().fromLatLngToDivPixel(t);return e.x-=parseInt(this.width_/2,10),e.y-=parseInt(this.height_/2,10),e},i.prototype.draw=function(){if(this.visible_){var t=this.getPosFromLatLng_(this.center_);this.div_.style.top=t.y+"px",this.div_.style.left=t.x+"px"}},i.prototype.hide=function(){this.div_&&(this.div_.style.display="none"),this.visible_=!1},i.prototype.show=function(){if(this.div_){var t=this.getPosFromLatLng_(this.center_);this.div_.style.cssText=this.createCss(t),this.div_.style.display=""}this.visible_=!0},i.prototype.remove=function(){this.setMap(null)},i.prototype.onRemove=function(){this.div_&&this.div_.parentNode&&(this.hide(),this.div_.parentNode.removeChild(this.div_),this.div_=null)},i.prototype.setSums=function(t){this.sums_=t,this.text_=t.text,this.index_=t.index,this.div_&&(this.div_.innerHTML=t.text),this.useStyle()},i.prototype.useStyle=function(){var t=Math.max(0,this.sums_.index-1);t=Math.min(this.styles_.length-1,t);var e=this.styles_[t];this.url_=e.url,this.height_=e.height,this.width_=e.width,this.textColor_=e.textColor,this.anchor_=e.anchor,this.textSize_=e.textSize,this.backgroundPosition_=e.backgroundPosition},i.prototype.setCenter=function(t){this.center_=t},i.prototype.createCss=function(t){var e=[];e.push("background-image:url("+this.url_+");");var r=this.backgroundPosition_?this.backgroundPosition_:"0 0";e.push("background-position:"+r+";"),"object"==typeof this.anchor_?("number"==typeof this.anchor_[0]&&0<this.anchor_[0]&&this.anchor_[0]<this.height_?e.push("height:"+(this.height_-this.anchor_[0])+"px; padding-top:"+this.anchor_[0]+"px;"):e.push("height:"+this.height_+"px; line-height:"+this.height_+"px;"),"number"==typeof this.anchor_[1]&&0<this.anchor_[1]&&this.anchor_[1]<this.width_?e.push("width:"+(this.width_-this.anchor_[1])+"px; padding-left:"+this.anchor_[1]+"px;"):e.push("width:"+this.width_+"px; text-align:center;")):e.push("height:"+this.height_+"px; line-height:"+this.height_+"px; width:"+this.width_+"px; text-align:center;");var i=this.textColor_?this.textColor_:"black",s=this.textSize_?this.textSize_:11;return e.push("cursor:pointer; top:"+t.y+"px; left:"+t.x+"px; color:"+i+"; position:absolute; font-size:"+s+"px; font-family:Arial,sans-serif; font-weight:bold"),e.join("")},e=window,t.prototype={add:function(t){this.items.push(t)},remove:function(t){var e=this.items.indexOf(t);-1!==e&&this.items.splice(e,1)},find:function(t,e){for(var r=this.items,i=r.length,s=[],o=0;o<i;o++)t(r[o],o)&&s.push(r[o]);return e&&e.call(this,s),s}},(r=t).create=function(t){return new r(t)},e.List=r,s=window,n=google,h=List,_.prototype={zoom:function(t){if(!t)return this.gMap.getZoom();this.gMap.setZoom(t)},centeredMap:function(t){this.gMap.setCenter(new n.maps.LatLng(t.lat,t.lng),15)},addMarker:function(e){var r,i;return e.position={lat:e.lat,lng:e.lng},r=this._createMarker(e),this.markerClusterer&&this.markerClusterer.addMarker(r),this.markers.add(r),e.events&&this._attachEvents(r,e.events),e.content&&this._on({obj:r,event:"click",callback:function(t){i||(i=new n.maps.InfoWindow({content:e.content})),i.getMap()?i.close():i.open(this.gMap,r)}}),r},setPano:function(t,e){var r=new n.maps.StreetViewPanorama(t,e);this.gMap.setStreetView(r),e.events&&this._attachEvents(r,e.events)},findBy:function(t){return this.markers.find(t)},removeBy:function(t){var e=this;this.markers.find(t,function(t){t.forEach(function(t){e.markerClusterer?e.markerClusterer.removeMarker(t):t.setMap(null)})})},geocode:function(r){this.geocoder.geocode({address:r.address},function(t,e){e===n.maps.GeocoderStatus.OK?r.success.call(this,t,e):r.error.call(this,e)})},getCurrentPosition:function(e){navigator.geolocation&&navigator.geolocation.getCurrentPosition(function(t){e.call(this,t)})},_attachEvents:function(e,t){var r=this;t.forEach(function(t){r._on({obj:e,event:t.name,callback:t.callback})})},_on:function(e){var r=this;n.maps.event.addListener(e.obj,e.event,function(t){e.callback.call(r,t,e.obj)})},_createMarker:function(t){return t.map=this.gMap,new n.maps.Marker(t)}},(l=_).create=function(t,e){return new l(t,e)},s.Mapster=l,window,p=google,(window.Mapster||(window.Mapster={})).MAP_OPTIONS={center:{lat:37.79135,lng:-122.435883},zoom:10,disableDefaultUI:!1,scrollwheel:!0,draggable:!0,mapTypeId:p.maps.MapTypeId.ROADMAP,zoomControlOptions:{position:p.maps.ControlPosition.BOTTOM_LEFT,style:p.maps.ZoomControlStyle.DEFAULT},panControlOptions:{position:p.maps.ControlPosition.LEFT_BOTTOM},styles:[{elementType:"geometry",stylers:[{color:"#f5f5f5"}]},{elementType:"labels.icon",stylers:[{visibility:"off"}]},{elementType:"labels.text.fill",stylers:[{color:"#616161"}]},{elementType:"labels.text.stroke",stylers:[{color:"#f5f5f5"}]},{featureType:"administrative.land_parcel",elementType:"labels.text.fill",stylers:[{color:"#bdbdbd"}]},{featureType:"poi",elementType:"geometry",stylers:[{color:"#eeeeee"}]},{featureType:"poi",elementType:"labels.text.fill",stylers:[{color:"#757575"}]},{featureType:"poi.park",elementType:"geometry",stylers:[{color:"#e5e5e5"}]},{featureType:"poi.park",elementType:"labels.text.fill",stylers:[{color:"#9e9e9e"}]},{featureType:"road",elementType:"geometry",stylers:[{color:"#ffffff"}]},{featureType:"road.arterial",elementType:"labels.text.fill",stylers:[{color:"#757575"}]},{featureType:"road.highway",elementType:"geometry",stylers:[{color:"#dadada"}]},{featureType:"road.highway",elementType:"labels.text.fill",stylers:[{color:"#616161"}]},{featureType:"road.local",elementType:"labels.text.fill",stylers:[{color:"#9e9e9e"}]},{featureType:"transit.line",elementType:"geometry",stylers:[{color:"#e5e5e5"}]},{featureType:"transit.station",elementType:"geometry",stylers:[{color:"#eeeeee"}]},{featureType:"water",elementType:"geometry",stylers:[{color:"#c9c9c9"}]},{featureType:"water",elementType:"labels.text.fill",stylers:[{color:"#9e9e9e"}]}],cluster:!1,geocoder:!0},window,google,u=Mapster,$.widget("mapster.mapster",{options:{},_create:function(){var t=this.element[0],e=this.options;this.map=u.create(t,e)},_refresh:function(){},addMarker:function(e){var r=this;e.location?this.map.geocode({address:e.location,success:function(t){t.forEach(function(t){e.lat=t.geometry.location.lat(),e.lng=t.geometry.location.lng(),r.map.addMarker(e)})},error:function(t){console.error(t)}}):this.map.addMarker(e)},findMarker:function(t){return this.map.findBy(t)},removeMarker:function(t){this.map.removeBy(t)},getMarkers:function(){return this.map.markers.items},setPano:function(t,r){var e=$(t),i=this;$.each(e,function(t,e){i.map.setPano(e,r)})},getCurrentPosition:function(t){this.map.getCurrentPosition(t)},centeredMap:function(t){this.map.centeredMap(t)},_destroy:function(){},_setOptions:function(){this._superApply(arguments),this._refresh()},_setOption:function(t,e){this._super(t,e)}}),window,google,(c=jQuery("#map-canvas").mapster(Mapster.MAP_OPTIONS)).mapster("getCurrentPosition",function(t){console.log(this),c.mapster("addMarker",{lat:t.coords.latitude,lng:t.coords.latitude}),setTimeout(function(){c.mapster("centeredMap",{lat:t.coords.latitude,lng:t.coords.latitude})},2e3)});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1hcmtlcmNsdXN0ZXJlci5qcyIsIkxpc3QuanMiLCJNYXBzdGVyLmpzIiwibWFwLW9wdGlvbnMuanMiLCJqcXVlcnl1aS5tYXBzdGVyLmpzIiwibWFpbi5qcyJdLCJuYW1lcyI6WyJNYXJrZXJDbHVzdGVyZXIiLCJtYXAiLCJvcHRfbWFya2VycyIsIm9wdF9vcHRpb25zIiwidGhpcyIsImV4dGVuZCIsImdvb2dsZSIsIm1hcHMiLCJPdmVybGF5VmlldyIsIm1hcF8iLCJtYXJrZXJzXyIsImNsdXN0ZXJzXyIsInNpemVzIiwic3R5bGVzXyIsInJlYWR5XyIsIm9wdGlvbnMiLCJncmlkU2l6ZV8iLCJtaW5DbHVzdGVyU2l6ZV8iLCJtYXhab29tXyIsImltYWdlUGF0aF8iLCJNQVJLRVJfQ0xVU1RFUl9JTUFHRV9QQVRIXyIsImltYWdlRXh0ZW5zaW9uXyIsIk1BUktFUl9DTFVTVEVSX0lNQUdFX0VYVEVOU0lPTl8iLCJ6b29tT25DbGlja18iLCJ1bmRlZmluZWQiLCJhdmVyYWdlQ2VudGVyXyIsInNldHVwU3R5bGVzXyIsInNldE1hcCIsInByZXZab29tXyIsImdldFpvb20iLCJ0aGF0IiwiZXZlbnQiLCJhZGRMaXN0ZW5lciIsInpvb20iLCJtaW5ab29tIiwibWF4Wm9vbSIsIk1hdGgiLCJtaW4iLCJtYXBUeXBlcyIsImdldE1hcFR5cGVJZCIsIm1heCIsInJlc2V0Vmlld3BvcnQiLCJyZWRyYXciLCJsZW5ndGgiLCJPYmplY3QiLCJrZXlzIiwiYWRkTWFya2VycyIsIkNsdXN0ZXIiLCJtYXJrZXJDbHVzdGVyZXIiLCJtYXJrZXJDbHVzdGVyZXJfIiwiZ2V0TWFwIiwiZ2V0R3JpZFNpemUiLCJnZXRNaW5DbHVzdGVyU2l6ZSIsImlzQXZlcmFnZUNlbnRlciIsImNlbnRlcl8iLCJib3VuZHNfIiwiY2x1c3Rlckljb25fIiwiQ2x1c3Rlckljb24iLCJnZXRTdHlsZXMiLCJjbHVzdGVyIiwic3R5bGVzIiwib3B0X3BhZGRpbmciLCJnZXRNYXJrZXJDbHVzdGVyZXIiLCJwYWRkaW5nXyIsImNsdXN0ZXJfIiwiZGl2XyIsInN1bXNfIiwidmlzaWJsZV8iLCJMaXN0IiwicGFyYW1zIiwiaXRlbXMiLCJ3aW5kb3ciLCJNYXBzdGVyIiwiJG1hcHN0ZXIiLCJlbGVtZW50Iiwib3B0cyIsImdNYXAiLCJNYXAiLCJtYXJrZXJzIiwiY3JlYXRlIiwiZ2VvY29kZXIiLCJHZW9jb2RlciIsInByb3RvdHlwZSIsIm9iajEiLCJvYmoyIiwib2JqZWN0IiwicHJvcGVydHkiLCJhcHBseSIsIm9uQWRkIiwic2V0UmVhZHlfIiwiZHJhdyIsInNpemUiLCJpIiwicHVzaCIsInVybCIsImhlaWdodCIsIndpZHRoIiwiZml0TWFwVG9NYXJrZXJzIiwibWFya2VyIiwiZ2V0TWFya2VycyIsImJvdW5kcyIsIkxhdExuZ0JvdW5kcyIsImdldFBvc2l0aW9uIiwiZml0Qm91bmRzIiwic2V0U3R5bGVzIiwiaXNab29tT25DbGljayIsImdldFRvdGFsTWFya2VycyIsInNldE1heFpvb20iLCJnZXRNYXhab29tIiwiY2FsY3VsYXRvcl8iLCJudW1TdHlsZXMiLCJpbmRleCIsImNvdW50IiwiZHYiLCJwYXJzZUludCIsInRleHQiLCJzZXRDYWxjdWxhdG9yIiwiY2FsY3VsYXRvciIsImdldENhbGN1bGF0b3IiLCJvcHRfbm9kcmF3IiwicHVzaE1hcmtlclRvXyIsImlzQWRkZWQiLCJyZXBhaW50IiwiYWRkTWFya2VyIiwicmVtb3ZlTWFya2VyXyIsImluZGV4T2YiLCJtIiwic3BsaWNlIiwicmVtb3ZlTWFya2VyIiwicmVtb3ZlZCIsInJlbW92ZU1hcmtlcnMiLCJyIiwicmVhZHkiLCJjcmVhdGVDbHVzdGVyc18iLCJnZXRUb3RhbENsdXN0ZXJzIiwic2V0R3JpZFNpemUiLCJzZXRNaW5DbHVzdGVyU2l6ZSIsImdldEV4dGVuZGVkQm91bmRzIiwicHJvamVjdGlvbiIsImdldFByb2plY3Rpb24iLCJ0ciIsIkxhdExuZyIsImdldE5vcnRoRWFzdCIsImxhdCIsImxuZyIsImJsIiwiZ2V0U291dGhXZXN0IiwidHJQaXgiLCJmcm9tTGF0TG5nVG9EaXZQaXhlbCIsIngiLCJ5IiwiYmxQaXgiLCJuZSIsImZyb21EaXZQaXhlbFRvTGF0TG5nIiwic3ciLCJpc01hcmtlckluQm91bmRzXyIsImNvbnRhaW5zIiwiY2xlYXJNYXJrZXJzIiwib3B0X2hpZGUiLCJyZW1vdmUiLCJvbGRDbHVzdGVycyIsInNsaWNlIiwic2V0VGltZW91dCIsImRpc3RhbmNlQmV0d2VlblBvaW50c18iLCJwMSIsInAyIiwiZExhdCIsIlBJIiwiZExvbiIsImEiLCJzaW4iLCJjb3MiLCJhdGFuMiIsInNxcnQiLCJhZGRUb0Nsb3Nlc3RDbHVzdGVyXyIsImRpc3RhbmNlIiwiY2x1c3RlclRvQWRkVG8iLCJjZW50ZXIiLCJnZXRDZW50ZXIiLCJkIiwiaXNNYXJrZXJJbkNsdXN0ZXJCb3VuZHMiLCJtYXBCb3VuZHMiLCJnZXRCb3VuZHMiLCJpc01hcmtlckFscmVhZHlBZGRlZCIsImwiLCJjYWxjdWxhdGVCb3VuZHNfIiwibGVuIiwidXBkYXRlSWNvbiIsImdldFNpemUiLCJteiIsImhpZGUiLCJzdW1zIiwic2V0Q2VudGVyIiwic2V0U3VtcyIsInNob3ciLCJ0cmlnZ2VyQ2x1c3RlckNsaWNrIiwidHJpZ2dlciIsImRvY3VtZW50IiwiY3JlYXRlRWxlbWVudCIsInBvcyIsImdldFBvc0Zyb21MYXRMbmdfIiwic3R5bGUiLCJjc3NUZXh0IiwiY3JlYXRlQ3NzIiwiaW5uZXJIVE1MIiwiZ2V0UGFuZXMiLCJvdmVybGF5TW91c2VUYXJnZXQiLCJhcHBlbmRDaGlsZCIsImFkZERvbUxpc3RlbmVyIiwibGF0bG5nIiwid2lkdGhfIiwiaGVpZ2h0XyIsInRvcCIsImxlZnQiLCJkaXNwbGF5Iiwib25SZW1vdmUiLCJwYXJlbnROb2RlIiwicmVtb3ZlQ2hpbGQiLCJ0ZXh0XyIsImluZGV4XyIsInVzZVN0eWxlIiwidXJsXyIsInRleHRDb2xvcl8iLCJhbmNob3JfIiwidGV4dFNpemVfIiwiYmFja2dyb3VuZFBvc2l0aW9uXyIsImJhY2tncm91bmRQb3NpdGlvbiIsInR4dENvbG9yIiwidHh0U2l6ZSIsImpvaW4iLCJhZGQiLCJpdGVtIiwiZmluZCIsImNhbGxiYWNrIiwiYWN0aW9uIiwibWF0Y2hlcyIsImNhbGwiLCJsZXZlbCIsInNldFpvb20iLCJjZW50ZXJlZE1hcCIsIm9iaiIsImluZm9XaWRvdyIsInBvc2l0aW9uIiwiX2NyZWF0ZU1hcmtlciIsImV2ZW50cyIsIl9hdHRhY2hFdmVudHMiLCJjb250ZW50IiwiX29uIiwiZSIsIkluZm9XaW5kb3ciLCJjbG9zZSIsIm9wZW4iLCJzZXRQYW5vIiwicGFub3JhbWEiLCJTdHJlZXRWaWV3UGFub3JhbWEiLCJzZXRTdHJlZXRWaWV3IiwiZmluZEJ5IiwicmVtb3ZlQnkiLCJzZWxmIiwiZm9yRWFjaCIsImdlb2NvZGUiLCJhZGRyZXNzIiwicmVzdWx0cyIsInN0YXR1cyIsIkdlb2NvZGVyU3RhdHVzIiwiT0siLCJzdWNjZXNzIiwiZXJyb3IiLCJnZXRDdXJyZW50UG9zaXRpb24iLCJuYXZpZ2F0b3IiLCJnZW9sb2NhdGlvbiIsIm5hbWUiLCJNYXJrZXIiLCJNQVBfT1BUSU9OUyIsImRpc2FibGVEZWZhdWx0VUkiLCJzY3JvbGx3aGVlbCIsImRyYWdnYWJsZSIsIm1hcFR5cGVJZCIsIk1hcFR5cGVJZCIsIlJPQURNQVAiLCJ6b29tQ29udHJvbE9wdGlvbnMiLCJDb250cm9sUG9zaXRpb24iLCJCT1RUT01fTEVGVCIsIlpvb21Db250cm9sU3R5bGUiLCJERUZBVUxUIiwicGFuQ29udHJvbE9wdGlvbnMiLCJMRUZUX0JPVFRPTSIsImVsZW1lbnRUeXBlIiwic3R5bGVycyIsImNvbG9yIiwidmlzaWJpbGl0eSIsImZlYXR1cmVUeXBlIiwiJCIsIndpZGdldCIsIl9jcmVhdGUiLCJfcmVmcmVzaCIsImxvY2F0aW9uIiwicmVzdWx0IiwiZ2VvbWV0cnkiLCJjb25zb2xlIiwiZmluZE1hcmtlciIsInNlbGVjdG9yIiwiZWxlbWVudHMiLCJlYWNoIiwia2V5IiwiX2Rlc3Ryb3kiLCJfc2V0T3B0aW9ucyIsIl9zdXBlckFwcGx5IiwiYXJndW1lbnRzIiwiX3NldE9wdGlvbiIsInZhbHVlIiwiX3N1cGVyIiwialF1ZXJ5IiwibWFwc3RlciIsImxvZyIsImNvb3JkcyIsImxhdGl0dWRlIl0sIm1hcHBpbmdzIjoiQUF3REEsU0FBQUEsRUFBQUMsRUFBQUMsRUFBQUMsR0FNQUMsS0FBQUMsT0FBQUwsRUFBQU0sT0FBQUMsS0FBQUMsYUFDQUosS0FBQUssS0FBQVIsRUFNQUcsS0FBQU0sU0FBQSxHQUtBTixLQUFBTyxVQUFBLEdBRUFQLEtBQUFRLE1BQUEsQ0FBQSxHQUFBLEdBQUEsR0FBQSxHQUFBLElBS0FSLEtBQUFTLFFBQUEsR0FNQVQsS0FBQVUsUUFBQSxFQUVBLElBQUFDLEVBQUFaLEdBQUEsR0FNQUMsS0FBQVksVUFBQUQsRUFBQSxVQUFBLEdBS0FYLEtBQUFhLGdCQUFBRixFQUFBLG9CQUFBLEVBT0FYLEtBQUFjLFNBQUFILEVBQUEsU0FBQSxLQUVBWCxLQUFBUyxRQUFBRSxFQUFBLFFBQUEsR0FNQVgsS0FBQWUsV0FBQUosRUFBQSxXQUNBWCxLQUFBZ0IsMkJBTUFoQixLQUFBaUIsZ0JBQUFOLEVBQUEsZ0JBQ0FYLEtBQUFrQixnQ0FNQWxCLEtBQUFtQixjQUFBLEVBRUFDLE1BQUFULEVBQUEsY0FDQVgsS0FBQW1CLGFBQUFSLEVBQUEsYUFPQVgsS0FBQXFCLGdCQUFBLEVBRUFELE1BQUFULEVBQUEsZ0JBQ0FYLEtBQUFxQixlQUFBVixFQUFBLGVBR0FYLEtBQUFzQixlQUVBdEIsS0FBQXVCLE9BQUExQixHQU1BRyxLQUFBd0IsVUFBQXhCLEtBQUFLLEtBQUFvQixVQUdBLElBQUFDLEVBQUExQixLQUNBRSxPQUFBQyxLQUFBd0IsTUFBQUMsWUFBQTVCLEtBQUFLLEtBQUEsZUFBQSxXQUVBLElBQUF3QixFQUFBSCxFQUFBckIsS0FBQW9CLFVBQ0FLLEVBQUFKLEVBQUFyQixLQUFBeUIsU0FBQSxFQUNBQyxFQUFBQyxLQUFBQyxJQUFBUCxFQUFBckIsS0FBQTBCLFNBQUEsSUFDQUwsRUFBQXJCLEtBQUE2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QUFBRCxFQUFBLFNBQUFFLEVBQUF0TyxHQUNBd0wsRUFBQWpRLElBQUEyUCxRQUFBbEwsRUFBQUMsTUFHQWlNLG1CQUFBLFNBQUFuQyxHQUNBck8sS0FBQUgsSUFBQTJRLG1CQUFBbkMsSUFFQU0sWUFBQSxTQUFBQyxHQUNBNU8sS0FBQUgsSUFBQThPLFlBQUFDLElBSUFpRSxTQUFBLGFBTUFDLFlBQUEsV0FFQTlTLEtBQUErUyxZQUFBQyxXQUNBaFQsS0FBQW1TLFlBSUFjLFdBQUEsU0FBQUwsRUFBQU0sR0FDQWxULEtBQUFtVCxPQUFBUCxFQUFBTSxNQ0hBL08sT0FBQWpFLFFBdEVBbUUsRUFzRUErTyxPQXRFQSxlQUFBQyxRQUFBalAsUUFBQXlNLGNBd0RBd0MsUUFBQSxxQkFBQSxTQUFBdkUsR0FDQXlELFFBQUFlLElBQUF0VCxNQUNBcUUsRUFBQWdQLFFBQUEsWUFBQSxDQUNBMUssSUFBQW1HLEVBQUF5RSxPQUFBQyxTQUNBNUssSUFBQWtHLEVBQUF5RSxPQUFBQyxXQUVBMUosV0FBQSxXQUNBekYsRUFBQWdQLFFBQUEsY0FBQSxDQUNBMUssSUFBQW1HLEVBQUF5RSxPQUFBQyxTQUNBNUssSUFBQWtHLEVBQUF5RSxPQUFBQyxZQUVBIiwiZmlsZSI6ImN1c3RvbS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQG5hbWUgTWFya2VyQ2x1c3RlcmVyIGZvciBHb29nbGUgTWFwcyB2M1xuICogQHZlcnNpb24gdmVyc2lvbiAxLjAuMVxuICogQGF1dGhvciBMdWtlIE1haGVcbiAqIEBmaWxlb3ZlcnZpZXdcbiAqIFRoZSBsaWJyYXJ5IGNyZWF0ZXMgYW5kIG1hbmFnZXMgcGVyLXpvb20tbGV2ZWwgY2x1c3RlcnMgZm9yIGxhcmdlIGFtb3VudHMgb2ZcbiAqIG1hcmtlcnMuXG4gKiA8YnIvPlxuICogVGhpcyBpcyBhIHYzIGltcGxlbWVudGF0aW9uIG9mIHRoZVxuICogPGEgaHJlZj1cImh0dHA6Ly9nbWFwcy11dGlsaXR5LWxpYnJhcnktZGV2Lmdvb2dsZWNvZGUuY29tL3N2bi90YWdzL21hcmtlcmNsdXN0ZXJlci9cIlxuICogPnYyIE1hcmtlckNsdXN0ZXJlcjwvYT4uXG4gKi9cblxuLyoqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuXG4vKipcbiAqIEEgTWFya2VyIENsdXN0ZXJlciB0aGF0IGNsdXN0ZXJzIG1hcmtlcnMuXG4gKlxuICogQHBhcmFtIHtnb29nbGUubWFwcy5NYXB9IG1hcCBUaGUgR29vZ2xlIG1hcCB0byBhdHRhY2ggdG8uXG4gKiBAcGFyYW0ge0FycmF5Ljxnb29nbGUubWFwcy5NYXJrZXI+PX0gb3B0X21hcmtlcnMgT3B0aW9uYWwgbWFya2VycyB0byBhZGQgdG9cbiAqICAgdGhlIGNsdXN0ZXIuXG4gKiBAcGFyYW0ge09iamVjdD19IG9wdF9vcHRpb25zIHN1cHBvcnQgdGhlIGZvbGxvd2luZyBvcHRpb25zOlxuICogICAgICdncmlkU2l6ZSc6IChudW1iZXIpIFRoZSBncmlkIHNpemUgb2YgYSBjbHVzdGVyIGluIHBpeGVscy5cbiAqICAgICAnbWF4Wm9vbSc6IChudW1iZXIpIFRoZSBtYXhpbXVtIHpvb20gbGV2ZWwgdGhhdCBhIG1hcmtlciBjYW4gYmUgcGFydCBvZiBhXG4gKiAgICAgICAgICAgICAgICBjbHVzdGVyLlxuICogICAgICd6b29tT25DbGljayc6IChib29sZWFuKSBXaGV0aGVyIHRoZSBkZWZhdWx0IGJlaGF2aW91ciBvZiBjbGlja2luZyBvbiBhXG4gKiAgICAgICAgICAgICAgICAgICAgY2x1c3RlciBpcyB0byB6b29tIGludG8gaXQuXG4gKiAgICAgJ2F2ZXJhZ2VDZW50ZXInOiAoYm9vbGVhbikgV2hldGhlciB0aGUgY2VudGVyIG9mIGVhY2ggY2x1c3RlciBzaG91bGQgYmVcbiAqICAgICAgICAgICAgICAgICAgICAgIHRoZSBhdmVyYWdlIG9mIGFsbCBtYXJrZXJzIGluIHRoZSBjbHVzdGVyLlxuICogICAgICdtaW5pbXVtQ2x1c3RlclNpemUnOiAobnVtYmVyKSBUaGUgbWluaW11bSBudW1iZXIgb2YgbWFya2VycyB0byBiZSBpbiBhXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsdXN0ZXIgYmVmb3JlIHRoZSBtYXJrZXJzIGFyZSBoaWRkZW4gYW5kIGEgY291bnRcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgaXMgc2hvd24uXG4gKiAgICAgJ3N0eWxlcyc6IChvYmplY3QpIEFuIG9iamVjdCB0aGF0IGhhcyBzdHlsZSBwcm9wZXJ0aWVzOlxuICogICAgICAgJ3VybCc6IChzdHJpbmcpIFRoZSBpbWFnZSB1cmwuXG4gKiAgICAgICAnaGVpZ2h0JzogKG51bWJlcikgVGhlIGltYWdlIGhlaWdodC5cbiAqICAgICAgICd3aWR0aCc6IChudW1iZXIpIFRoZSBpbWFnZSB3aWR0aC5cbiAqICAgICAgICdhbmNob3InOiAoQXJyYXkpIFRoZSBhbmNob3IgcG9zaXRpb24gb2YgdGhlIGxhYmVsIHRleHQuXG4gKiAgICAgICAndGV4dENvbG9yJzogKHN0cmluZykgVGhlIHRleHQgY29sb3IuXG4gKiAgICAgICAndGV4dFNpemUnOiAobnVtYmVyKSBUaGUgdGV4dCBzaXplLlxuICogICAgICAgJ2JhY2tncm91bmRQb3NpdGlvbic6IChzdHJpbmcpIFRoZSBwb3NpdGlvbiBvZiB0aGUgYmFja2dvdW5kIHgsIHkuXG4gKiBAY29uc3RydWN0b3JcbiAqIEBleHRlbmRzIGdvb2dsZS5tYXBzLk92ZXJsYXlWaWV3XG4gKi9cbmZ1bmN0aW9uIE1hcmtlckNsdXN0ZXJlcihtYXAsIG9wdF9tYXJrZXJzLCBvcHRfb3B0aW9ucykge1xuICAvLyBNYXJrZXJDbHVzdGVyZXIgaW1wbGVtZW50cyBnb29nbGUubWFwcy5PdmVybGF5VmlldyBpbnRlcmZhY2UuIFdlIHVzZSB0aGVcbiAgLy8gZXh0ZW5kIGZ1bmN0aW9uIHRvIGV4dGVuZCBNYXJrZXJDbHVzdGVyZXIgd2l0aCBnb29nbGUubWFwcy5PdmVybGF5Vmlld1xuICAvLyBiZWNhdXNlIGl0IG1pZ2h0IG5vdCBhbHdheXMgYmUgYXZhaWxhYmxlIHdoZW4gdGhlIGNvZGUgaXMgZGVmaW5lZCBzbyB3ZVxuICAvLyBsb29rIGZvciBpdCBhdCB0aGUgbGFzdCBwb3NzaWJsZSBtb21lbnQuIElmIGl0IGRvZXNuJ3QgZXhpc3Qgbm93IHRoZW5cbiAgLy8gdGhlcmUgaXMgbm8gcG9pbnQgZ29pbmcgYWhlYWQgOilcbiAgdGhpcy5leHRlbmQoTWFya2VyQ2x1c3RlcmVyLCBnb29nbGUubWFwcy5PdmVybGF5Vmlldyk7XG4gIHRoaXMubWFwXyA9IG1hcDtcblxuICAvKipcbiAgICogQHR5cGUge0FycmF5Ljxnb29nbGUubWFwcy5NYXJrZXI+fVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgdGhpcy5tYXJrZXJzXyA9IFtdO1xuXG4gIC8qKlxuICAgKiAgQHR5cGUge0FycmF5LjxDbHVzdGVyPn1cbiAgICovXG4gIHRoaXMuY2x1c3RlcnNfID0gW107XG5cbiAgdGhpcy5zaXplcyA9IFs1MywgNTYsIDY2LCA3OCwgOTBdO1xuXG4gIC8qKlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgdGhpcy5zdHlsZXNfID0gW107XG5cbiAgLyoqXG4gICAqIEB0eXBlIHtib29sZWFufVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgdGhpcy5yZWFkeV8gPSBmYWxzZTtcblxuICB2YXIgb3B0aW9ucyA9IG9wdF9vcHRpb25zIHx8IHt9O1xuXG4gIC8qKlxuICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgdGhpcy5ncmlkU2l6ZV8gPSBvcHRpb25zWydncmlkU2l6ZSddIHx8IDYwO1xuXG4gIC8qKlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgdGhpcy5taW5DbHVzdGVyU2l6ZV8gPSBvcHRpb25zWydtaW5pbXVtQ2x1c3RlclNpemUnXSB8fCAyO1xuXG5cbiAgLyoqXG4gICAqIEB0eXBlIHs/bnVtYmVyfVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgdGhpcy5tYXhab29tXyA9IG9wdGlvbnNbJ21heFpvb20nXSB8fCBudWxsO1xuXG4gIHRoaXMuc3R5bGVzXyA9IG9wdGlvbnNbJ3N0eWxlcyddIHx8IFtdO1xuXG4gIC8qKlxuICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgdGhpcy5pbWFnZVBhdGhfID0gb3B0aW9uc1snaW1hZ2VQYXRoJ10gfHxcbiAgICAgIHRoaXMuTUFSS0VSX0NMVVNURVJfSU1BR0VfUEFUSF87XG5cbiAgLyoqXG4gICAqIEB0eXBlIHtzdHJpbmd9XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICB0aGlzLmltYWdlRXh0ZW5zaW9uXyA9IG9wdGlvbnNbJ2ltYWdlRXh0ZW5zaW9uJ10gfHxcbiAgICAgIHRoaXMuTUFSS0VSX0NMVVNURVJfSU1BR0VfRVhURU5TSU9OXztcblxuICAvKipcbiAgICogQHR5cGUge2Jvb2xlYW59XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICB0aGlzLnpvb21PbkNsaWNrXyA9IHRydWU7XG5cbiAgaWYgKG9wdGlvbnNbJ3pvb21PbkNsaWNrJ10gIT0gdW5kZWZpbmVkKSB7XG4gICAgdGhpcy56b29tT25DbGlja18gPSBvcHRpb25zWyd6b29tT25DbGljayddO1xuICB9XG5cbiAgLyoqXG4gICAqIEB0eXBlIHtib29sZWFufVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgdGhpcy5hdmVyYWdlQ2VudGVyXyA9IGZhbHNlO1xuXG4gIGlmIChvcHRpb25zWydhdmVyYWdlQ2VudGVyJ10gIT0gdW5kZWZpbmVkKSB7XG4gICAgdGhpcy5hdmVyYWdlQ2VudGVyXyA9IG9wdGlvbnNbJ2F2ZXJhZ2VDZW50ZXInXTtcbiAgfVxuXG4gIHRoaXMuc2V0dXBTdHlsZXNfKCk7XG5cbiAgdGhpcy5zZXRNYXAobWFwKTtcblxuICAvKipcbiAgICogQHR5cGUge251bWJlcn1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIHRoaXMucHJldlpvb21fID0gdGhpcy5tYXBfLmdldFpvb20oKTtcblxuICAvLyBBZGQgdGhlIG1hcCBldmVudCBsaXN0ZW5lcnNcbiAgdmFyIHRoYXQgPSB0aGlzO1xuICBnb29nbGUubWFwcy5ldmVudC5hZGRMaXN0ZW5lcih0aGlzLm1hcF8sICd6b29tX2NoYW5nZWQnLCBmdW5jdGlvbigpIHtcbiAgICAvLyBEZXRlcm1pbmVzIG1hcCB0eXBlIGFuZCBwcmV2ZW50IGlsbGVnYWwgem9vbSBsZXZlbHNcbiAgICB2YXIgem9vbSA9IHRoYXQubWFwXy5nZXRab29tKCk7XG4gICAgdmFyIG1pblpvb20gPSB0aGF0Lm1hcF8ubWluWm9vbSB8fCAwO1xuICAgIHZhciBtYXhab29tID0gTWF0aC5taW4odGhhdC5tYXBfLm1heFpvb20gfHwgMTAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgIHRoYXQubWFwXy5tYXBUeXBlc1t0aGF0Lm1hcF8uZ2V0TWFwVHlwZUlkKCldLm1heFpvb20pO1xuICAgIHpvb20gPSBNYXRoLm1pbihNYXRoLm1heCh6b29tLG1pblpvb20pLG1heFpvb20pO1xuXG4gICAgaWYgKHRoYXQucHJldlpvb21fICE9IHpvb20pIHtcbiAgICAgIHRoYXQucHJldlpvb21fID0gem9vbTtcbiAgICAgIHRoYXQucmVzZXRWaWV3cG9ydCgpO1xuICAgIH1cbiAgfSk7XG5cbiAgZ29vZ2xlLm1hcHMuZXZlbnQuYWRkTGlzdGVuZXIodGhpcy5tYXBfLCAnaWRsZScsIGZ1bmN0aW9uKCkge1xuICAgIHRoYXQucmVkcmF3KCk7XG4gIH0pO1xuXG4gIC8vIEZpbmFsbHksIGFkZCB0aGUgbWFya2Vyc1xuICBpZiAob3B0X21hcmtlcnMgJiYgKG9wdF9tYXJrZXJzLmxlbmd0aCB8fCBPYmplY3Qua2V5cyhvcHRfbWFya2VycykubGVuZ3RoKSkge1xuICAgIHRoaXMuYWRkTWFya2VycyhvcHRfbWFya2VycywgZmFsc2UpO1xuICB9XG59XG5cblxuLyoqXG4gKiBUaGUgbWFya2VyIGNsdXN0ZXIgaW1hZ2UgcGF0aC5cbiAqXG4gKiBAdHlwZSB7c3RyaW5nfVxuICogQHByaXZhdGVcbiAqL1xuTWFya2VyQ2x1c3RlcmVyLnByb3RvdHlwZS5NQVJLRVJfQ0xVU1RFUl9JTUFHRV9QQVRIXyA9ICcuLi9pbWFnZXMvbSc7XG5cblxuLyoqXG4gKiBUaGUgbWFya2VyIGNsdXN0ZXIgaW1hZ2UgcGF0aC5cbiAqXG4gKiBAdHlwZSB7c3RyaW5nfVxuICogQHByaXZhdGVcbiAqL1xuTWFya2VyQ2x1c3RlcmVyLnByb3RvdHlwZS5NQVJLRVJfQ0xVU1RFUl9JTUFHRV9FWFRFTlNJT05fID0gJ3BuZyc7XG5cblxuLyoqXG4gKiBFeHRlbmRzIGEgb2JqZWN0cyBwcm90b3R5cGUgYnkgYW5vdGhlcnMuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IG9iajEgVGhlIG9iamVjdCB0byBiZSBleHRlbmRlZC5cbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmoyIFRoZSBvYmplY3QgdG8gZXh0ZW5kIHdpdGguXG4gKiBAcmV0dXJuIHtPYmplY3R9IFRoZSBuZXcgZXh0ZW5kZWQgb2JqZWN0LlxuICogQGlnbm9yZVxuICovXG5NYXJrZXJDbHVzdGVyZXIucHJvdG90eXBlLmV4dGVuZCA9IGZ1bmN0aW9uKG9iajEsIG9iajIpIHtcbiAgcmV0dXJuIChmdW5jdGlvbihvYmplY3QpIHtcbiAgICBmb3IgKHZhciBwcm9wZXJ0eSBpbiBvYmplY3QucHJvdG90eXBlKSB7XG4gICAgICB0aGlzLnByb3RvdHlwZVtwcm9wZXJ0eV0gPSBvYmplY3QucHJvdG90eXBlW3Byb3BlcnR5XTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG4gIH0pLmFwcGx5KG9iajEsIFtvYmoyXSk7XG59O1xuXG5cbi8qKlxuICogSW1wbGVtZW50YWlvbiBvZiB0aGUgaW50ZXJmYWNlIG1ldGhvZC5cbiAqIEBpZ25vcmVcbiAqL1xuTWFya2VyQ2x1c3RlcmVyLnByb3RvdHlwZS5vbkFkZCA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLnNldFJlYWR5Xyh0cnVlKTtcbn07XG5cbi8qKlxuICogSW1wbGVtZW50YWlvbiBvZiB0aGUgaW50ZXJmYWNlIG1ldGhvZC5cbiAqIEBpZ25vcmVcbiAqL1xuTWFya2VyQ2x1c3RlcmVyLnByb3RvdHlwZS5kcmF3ID0gZnVuY3Rpb24oKSB7fTtcblxuLyoqXG4gKiBTZXRzIHVwIHRoZSBzdHlsZXMgb2JqZWN0LlxuICpcbiAqIEBwcml2YXRlXG4gKi9cbk1hcmtlckNsdXN0ZXJlci5wcm90b3R5cGUuc2V0dXBTdHlsZXNfID0gZnVuY3Rpb24oKSB7XG4gIGlmICh0aGlzLnN0eWxlc18ubGVuZ3RoKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgZm9yICh2YXIgaSA9IDAsIHNpemU7IHNpemUgPSB0aGlzLnNpemVzW2ldOyBpKyspIHtcbiAgICB0aGlzLnN0eWxlc18ucHVzaCh7XG4gICAgICB1cmw6IHRoaXMuaW1hZ2VQYXRoXyArIChpICsgMSkgKyAnLicgKyB0aGlzLmltYWdlRXh0ZW5zaW9uXyxcbiAgICAgIGhlaWdodDogc2l6ZSxcbiAgICAgIHdpZHRoOiBzaXplXG4gICAgfSk7XG4gIH1cbn07XG5cbi8qKlxuICogIEZpdCB0aGUgbWFwIHRvIHRoZSBib3VuZHMgb2YgdGhlIG1hcmtlcnMgaW4gdGhlIGNsdXN0ZXJlci5cbiAqL1xuTWFya2VyQ2x1c3RlcmVyLnByb3RvdHlwZS5maXRNYXBUb01hcmtlcnMgPSBmdW5jdGlvbigpIHtcbiAgdmFyIG1hcmtlcnMgPSB0aGlzLmdldE1hcmtlcnMoKTtcbiAgdmFyIGJvdW5kcyA9IG5ldyBnb29nbGUubWFwcy5MYXRMbmdCb3VuZHMoKTtcbiAgZm9yICh2YXIgaSA9IDAsIG1hcmtlcjsgbWFya2VyID0gbWFya2Vyc1tpXTsgaSsrKSB7XG4gICAgYm91bmRzLmV4dGVuZChtYXJrZXIuZ2V0UG9zaXRpb24oKSk7XG4gIH1cblxuICB0aGlzLm1hcF8uZml0Qm91bmRzKGJvdW5kcyk7XG59O1xuXG5cbi8qKlxuICogIFNldHMgdGhlIHN0eWxlcy5cbiAqXG4gKiAgQHBhcmFtIHtPYmplY3R9IHN0eWxlcyBUaGUgc3R5bGUgdG8gc2V0LlxuICovXG5NYXJrZXJDbHVzdGVyZXIucHJvdG90eXBlLnNldFN0eWxlcyA9IGZ1bmN0aW9uKHN0eWxlcykge1xuICB0aGlzLnN0eWxlc18gPSBzdHlsZXM7XG59O1xuXG5cbi8qKlxuICogIEdldHMgdGhlIHN0eWxlcy5cbiAqXG4gKiAgQHJldHVybiB7T2JqZWN0fSBUaGUgc3R5bGVzIG9iamVjdC5cbiAqL1xuTWFya2VyQ2x1c3RlcmVyLnByb3RvdHlwZS5nZXRTdHlsZXMgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMuc3R5bGVzXztcbn07XG5cblxuLyoqXG4gKiBXaGV0aGVyIHpvb20gb24gY2xpY2sgaXMgc2V0LlxuICpcbiAqIEByZXR1cm4ge2Jvb2xlYW59IFRydWUgaWYgem9vbU9uQ2xpY2tfIGlzIHNldC5cbiAqL1xuTWFya2VyQ2x1c3RlcmVyLnByb3RvdHlwZS5pc1pvb21PbkNsaWNrID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLnpvb21PbkNsaWNrXztcbn07XG5cbi8qKlxuICogV2hldGhlciBhdmVyYWdlIGNlbnRlciBpcyBzZXQuXG4gKlxuICogQHJldHVybiB7Ym9vbGVhbn0gVHJ1ZSBpZiBhdmVyYWdlQ2VudGVyXyBpcyBzZXQuXG4gKi9cbk1hcmtlckNsdXN0ZXJlci5wcm90b3R5cGUuaXNBdmVyYWdlQ2VudGVyID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLmF2ZXJhZ2VDZW50ZXJfO1xufTtcblxuXG4vKipcbiAqICBSZXR1cm5zIHRoZSBhcnJheSBvZiBtYXJrZXJzIGluIHRoZSBjbHVzdGVyZXIuXG4gKlxuICogIEByZXR1cm4ge0FycmF5Ljxnb29nbGUubWFwcy5NYXJrZXI+fSBUaGUgbWFya2Vycy5cbiAqL1xuTWFya2VyQ2x1c3RlcmVyLnByb3RvdHlwZS5nZXRNYXJrZXJzID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLm1hcmtlcnNfO1xufTtcblxuXG4vKipcbiAqICBSZXR1cm5zIHRoZSBudW1iZXIgb2YgbWFya2VycyBpbiB0aGUgY2x1c3RlcmVyXG4gKlxuICogIEByZXR1cm4ge051bWJlcn0gVGhlIG51bWJlciBvZiBtYXJrZXJzLlxuICovXG5NYXJrZXJDbHVzdGVyZXIucHJvdG90eXBlLmdldFRvdGFsTWFya2VycyA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5tYXJrZXJzXy5sZW5ndGg7XG59O1xuXG5cbi8qKlxuICogIFNldHMgdGhlIG1heCB6b29tIGZvciB0aGUgY2x1c3RlcmVyLlxuICpcbiAqICBAcGFyYW0ge251bWJlcn0gbWF4Wm9vbSBUaGUgbWF4IHpvb20gbGV2ZWwuXG4gKi9cbk1hcmtlckNsdXN0ZXJlci5wcm90b3R5cGUuc2V0TWF4Wm9vbSA9IGZ1bmN0aW9uKG1heFpvb20pIHtcbiAgdGhpcy5tYXhab29tXyA9IG1heFpvb207XG59O1xuXG5cbi8qKlxuICogIEdldHMgdGhlIG1heCB6b29tIGZvciB0aGUgY2x1c3RlcmVyLlxuICpcbiAqICBAcmV0dXJuIHtudW1iZXJ9IFRoZSBtYXggem9vbSBsZXZlbC5cbiAqL1xuTWFya2VyQ2x1c3RlcmVyLnByb3RvdHlwZS5nZXRNYXhab29tID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLm1heFpvb21fO1xufTtcblxuXG4vKipcbiAqICBUaGUgZnVuY3Rpb24gZm9yIGNhbGN1bGF0aW5nIHRoZSBjbHVzdGVyIGljb24gaW1hZ2UuXG4gKlxuICogIEBwYXJhbSB7QXJyYXkuPGdvb2dsZS5tYXBzLk1hcmtlcj59IG1hcmtlcnMgVGhlIG1hcmtlcnMgaW4gdGhlIGNsdXN0ZXJlci5cbiAqICBAcGFyYW0ge251bWJlcn0gbnVtU3R5bGVzIFRoZSBudW1iZXIgb2Ygc3R5bGVzIGF2YWlsYWJsZS5cbiAqICBAcmV0dXJuIHtPYmplY3R9IEEgb2JqZWN0IHByb3BlcnRpZXM6ICd0ZXh0JyAoc3RyaW5nKSBhbmQgJ2luZGV4JyAobnVtYmVyKS5cbiAqICBAcHJpdmF0ZVxuICovXG5NYXJrZXJDbHVzdGVyZXIucHJvdG90eXBlLmNhbGN1bGF0b3JfID0gZnVuY3Rpb24obWFya2VycywgbnVtU3R5bGVzKSB7XG4gIHZhciBpbmRleCA9IDA7XG4gIHZhciBjb3VudCA9IG1hcmtlcnMubGVuZ3RoO1xuICB2YXIgZHYgPSBjb3VudDtcbiAgd2hpbGUgKGR2ICE9PSAwKSB7XG4gICAgZHYgPSBwYXJzZUludChkdiAvIDEwLCAxMCk7XG4gICAgaW5kZXgrKztcbiAgfVxuXG4gIGluZGV4ID0gTWF0aC5taW4oaW5kZXgsIG51bVN0eWxlcyk7XG4gIHJldHVybiB7XG4gICAgdGV4dDogY291bnQsXG4gICAgaW5kZXg6IGluZGV4XG4gIH07XG59O1xuXG5cbi8qKlxuICogU2V0IHRoZSBjYWxjdWxhdG9yIGZ1bmN0aW9uLlxuICpcbiAqIEBwYXJhbSB7ZnVuY3Rpb24oQXJyYXksIG51bWJlcil9IGNhbGN1bGF0b3IgVGhlIGZ1bmN0aW9uIHRvIHNldCBhcyB0aGVcbiAqICAgICBjYWxjdWxhdG9yLiBUaGUgZnVuY3Rpb24gc2hvdWxkIHJldHVybiBhIG9iamVjdCBwcm9wZXJ0aWVzOlxuICogICAgICd0ZXh0JyAoc3RyaW5nKSBhbmQgJ2luZGV4JyAobnVtYmVyKS5cbiAqXG4gKi9cbk1hcmtlckNsdXN0ZXJlci5wcm90b3R5cGUuc2V0Q2FsY3VsYXRvciA9IGZ1bmN0aW9uKGNhbGN1bGF0b3IpIHtcbiAgdGhpcy5jYWxjdWxhdG9yXyA9IGNhbGN1bGF0b3I7XG59O1xuXG5cbi8qKlxuICogR2V0IHRoZSBjYWxjdWxhdG9yIGZ1bmN0aW9uLlxuICpcbiAqIEByZXR1cm4ge2Z1bmN0aW9uKEFycmF5LCBudW1iZXIpfSB0aGUgY2FsY3VsYXRvciBmdW5jdGlvbi5cbiAqL1xuTWFya2VyQ2x1c3RlcmVyLnByb3RvdHlwZS5nZXRDYWxjdWxhdG9yID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLmNhbGN1bGF0b3JfO1xufTtcblxuXG4vKipcbiAqIEFkZCBhbiBhcnJheSBvZiBtYXJrZXJzIHRvIHRoZSBjbHVzdGVyZXIuXG4gKlxuICogQHBhcmFtIHtBcnJheS48Z29vZ2xlLm1hcHMuTWFya2VyPn0gbWFya2VycyBUaGUgbWFya2VycyB0byBhZGQuXG4gKiBAcGFyYW0ge2Jvb2xlYW49fSBvcHRfbm9kcmF3IFdoZXRoZXIgdG8gcmVkcmF3IHRoZSBjbHVzdGVycy5cbiAqL1xuTWFya2VyQ2x1c3RlcmVyLnByb3RvdHlwZS5hZGRNYXJrZXJzID0gZnVuY3Rpb24obWFya2Vycywgb3B0X25vZHJhdykge1xuICBpZiAobWFya2Vycy5sZW5ndGgpIHtcbiAgICBmb3IgKHZhciBpID0gMCwgbWFya2VyOyBtYXJrZXIgPSBtYXJrZXJzW2ldOyBpKyspIHtcbiAgICAgIHRoaXMucHVzaE1hcmtlclRvXyhtYXJrZXIpO1xuICAgIH1cbiAgfSBlbHNlIGlmIChPYmplY3Qua2V5cyhtYXJrZXJzKS5sZW5ndGgpIHtcbiAgICBmb3IgKHZhciBtYXJrZXIgaW4gbWFya2Vycykge1xuICAgICAgdGhpcy5wdXNoTWFya2VyVG9fKG1hcmtlcnNbbWFya2VyXSk7XG4gICAgfVxuICB9XG4gIGlmICghb3B0X25vZHJhdykge1xuICAgIHRoaXMucmVkcmF3KCk7XG4gIH1cbn07XG5cblxuLyoqXG4gKiBQdXNoZXMgYSBtYXJrZXIgdG8gdGhlIGNsdXN0ZXJlci5cbiAqXG4gKiBAcGFyYW0ge2dvb2dsZS5tYXBzLk1hcmtlcn0gbWFya2VyIFRoZSBtYXJrZXIgdG8gYWRkLlxuICogQHByaXZhdGVcbiAqL1xuTWFya2VyQ2x1c3RlcmVyLnByb3RvdHlwZS5wdXNoTWFya2VyVG9fID0gZnVuY3Rpb24obWFya2VyKSB7XG4gIG1hcmtlci5pc0FkZGVkID0gZmFsc2U7XG4gIGlmIChtYXJrZXJbJ2RyYWdnYWJsZSddKSB7XG4gICAgLy8gSWYgdGhlIG1hcmtlciBpcyBkcmFnZ2FibGUgYWRkIGEgbGlzdGVuZXIgc28gd2UgdXBkYXRlIHRoZSBjbHVzdGVycyBvblxuICAgIC8vIHRoZSBkcmFnIGVuZC5cbiAgICB2YXIgdGhhdCA9IHRoaXM7XG4gICAgZ29vZ2xlLm1hcHMuZXZlbnQuYWRkTGlzdGVuZXIobWFya2VyLCAnZHJhZ2VuZCcsIGZ1bmN0aW9uKCkge1xuICAgICAgbWFya2VyLmlzQWRkZWQgPSBmYWxzZTtcbiAgICAgIHRoYXQucmVwYWludCgpO1xuICAgIH0pO1xuICB9XG4gIHRoaXMubWFya2Vyc18ucHVzaChtYXJrZXIpO1xufTtcblxuXG4vKipcbiAqIEFkZHMgYSBtYXJrZXIgdG8gdGhlIGNsdXN0ZXJlciBhbmQgcmVkcmF3cyBpZiBuZWVkZWQuXG4gKlxuICogQHBhcmFtIHtnb29nbGUubWFwcy5NYXJrZXJ9IG1hcmtlciBUaGUgbWFya2VyIHRvIGFkZC5cbiAqIEBwYXJhbSB7Ym9vbGVhbj19IG9wdF9ub2RyYXcgV2hldGhlciB0byByZWRyYXcgdGhlIGNsdXN0ZXJzLlxuICovXG5NYXJrZXJDbHVzdGVyZXIucHJvdG90eXBlLmFkZE1hcmtlciA9IGZ1bmN0aW9uKG1hcmtlciwgb3B0X25vZHJhdykge1xuICB0aGlzLnB1c2hNYXJrZXJUb18obWFya2VyKTtcbiAgaWYgKCFvcHRfbm9kcmF3KSB7XG4gICAgdGhpcy5yZWRyYXcoKTtcbiAgfVxufTtcblxuXG4vKipcbiAqIFJlbW92ZXMgYSBtYXJrZXIgYW5kIHJldHVybnMgdHJ1ZSBpZiByZW1vdmVkLCBmYWxzZSBpZiBub3RcbiAqXG4gKiBAcGFyYW0ge2dvb2dsZS5tYXBzLk1hcmtlcn0gbWFya2VyIFRoZSBtYXJrZXIgdG8gcmVtb3ZlXG4gKiBAcmV0dXJuIHtib29sZWFufSBXaGV0aGVyIHRoZSBtYXJrZXIgd2FzIHJlbW92ZWQgb3Igbm90XG4gKiBAcHJpdmF0ZVxuICovXG5NYXJrZXJDbHVzdGVyZXIucHJvdG90eXBlLnJlbW92ZU1hcmtlcl8gPSBmdW5jdGlvbihtYXJrZXIpIHtcbiAgdmFyIGluZGV4ID0gLTE7XG4gIGlmICh0aGlzLm1hcmtlcnNfLmluZGV4T2YpIHtcbiAgICBpbmRleCA9IHRoaXMubWFya2Vyc18uaW5kZXhPZihtYXJrZXIpO1xuICB9IGVsc2Uge1xuICAgIGZvciAodmFyIGkgPSAwLCBtOyBtID0gdGhpcy5tYXJrZXJzX1tpXTsgaSsrKSB7XG4gICAgICBpZiAobSA9PSBtYXJrZXIpIHtcbiAgICAgICAgaW5kZXggPSBpO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBpZiAoaW5kZXggPT0gLTEpIHtcbiAgICAvLyBNYXJrZXIgaXMgbm90IGluIG91ciBsaXN0IG9mIG1hcmtlcnMuXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgbWFya2VyLnNldE1hcChudWxsKTtcblxuICB0aGlzLm1hcmtlcnNfLnNwbGljZShpbmRleCwgMSk7XG5cbiAgcmV0dXJuIHRydWU7XG59O1xuXG5cbi8qKlxuICogUmVtb3ZlIGEgbWFya2VyIGZyb20gdGhlIGNsdXN0ZXIuXG4gKlxuICogQHBhcmFtIHtnb29nbGUubWFwcy5NYXJrZXJ9IG1hcmtlciBUaGUgbWFya2VyIHRvIHJlbW92ZS5cbiAqIEBwYXJhbSB7Ym9vbGVhbj19IG9wdF9ub2RyYXcgT3B0aW9uYWwgYm9vbGVhbiB0byBmb3JjZSBubyByZWRyYXcuXG4gKiBAcmV0dXJuIHtib29sZWFufSBUcnVlIGlmIHRoZSBtYXJrZXIgd2FzIHJlbW92ZWQuXG4gKi9cbk1hcmtlckNsdXN0ZXJlci5wcm90b3R5cGUucmVtb3ZlTWFya2VyID0gZnVuY3Rpb24obWFya2VyLCBvcHRfbm9kcmF3KSB7XG4gIHZhciByZW1vdmVkID0gdGhpcy5yZW1vdmVNYXJrZXJfKG1hcmtlcik7XG5cbiAgaWYgKCFvcHRfbm9kcmF3ICYmIHJlbW92ZWQpIHtcbiAgICB0aGlzLnJlc2V0Vmlld3BvcnQoKTtcbiAgICB0aGlzLnJlZHJhdygpO1xuICAgIHJldHVybiB0cnVlO1xuICB9IGVsc2Uge1xuICAgcmV0dXJuIGZhbHNlO1xuICB9XG59O1xuXG5cbi8qKlxuICogUmVtb3ZlcyBhbiBhcnJheSBvZiBtYXJrZXJzIGZyb20gdGhlIGNsdXN0ZXIuXG4gKlxuICogQHBhcmFtIHtBcnJheS48Z29vZ2xlLm1hcHMuTWFya2VyPn0gbWFya2VycyBUaGUgbWFya2VycyB0byByZW1vdmUuXG4gKiBAcGFyYW0ge2Jvb2xlYW49fSBvcHRfbm9kcmF3IE9wdGlvbmFsIGJvb2xlYW4gdG8gZm9yY2Ugbm8gcmVkcmF3LlxuICovXG5NYXJrZXJDbHVzdGVyZXIucHJvdG90eXBlLnJlbW92ZU1hcmtlcnMgPSBmdW5jdGlvbihtYXJrZXJzLCBvcHRfbm9kcmF3KSB7XG4gIHZhciByZW1vdmVkID0gZmFsc2U7XG5cbiAgZm9yICh2YXIgaSA9IDAsIG1hcmtlcjsgbWFya2VyID0gbWFya2Vyc1tpXTsgaSsrKSB7XG4gICAgdmFyIHIgPSB0aGlzLnJlbW92ZU1hcmtlcl8obWFya2VyKTtcbiAgICByZW1vdmVkID0gcmVtb3ZlZCB8fCByO1xuICB9XG5cbiAgaWYgKCFvcHRfbm9kcmF3ICYmIHJlbW92ZWQpIHtcbiAgICB0aGlzLnJlc2V0Vmlld3BvcnQoKTtcbiAgICB0aGlzLnJlZHJhdygpO1xuICAgIHJldHVybiB0cnVlO1xuICB9XG59O1xuXG5cbi8qKlxuICogU2V0cyB0aGUgY2x1c3RlcmVyJ3MgcmVhZHkgc3RhdGUuXG4gKlxuICogQHBhcmFtIHtib29sZWFufSByZWFkeSBUaGUgc3RhdGUuXG4gKiBAcHJpdmF0ZVxuICovXG5NYXJrZXJDbHVzdGVyZXIucHJvdG90eXBlLnNldFJlYWR5XyA9IGZ1bmN0aW9uKHJlYWR5KSB7XG4gIGlmICghdGhpcy5yZWFkeV8pIHtcbiAgICB0aGlzLnJlYWR5XyA9IHJlYWR5O1xuICAgIHRoaXMuY3JlYXRlQ2x1c3RlcnNfKCk7XG4gIH1cbn07XG5cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBudW1iZXIgb2YgY2x1c3RlcnMgaW4gdGhlIGNsdXN0ZXJlci5cbiAqXG4gKiBAcmV0dXJuIHtudW1iZXJ9IFRoZSBudW1iZXIgb2YgY2x1c3RlcnMuXG4gKi9cbk1hcmtlckNsdXN0ZXJlci5wcm90b3R5cGUuZ2V0VG90YWxDbHVzdGVycyA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5jbHVzdGVyc18ubGVuZ3RoO1xufTtcblxuXG4vKipcbiAqIFJldHVybnMgdGhlIGdvb2dsZSBtYXAgdGhhdCB0aGUgY2x1c3RlcmVyIGlzIGFzc29jaWF0ZWQgd2l0aC5cbiAqXG4gKiBAcmV0dXJuIHtnb29nbGUubWFwcy5NYXB9IFRoZSBtYXAuXG4gKi9cbk1hcmtlckNsdXN0ZXJlci5wcm90b3R5cGUuZ2V0TWFwID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLm1hcF87XG59O1xuXG5cbi8qKlxuICogU2V0cyB0aGUgZ29vZ2xlIG1hcCB0aGF0IHRoZSBjbHVzdGVyZXIgaXMgYXNzb2NpYXRlZCB3aXRoLlxuICpcbiAqIEBwYXJhbSB7Z29vZ2xlLm1hcHMuTWFwfSBtYXAgVGhlIG1hcC5cbiAqL1xuTWFya2VyQ2x1c3RlcmVyLnByb3RvdHlwZS5zZXRNYXAgPSBmdW5jdGlvbihtYXApIHtcbiAgdGhpcy5tYXBfID0gbWFwO1xufTtcblxuXG4vKipcbiAqIFJldHVybnMgdGhlIHNpemUgb2YgdGhlIGdyaWQuXG4gKlxuICogQHJldHVybiB7bnVtYmVyfSBUaGUgZ3JpZCBzaXplLlxuICovXG5NYXJrZXJDbHVzdGVyZXIucHJvdG90eXBlLmdldEdyaWRTaXplID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLmdyaWRTaXplXztcbn07XG5cblxuLyoqXG4gKiBTZXRzIHRoZSBzaXplIG9mIHRoZSBncmlkLlxuICpcbiAqIEBwYXJhbSB7bnVtYmVyfSBzaXplIFRoZSBncmlkIHNpemUuXG4gKi9cbk1hcmtlckNsdXN0ZXJlci5wcm90b3R5cGUuc2V0R3JpZFNpemUgPSBmdW5jdGlvbihzaXplKSB7XG4gIHRoaXMuZ3JpZFNpemVfID0gc2l6ZTtcbn07XG5cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBtaW4gY2x1c3RlciBzaXplLlxuICpcbiAqIEByZXR1cm4ge251bWJlcn0gVGhlIGdyaWQgc2l6ZS5cbiAqL1xuTWFya2VyQ2x1c3RlcmVyLnByb3RvdHlwZS5nZXRNaW5DbHVzdGVyU2l6ZSA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5taW5DbHVzdGVyU2l6ZV87XG59O1xuXG4vKipcbiAqIFNldHMgdGhlIG1pbiBjbHVzdGVyIHNpemUuXG4gKlxuICogQHBhcmFtIHtudW1iZXJ9IHNpemUgVGhlIGdyaWQgc2l6ZS5cbiAqL1xuTWFya2VyQ2x1c3RlcmVyLnByb3RvdHlwZS5zZXRNaW5DbHVzdGVyU2l6ZSA9IGZ1bmN0aW9uKHNpemUpIHtcbiAgdGhpcy5taW5DbHVzdGVyU2l6ZV8gPSBzaXplO1xufTtcblxuXG4vKipcbiAqIEV4dGVuZHMgYSBib3VuZHMgb2JqZWN0IGJ5IHRoZSBncmlkIHNpemUuXG4gKlxuICogQHBhcmFtIHtnb29nbGUubWFwcy5MYXRMbmdCb3VuZHN9IGJvdW5kcyBUaGUgYm91bmRzIHRvIGV4dGVuZC5cbiAqIEByZXR1cm4ge2dvb2dsZS5tYXBzLkxhdExuZ0JvdW5kc30gVGhlIGV4dGVuZGVkIGJvdW5kcy5cbiAqL1xuTWFya2VyQ2x1c3RlcmVyLnByb3RvdHlwZS5nZXRFeHRlbmRlZEJvdW5kcyA9IGZ1bmN0aW9uKGJvdW5kcykge1xuICB2YXIgcHJvamVjdGlvbiA9IHRoaXMuZ2V0UHJvamVjdGlvbigpO1xuXG4gIC8vIFR1cm4gdGhlIGJvdW5kcyBpbnRvIGxhdGxuZy5cbiAgdmFyIHRyID0gbmV3IGdvb2dsZS5tYXBzLkxhdExuZyhib3VuZHMuZ2V0Tm9ydGhFYXN0KCkubGF0KCksXG4gICAgICBib3VuZHMuZ2V0Tm9ydGhFYXN0KCkubG5nKCkpO1xuICB2YXIgYmwgPSBuZXcgZ29vZ2xlLm1hcHMuTGF0TG5nKGJvdW5kcy5nZXRTb3V0aFdlc3QoKS5sYXQoKSxcbiAgICAgIGJvdW5kcy5nZXRTb3V0aFdlc3QoKS5sbmcoKSk7XG5cbiAgLy8gQ29udmVydCB0aGUgcG9pbnRzIHRvIHBpeGVscyBhbmQgdGhlIGV4dGVuZCBvdXQgYnkgdGhlIGdyaWQgc2l6ZS5cbiAgdmFyIHRyUGl4ID0gcHJvamVjdGlvbi5mcm9tTGF0TG5nVG9EaXZQaXhlbCh0cik7XG4gIHRyUGl4LnggKz0gdGhpcy5ncmlkU2l6ZV87XG4gIHRyUGl4LnkgLT0gdGhpcy5ncmlkU2l6ZV87XG5cbiAgdmFyIGJsUGl4ID0gcHJvamVjdGlvbi5mcm9tTGF0TG5nVG9EaXZQaXhlbChibCk7XG4gIGJsUGl4LnggLT0gdGhpcy5ncmlkU2l6ZV87XG4gIGJsUGl4LnkgKz0gdGhpcy5ncmlkU2l6ZV87XG5cbiAgLy8gQ29udmVydCB0aGUgcGl4ZWwgcG9pbnRzIGJhY2sgdG8gTGF0TG5nXG4gIHZhciBuZSA9IHByb2plY3Rpb24uZnJvbURpdlBpeGVsVG9MYXRMbmcodHJQaXgpO1xuICB2YXIgc3cgPSBwcm9qZWN0aW9uLmZyb21EaXZQaXhlbFRvTGF0TG5nKGJsUGl4KTtcblxuICAvLyBFeHRlbmQgdGhlIGJvdW5kcyB0byBjb250YWluIHRoZSBuZXcgYm91bmRzLlxuICBib3VuZHMuZXh0ZW5kKG5lKTtcbiAgYm91bmRzLmV4dGVuZChzdyk7XG5cbiAgcmV0dXJuIGJvdW5kcztcbn07XG5cblxuLyoqXG4gKiBEZXRlcm1pbnMgaWYgYSBtYXJrZXIgaXMgY29udGFpbmVkIGluIGEgYm91bmRzLlxuICpcbiAqIEBwYXJhbSB7Z29vZ2xlLm1hcHMuTWFya2VyfSBtYXJrZXIgVGhlIG1hcmtlciB0byBjaGVjay5cbiAqIEBwYXJhbSB7Z29vZ2xlLm1hcHMuTGF0TG5nQm91bmRzfSBib3VuZHMgVGhlIGJvdW5kcyB0byBjaGVjayBhZ2FpbnN0LlxuICogQHJldHVybiB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgbWFya2VyIGlzIGluIHRoZSBib3VuZHMuXG4gKiBAcHJpdmF0ZVxuICovXG5NYXJrZXJDbHVzdGVyZXIucHJvdG90eXBlLmlzTWFya2VySW5Cb3VuZHNfID0gZnVuY3Rpb24obWFya2VyLCBib3VuZHMpIHtcbiAgcmV0dXJuIGJvdW5kcy5jb250YWlucyhtYXJrZXIuZ2V0UG9zaXRpb24oKSk7XG59O1xuXG5cbi8qKlxuICogQ2xlYXJzIGFsbCBjbHVzdGVycyBhbmQgbWFya2VycyBmcm9tIHRoZSBjbHVzdGVyZXIuXG4gKi9cbk1hcmtlckNsdXN0ZXJlci5wcm90b3R5cGUuY2xlYXJNYXJrZXJzID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMucmVzZXRWaWV3cG9ydCh0cnVlKTtcblxuICAvLyBTZXQgdGhlIG1hcmtlcnMgYSBlbXB0eSBhcnJheS5cbiAgdGhpcy5tYXJrZXJzXyA9IFtdO1xufTtcblxuXG4vKipcbiAqIENsZWFycyBhbGwgZXhpc3RpbmcgY2x1c3RlcnMgYW5kIHJlY3JlYXRlcyB0aGVtLlxuICogQHBhcmFtIHtib29sZWFufSBvcHRfaGlkZSBUbyBhbHNvIGhpZGUgdGhlIG1hcmtlci5cbiAqL1xuTWFya2VyQ2x1c3RlcmVyLnByb3RvdHlwZS5yZXNldFZpZXdwb3J0ID0gZnVuY3Rpb24ob3B0X2hpZGUpIHtcbiAgLy8gUmVtb3ZlIGFsbCB0aGUgY2x1c3RlcnNcbiAgZm9yICh2YXIgaSA9IDAsIGNsdXN0ZXI7IGNsdXN0ZXIgPSB0aGlzLmNsdXN0ZXJzX1tpXTsgaSsrKSB7XG4gICAgY2x1c3Rlci5yZW1vdmUoKTtcbiAgfVxuXG4gIC8vIFJlc2V0IHRoZSBtYXJrZXJzIHRvIG5vdCBiZSBhZGRlZCBhbmQgdG8gYmUgaW52aXNpYmxlLlxuICBmb3IgKHZhciBpID0gMCwgbWFya2VyOyBtYXJrZXIgPSB0aGlzLm1hcmtlcnNfW2ldOyBpKyspIHtcbiAgICBtYXJrZXIuaXNBZGRlZCA9IGZhbHNlO1xuICAgIGlmIChvcHRfaGlkZSkge1xuICAgICAgbWFya2VyLnNldE1hcChudWxsKTtcbiAgICB9XG4gIH1cblxuICB0aGlzLmNsdXN0ZXJzXyA9IFtdO1xufTtcblxuLyoqXG4gKlxuICovXG5NYXJrZXJDbHVzdGVyZXIucHJvdG90eXBlLnJlcGFpbnQgPSBmdW5jdGlvbigpIHtcbiAgdmFyIG9sZENsdXN0ZXJzID0gdGhpcy5jbHVzdGVyc18uc2xpY2UoKTtcbiAgdGhpcy5jbHVzdGVyc18ubGVuZ3RoID0gMDtcbiAgdGhpcy5yZXNldFZpZXdwb3J0KCk7XG4gIHRoaXMucmVkcmF3KCk7XG5cbiAgLy8gUmVtb3ZlIHRoZSBvbGQgY2x1c3RlcnMuXG4gIC8vIERvIGl0IGluIGEgdGltZW91dCBzbyB0aGUgb3RoZXIgY2x1c3RlcnMgaGF2ZSBiZWVuIGRyYXduIGZpcnN0LlxuICB3aW5kb3cuc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICBmb3IgKHZhciBpID0gMCwgY2x1c3RlcjsgY2x1c3RlciA9IG9sZENsdXN0ZXJzW2ldOyBpKyspIHtcbiAgICAgIGNsdXN0ZXIucmVtb3ZlKCk7XG4gICAgfVxuICB9LCAwKTtcbn07XG5cblxuLyoqXG4gKiBSZWRyYXdzIHRoZSBjbHVzdGVycy5cbiAqL1xuTWFya2VyQ2x1c3RlcmVyLnByb3RvdHlwZS5yZWRyYXcgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5jcmVhdGVDbHVzdGVyc18oKTtcbn07XG5cblxuLyoqXG4gKiBDYWxjdWxhdGVzIHRoZSBkaXN0YW5jZSBiZXR3ZWVuIHR3byBsYXRsbmcgbG9jYXRpb25zIGluIGttLlxuICogQHNlZSBodHRwOi8vd3d3Lm1vdmFibGUtdHlwZS5jby51ay9zY3JpcHRzL2xhdGxvbmcuaHRtbFxuICpcbiAqIEBwYXJhbSB7Z29vZ2xlLm1hcHMuTGF0TG5nfSBwMSBUaGUgZmlyc3QgbGF0IGxuZyBwb2ludC5cbiAqIEBwYXJhbSB7Z29vZ2xlLm1hcHMuTGF0TG5nfSBwMiBUaGUgc2Vjb25kIGxhdCBsbmcgcG9pbnQuXG4gKiBAcmV0dXJuIHtudW1iZXJ9IFRoZSBkaXN0YW5jZSBiZXR3ZWVuIHRoZSB0d28gcG9pbnRzIGluIGttLlxuICogQHByaXZhdGVcbiovXG5NYXJrZXJDbHVzdGVyZXIucHJvdG90eXBlLmRpc3RhbmNlQmV0d2VlblBvaW50c18gPSBmdW5jdGlvbihwMSwgcDIpIHtcbiAgaWYgKCFwMSB8fCAhcDIpIHtcbiAgICByZXR1cm4gMDtcbiAgfVxuXG4gIHZhciBSID0gNjM3MTsgLy8gUmFkaXVzIG9mIHRoZSBFYXJ0aCBpbiBrbVxuICB2YXIgZExhdCA9IChwMi5sYXQoKSAtIHAxLmxhdCgpKSAqIE1hdGguUEkgLyAxODA7XG4gIHZhciBkTG9uID0gKHAyLmxuZygpIC0gcDEubG5nKCkpICogTWF0aC5QSSAvIDE4MDtcbiAgdmFyIGEgPSBNYXRoLnNpbihkTGF0IC8gMikgKiBNYXRoLnNpbihkTGF0IC8gMikgK1xuICAgIE1hdGguY29zKHAxLmxhdCgpICogTWF0aC5QSSAvIDE4MCkgKiBNYXRoLmNvcyhwMi5sYXQoKSAqIE1hdGguUEkgLyAxODApICpcbiAgICBNYXRoLnNpbihkTG9uIC8gMikgKiBNYXRoLnNpbihkTG9uIC8gMik7XG4gIHZhciBjID0gMiAqIE1hdGguYXRhbjIoTWF0aC5zcXJ0KGEpLCBNYXRoLnNxcnQoMSAtIGEpKTtcbiAgdmFyIGQgPSBSICogYztcbiAgcmV0dXJuIGQ7XG59O1xuXG5cbi8qKlxuICogQWRkIGEgbWFya2VyIHRvIGEgY2x1c3Rlciwgb3IgY3JlYXRlcyBhIG5ldyBjbHVzdGVyLlxuICpcbiAqIEBwYXJhbSB7Z29vZ2xlLm1hcHMuTWFya2VyfSBtYXJrZXIgVGhlIG1hcmtlciB0byBhZGQuXG4gKiBAcHJpdmF0ZVxuICovXG5NYXJrZXJDbHVzdGVyZXIucHJvdG90eXBlLmFkZFRvQ2xvc2VzdENsdXN0ZXJfID0gZnVuY3Rpb24obWFya2VyKSB7XG4gIHZhciBkaXN0YW5jZSA9IDQwMDAwOyAvLyBTb21lIGxhcmdlIG51bWJlclxuICB2YXIgY2x1c3RlclRvQWRkVG8gPSBudWxsO1xuICB2YXIgcG9zID0gbWFya2VyLmdldFBvc2l0aW9uKCk7XG4gIGZvciAodmFyIGkgPSAwLCBjbHVzdGVyOyBjbHVzdGVyID0gdGhpcy5jbHVzdGVyc19baV07IGkrKykge1xuICAgIHZhciBjZW50ZXIgPSBjbHVzdGVyLmdldENlbnRlcigpO1xuICAgIGlmIChjZW50ZXIpIHtcbiAgICAgIHZhciBkID0gdGhpcy5kaXN0YW5jZUJldHdlZW5Qb2ludHNfKGNlbnRlciwgbWFya2VyLmdldFBvc2l0aW9uKCkpO1xuICAgICAgaWYgKGQgPCBkaXN0YW5jZSkge1xuICAgICAgICBkaXN0YW5jZSA9IGQ7XG4gICAgICAgIGNsdXN0ZXJUb0FkZFRvID0gY2x1c3RlcjtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBpZiAoY2x1c3RlclRvQWRkVG8gJiYgY2x1c3RlclRvQWRkVG8uaXNNYXJrZXJJbkNsdXN0ZXJCb3VuZHMobWFya2VyKSkge1xuICAgIGNsdXN0ZXJUb0FkZFRvLmFkZE1hcmtlcihtYXJrZXIpO1xuICB9IGVsc2Uge1xuICAgIHZhciBjbHVzdGVyID0gbmV3IENsdXN0ZXIodGhpcyk7XG4gICAgY2x1c3Rlci5hZGRNYXJrZXIobWFya2VyKTtcbiAgICB0aGlzLmNsdXN0ZXJzXy5wdXNoKGNsdXN0ZXIpO1xuICB9XG59O1xuXG5cbi8qKlxuICogQ3JlYXRlcyB0aGUgY2x1c3RlcnMuXG4gKlxuICogQHByaXZhdGVcbiAqL1xuTWFya2VyQ2x1c3RlcmVyLnByb3RvdHlwZS5jcmVhdGVDbHVzdGVyc18gPSBmdW5jdGlvbigpIHtcbiAgaWYgKCF0aGlzLnJlYWR5Xykge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8vIEdldCBvdXIgY3VycmVudCBtYXAgdmlldyBib3VuZHMuXG4gIC8vIENyZWF0ZSBhIG5ldyBib3VuZHMgb2JqZWN0IHNvIHdlIGRvbid0IGFmZmVjdCB0aGUgbWFwLlxuICB2YXIgbWFwQm91bmRzID0gbmV3IGdvb2dsZS5tYXBzLkxhdExuZ0JvdW5kcyh0aGlzLm1hcF8uZ2V0Qm91bmRzKCkuZ2V0U291dGhXZXN0KCksXG4gICAgICB0aGlzLm1hcF8uZ2V0Qm91bmRzKCkuZ2V0Tm9ydGhFYXN0KCkpO1xuICB2YXIgYm91bmRzID0gdGhpcy5nZXRFeHRlbmRlZEJvdW5kcyhtYXBCb3VuZHMpO1xuXG4gIGZvciAodmFyIGkgPSAwLCBtYXJrZXI7IG1hcmtlciA9IHRoaXMubWFya2Vyc19baV07IGkrKykge1xuICAgIGlmICghbWFya2VyLmlzQWRkZWQgJiYgdGhpcy5pc01hcmtlckluQm91bmRzXyhtYXJrZXIsIGJvdW5kcykpIHtcbiAgICAgIHRoaXMuYWRkVG9DbG9zZXN0Q2x1c3Rlcl8obWFya2VyKTtcbiAgICB9XG4gIH1cbn07XG5cblxuLyoqXG4gKiBBIGNsdXN0ZXIgdGhhdCBjb250YWlucyBtYXJrZXJzLlxuICpcbiAqIEBwYXJhbSB7TWFya2VyQ2x1c3RlcmVyfSBtYXJrZXJDbHVzdGVyZXIgVGhlIG1hcmtlcmNsdXN0ZXJlciB0aGF0IHRoaXNcbiAqICAgICBjbHVzdGVyIGlzIGFzc29jaWF0ZWQgd2l0aC5cbiAqIEBjb25zdHJ1Y3RvclxuICogQGlnbm9yZVxuICovXG5mdW5jdGlvbiBDbHVzdGVyKG1hcmtlckNsdXN0ZXJlcikge1xuICB0aGlzLm1hcmtlckNsdXN0ZXJlcl8gPSBtYXJrZXJDbHVzdGVyZXI7XG4gIHRoaXMubWFwXyA9IG1hcmtlckNsdXN0ZXJlci5nZXRNYXAoKTtcbiAgdGhpcy5ncmlkU2l6ZV8gPSBtYXJrZXJDbHVzdGVyZXIuZ2V0R3JpZFNpemUoKTtcbiAgdGhpcy5taW5DbHVzdGVyU2l6ZV8gPSBtYXJrZXJDbHVzdGVyZXIuZ2V0TWluQ2x1c3RlclNpemUoKTtcbiAgdGhpcy5hdmVyYWdlQ2VudGVyXyA9IG1hcmtlckNsdXN0ZXJlci5pc0F2ZXJhZ2VDZW50ZXIoKTtcbiAgdGhpcy5jZW50ZXJfID0gbnVsbDtcbiAgdGhpcy5tYXJrZXJzXyA9IFtdO1xuICB0aGlzLmJvdW5kc18gPSBudWxsO1xuICB0aGlzLmNsdXN0ZXJJY29uXyA9IG5ldyBDbHVzdGVySWNvbih0aGlzLCBtYXJrZXJDbHVzdGVyZXIuZ2V0U3R5bGVzKCksXG4gICAgICBtYXJrZXJDbHVzdGVyZXIuZ2V0R3JpZFNpemUoKSk7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5zIGlmIGEgbWFya2VyIGlzIGFscmVhZHkgYWRkZWQgdG8gdGhlIGNsdXN0ZXIuXG4gKlxuICogQHBhcmFtIHtnb29nbGUubWFwcy5NYXJrZXJ9IG1hcmtlciBUaGUgbWFya2VyIHRvIGNoZWNrLlxuICogQHJldHVybiB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgbWFya2VyIGlzIGFscmVhZHkgYWRkZWQuXG4gKi9cbkNsdXN0ZXIucHJvdG90eXBlLmlzTWFya2VyQWxyZWFkeUFkZGVkID0gZnVuY3Rpb24obWFya2VyKSB7XG4gIGlmICh0aGlzLm1hcmtlcnNfLmluZGV4T2YpIHtcbiAgICByZXR1cm4gdGhpcy5tYXJrZXJzXy5pbmRleE9mKG1hcmtlcikgIT0gLTE7XG4gIH0gZWxzZSB7XG4gICAgZm9yICh2YXIgaSA9IDAsIG07IG0gPSB0aGlzLm1hcmtlcnNfW2ldOyBpKyspIHtcbiAgICAgIGlmIChtID09IG1hcmtlcikge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufTtcblxuXG4vKipcbiAqIEFkZCBhIG1hcmtlciB0aGUgY2x1c3Rlci5cbiAqXG4gKiBAcGFyYW0ge2dvb2dsZS5tYXBzLk1hcmtlcn0gbWFya2VyIFRoZSBtYXJrZXIgdG8gYWRkLlxuICogQHJldHVybiB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgbWFya2VyIHdhcyBhZGRlZC5cbiAqL1xuQ2x1c3Rlci5wcm90b3R5cGUuYWRkTWFya2VyID0gZnVuY3Rpb24obWFya2VyKSB7XG4gIGlmICh0aGlzLmlzTWFya2VyQWxyZWFkeUFkZGVkKG1hcmtlcikpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBpZiAoIXRoaXMuY2VudGVyXykge1xuICAgIHRoaXMuY2VudGVyXyA9IG1hcmtlci5nZXRQb3NpdGlvbigpO1xuICAgIHRoaXMuY2FsY3VsYXRlQm91bmRzXygpO1xuICB9IGVsc2Uge1xuICAgIGlmICh0aGlzLmF2ZXJhZ2VDZW50ZXJfKSB7XG4gICAgICB2YXIgbCA9IHRoaXMubWFya2Vyc18ubGVuZ3RoICsgMTtcbiAgICAgIHZhciBsYXQgPSAodGhpcy5jZW50ZXJfLmxhdCgpICogKGwtMSkgKyBtYXJrZXIuZ2V0UG9zaXRpb24oKS5sYXQoKSkgLyBsO1xuICAgICAgdmFyIGxuZyA9ICh0aGlzLmNlbnRlcl8ubG5nKCkgKiAobC0xKSArIG1hcmtlci5nZXRQb3NpdGlvbigpLmxuZygpKSAvIGw7XG4gICAgICB0aGlzLmNlbnRlcl8gPSBuZXcgZ29vZ2xlLm1hcHMuTGF0TG5nKGxhdCwgbG5nKTtcbiAgICAgIHRoaXMuY2FsY3VsYXRlQm91bmRzXygpO1xuICAgIH1cbiAgfVxuXG4gIG1hcmtlci5pc0FkZGVkID0gdHJ1ZTtcbiAgdGhpcy5tYXJrZXJzXy5wdXNoKG1hcmtlcik7XG5cbiAgdmFyIGxlbiA9IHRoaXMubWFya2Vyc18ubGVuZ3RoO1xuICBpZiAobGVuIDwgdGhpcy5taW5DbHVzdGVyU2l6ZV8gJiYgbWFya2VyLmdldE1hcCgpICE9IHRoaXMubWFwXykge1xuICAgIC8vIE1pbiBjbHVzdGVyIHNpemUgbm90IHJlYWNoZWQgc28gc2hvdyB0aGUgbWFya2VyLlxuICAgIG1hcmtlci5zZXRNYXAodGhpcy5tYXBfKTtcbiAgfVxuXG4gIGlmIChsZW4gPT0gdGhpcy5taW5DbHVzdGVyU2l6ZV8pIHtcbiAgICAvLyBIaWRlIHRoZSBtYXJrZXJzIHRoYXQgd2VyZSBzaG93aW5nLlxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgIHRoaXMubWFya2Vyc19baV0uc2V0TWFwKG51bGwpO1xuICAgIH1cbiAgfVxuXG4gIGlmIChsZW4gPj0gdGhpcy5taW5DbHVzdGVyU2l6ZV8pIHtcbiAgICBtYXJrZXIuc2V0TWFwKG51bGwpO1xuICB9XG5cbiAgdGhpcy51cGRhdGVJY29uKCk7XG4gIHJldHVybiB0cnVlO1xufTtcblxuXG4vKipcbiAqIFJldHVybnMgdGhlIG1hcmtlciBjbHVzdGVyZXIgdGhhdCB0aGUgY2x1c3RlciBpcyBhc3NvY2lhdGVkIHdpdGguXG4gKlxuICogQHJldHVybiB7TWFya2VyQ2x1c3RlcmVyfSBUaGUgYXNzb2NpYXRlZCBtYXJrZXIgY2x1c3RlcmVyLlxuICovXG5DbHVzdGVyLnByb3RvdHlwZS5nZXRNYXJrZXJDbHVzdGVyZXIgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMubWFya2VyQ2x1c3RlcmVyXztcbn07XG5cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBib3VuZHMgb2YgdGhlIGNsdXN0ZXIuXG4gKlxuICogQHJldHVybiB7Z29vZ2xlLm1hcHMuTGF0TG5nQm91bmRzfSB0aGUgY2x1c3RlciBib3VuZHMuXG4gKi9cbkNsdXN0ZXIucHJvdG90eXBlLmdldEJvdW5kcyA9IGZ1bmN0aW9uKCkge1xuICB2YXIgYm91bmRzID0gbmV3IGdvb2dsZS5tYXBzLkxhdExuZ0JvdW5kcyh0aGlzLmNlbnRlcl8sIHRoaXMuY2VudGVyXyk7XG4gIHZhciBtYXJrZXJzID0gdGhpcy5nZXRNYXJrZXJzKCk7XG4gIGZvciAodmFyIGkgPSAwLCBtYXJrZXI7IG1hcmtlciA9IG1hcmtlcnNbaV07IGkrKykge1xuICAgIGJvdW5kcy5leHRlbmQobWFya2VyLmdldFBvc2l0aW9uKCkpO1xuICB9XG4gIHJldHVybiBib3VuZHM7XG59O1xuXG5cbi8qKlxuICogUmVtb3ZlcyB0aGUgY2x1c3RlclxuICovXG5DbHVzdGVyLnByb3RvdHlwZS5yZW1vdmUgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5jbHVzdGVySWNvbl8ucmVtb3ZlKCk7XG4gIHRoaXMubWFya2Vyc18ubGVuZ3RoID0gMDtcbiAgZGVsZXRlIHRoaXMubWFya2Vyc187XG59O1xuXG5cbi8qKlxuICogUmV0dXJucyB0aGUgY2VudGVyIG9mIHRoZSBjbHVzdGVyLlxuICpcbiAqIEByZXR1cm4ge251bWJlcn0gVGhlIGNsdXN0ZXIgY2VudGVyLlxuICovXG5DbHVzdGVyLnByb3RvdHlwZS5nZXRTaXplID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLm1hcmtlcnNfLmxlbmd0aDtcbn07XG5cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBjZW50ZXIgb2YgdGhlIGNsdXN0ZXIuXG4gKlxuICogQHJldHVybiB7QXJyYXkuPGdvb2dsZS5tYXBzLk1hcmtlcj59IFRoZSBjbHVzdGVyIGNlbnRlci5cbiAqL1xuQ2x1c3Rlci5wcm90b3R5cGUuZ2V0TWFya2VycyA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5tYXJrZXJzXztcbn07XG5cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBjZW50ZXIgb2YgdGhlIGNsdXN0ZXIuXG4gKlxuICogQHJldHVybiB7Z29vZ2xlLm1hcHMuTGF0TG5nfSBUaGUgY2x1c3RlciBjZW50ZXIuXG4gKi9cbkNsdXN0ZXIucHJvdG90eXBlLmdldENlbnRlciA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5jZW50ZXJfO1xufTtcblxuXG4vKipcbiAqIENhbGN1bGF0ZWQgdGhlIGV4dGVuZGVkIGJvdW5kcyBvZiB0aGUgY2x1c3RlciB3aXRoIHRoZSBncmlkLlxuICpcbiAqIEBwcml2YXRlXG4gKi9cbkNsdXN0ZXIucHJvdG90eXBlLmNhbGN1bGF0ZUJvdW5kc18gPSBmdW5jdGlvbigpIHtcbiAgdmFyIGJvdW5kcyA9IG5ldyBnb29nbGUubWFwcy5MYXRMbmdCb3VuZHModGhpcy5jZW50ZXJfLCB0aGlzLmNlbnRlcl8pO1xuICB0aGlzLmJvdW5kc18gPSB0aGlzLm1hcmtlckNsdXN0ZXJlcl8uZ2V0RXh0ZW5kZWRCb3VuZHMoYm91bmRzKTtcbn07XG5cblxuLyoqXG4gKiBEZXRlcm1pbmVzIGlmIGEgbWFya2VyIGxpZXMgaW4gdGhlIGNsdXN0ZXJzIGJvdW5kcy5cbiAqXG4gKiBAcGFyYW0ge2dvb2dsZS5tYXBzLk1hcmtlcn0gbWFya2VyIFRoZSBtYXJrZXIgdG8gY2hlY2suXG4gKiBAcmV0dXJuIHtib29sZWFufSBUcnVlIGlmIHRoZSBtYXJrZXIgbGllcyBpbiB0aGUgYm91bmRzLlxuICovXG5DbHVzdGVyLnByb3RvdHlwZS5pc01hcmtlckluQ2x1c3RlckJvdW5kcyA9IGZ1bmN0aW9uKG1hcmtlcikge1xuICByZXR1cm4gdGhpcy5ib3VuZHNfLmNvbnRhaW5zKG1hcmtlci5nZXRQb3NpdGlvbigpKTtcbn07XG5cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBtYXAgdGhhdCB0aGUgY2x1c3RlciBpcyBhc3NvY2lhdGVkIHdpdGguXG4gKlxuICogQHJldHVybiB7Z29vZ2xlLm1hcHMuTWFwfSBUaGUgbWFwLlxuICovXG5DbHVzdGVyLnByb3RvdHlwZS5nZXRNYXAgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMubWFwXztcbn07XG5cblxuLyoqXG4gKiBVcGRhdGVzIHRoZSBjbHVzdGVyIGljb25cbiAqL1xuQ2x1c3Rlci5wcm90b3R5cGUudXBkYXRlSWNvbiA9IGZ1bmN0aW9uKCkge1xuICB2YXIgem9vbSA9IHRoaXMubWFwXy5nZXRab29tKCk7XG4gIHZhciBteiA9IHRoaXMubWFya2VyQ2x1c3RlcmVyXy5nZXRNYXhab29tKCk7XG5cbiAgaWYgKG16ICYmIHpvb20gPiBteikge1xuICAgIC8vIFRoZSB6b29tIGlzIGdyZWF0ZXIgdGhhbiBvdXIgbWF4IHpvb20gc28gc2hvdyBhbGwgdGhlIG1hcmtlcnMgaW4gY2x1c3Rlci5cbiAgICBmb3IgKHZhciBpID0gMCwgbWFya2VyOyBtYXJrZXIgPSB0aGlzLm1hcmtlcnNfW2ldOyBpKyspIHtcbiAgICAgIG1hcmtlci5zZXRNYXAodGhpcy5tYXBfKTtcbiAgICB9XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKHRoaXMubWFya2Vyc18ubGVuZ3RoIDwgdGhpcy5taW5DbHVzdGVyU2l6ZV8pIHtcbiAgICAvLyBNaW4gY2x1c3RlciBzaXplIG5vdCB5ZXQgcmVhY2hlZC5cbiAgICB0aGlzLmNsdXN0ZXJJY29uXy5oaWRlKCk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIG51bVN0eWxlcyA9IHRoaXMubWFya2VyQ2x1c3RlcmVyXy5nZXRTdHlsZXMoKS5sZW5ndGg7XG4gIHZhciBzdW1zID0gdGhpcy5tYXJrZXJDbHVzdGVyZXJfLmdldENhbGN1bGF0b3IoKSh0aGlzLm1hcmtlcnNfLCBudW1TdHlsZXMpO1xuICB0aGlzLmNsdXN0ZXJJY29uXy5zZXRDZW50ZXIodGhpcy5jZW50ZXJfKTtcbiAgdGhpcy5jbHVzdGVySWNvbl8uc2V0U3VtcyhzdW1zKTtcbiAgdGhpcy5jbHVzdGVySWNvbl8uc2hvdygpO1xufTtcblxuXG4vKipcbiAqIEEgY2x1c3RlciBpY29uXG4gKlxuICogQHBhcmFtIHtDbHVzdGVyfSBjbHVzdGVyIFRoZSBjbHVzdGVyIHRvIGJlIGFzc29jaWF0ZWQgd2l0aC5cbiAqIEBwYXJhbSB7T2JqZWN0fSBzdHlsZXMgQW4gb2JqZWN0IHRoYXQgaGFzIHN0eWxlIHByb3BlcnRpZXM6XG4gKiAgICAgJ3VybCc6IChzdHJpbmcpIFRoZSBpbWFnZSB1cmwuXG4gKiAgICAgJ2hlaWdodCc6IChudW1iZXIpIFRoZSBpbWFnZSBoZWlnaHQuXG4gKiAgICAgJ3dpZHRoJzogKG51bWJlcikgVGhlIGltYWdlIHdpZHRoLlxuICogICAgICdhbmNob3InOiAoQXJyYXkpIFRoZSBhbmNob3IgcG9zaXRpb24gb2YgdGhlIGxhYmVsIHRleHQuXG4gKiAgICAgJ3RleHRDb2xvcic6IChzdHJpbmcpIFRoZSB0ZXh0IGNvbG9yLlxuICogICAgICd0ZXh0U2l6ZSc6IChudW1iZXIpIFRoZSB0ZXh0IHNpemUuXG4gKiAgICAgJ2JhY2tncm91bmRQb3NpdGlvbjogKHN0cmluZykgVGhlIGJhY2tncm91bmQgcG9zdGl0aW9uIHgsIHkuXG4gKiBAcGFyYW0ge251bWJlcj19IG9wdF9wYWRkaW5nIE9wdGlvbmFsIHBhZGRpbmcgdG8gYXBwbHkgdG8gdGhlIGNsdXN0ZXIgaWNvbi5cbiAqIEBjb25zdHJ1Y3RvclxuICogQGV4dGVuZHMgZ29vZ2xlLm1hcHMuT3ZlcmxheVZpZXdcbiAqIEBpZ25vcmVcbiAqL1xuZnVuY3Rpb24gQ2x1c3Rlckljb24oY2x1c3Rlciwgc3R5bGVzLCBvcHRfcGFkZGluZykge1xuICBjbHVzdGVyLmdldE1hcmtlckNsdXN0ZXJlcigpLmV4dGVuZChDbHVzdGVySWNvbiwgZ29vZ2xlLm1hcHMuT3ZlcmxheVZpZXcpO1xuXG4gIHRoaXMuc3R5bGVzXyA9IHN0eWxlcztcbiAgdGhpcy5wYWRkaW5nXyA9IG9wdF9wYWRkaW5nIHx8IDA7XG4gIHRoaXMuY2x1c3Rlcl8gPSBjbHVzdGVyO1xuICB0aGlzLmNlbnRlcl8gPSBudWxsO1xuICB0aGlzLm1hcF8gPSBjbHVzdGVyLmdldE1hcCgpO1xuICB0aGlzLmRpdl8gPSBudWxsO1xuICB0aGlzLnN1bXNfID0gbnVsbDtcbiAgdGhpcy52aXNpYmxlXyA9IGZhbHNlO1xuXG4gIHRoaXMuc2V0TWFwKHRoaXMubWFwXyk7XG59XG5cblxuLyoqXG4gKiBUcmlnZ2VycyB0aGUgY2x1c3RlcmNsaWNrIGV2ZW50IGFuZCB6b29tJ3MgaWYgdGhlIG9wdGlvbiBpcyBzZXQuXG4gKi9cbkNsdXN0ZXJJY29uLnByb3RvdHlwZS50cmlnZ2VyQ2x1c3RlckNsaWNrID0gZnVuY3Rpb24oKSB7XG4gIHZhciBtYXJrZXJDbHVzdGVyZXIgPSB0aGlzLmNsdXN0ZXJfLmdldE1hcmtlckNsdXN0ZXJlcigpO1xuXG4gIC8vIFRyaWdnZXIgdGhlIGNsdXN0ZXJjbGljayBldmVudC5cbiAgZ29vZ2xlLm1hcHMuZXZlbnQudHJpZ2dlcihtYXJrZXJDbHVzdGVyZXIsICdjbHVzdGVyY2xpY2snLCB0aGlzLmNsdXN0ZXJfKTtcblxuICBpZiAobWFya2VyQ2x1c3RlcmVyLmlzWm9vbU9uQ2xpY2soKSkge1xuICAgIC8vIFpvb20gaW50byB0aGUgY2x1c3Rlci5cbiAgICB0aGlzLm1hcF8uZml0Qm91bmRzKHRoaXMuY2x1c3Rlcl8uZ2V0Qm91bmRzKCkpO1xuICB9XG59O1xuXG5cbi8qKlxuICogQWRkaW5nIHRoZSBjbHVzdGVyIGljb24gdG8gdGhlIGRvbS5cbiAqIEBpZ25vcmVcbiAqL1xuQ2x1c3Rlckljb24ucHJvdG90eXBlLm9uQWRkID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuZGl2XyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ0RJVicpO1xuICBpZiAodGhpcy52aXNpYmxlXykge1xuICAgIHZhciBwb3MgPSB0aGlzLmdldFBvc0Zyb21MYXRMbmdfKHRoaXMuY2VudGVyXyk7XG4gICAgdGhpcy5kaXZfLnN0eWxlLmNzc1RleHQgPSB0aGlzLmNyZWF0ZUNzcyhwb3MpO1xuICAgIHRoaXMuZGl2Xy5pbm5lckhUTUwgPSB0aGlzLnN1bXNfLnRleHQ7XG4gIH1cblxuICB2YXIgcGFuZXMgPSB0aGlzLmdldFBhbmVzKCk7XG4gIHBhbmVzLm92ZXJsYXlNb3VzZVRhcmdldC5hcHBlbmRDaGlsZCh0aGlzLmRpdl8pO1xuXG4gIHZhciB0aGF0ID0gdGhpcztcbiAgZ29vZ2xlLm1hcHMuZXZlbnQuYWRkRG9tTGlzdGVuZXIodGhpcy5kaXZfLCAnY2xpY2snLCBmdW5jdGlvbigpIHtcbiAgICB0aGF0LnRyaWdnZXJDbHVzdGVyQ2xpY2soKTtcbiAgfSk7XG59O1xuXG5cbi8qKlxuICogUmV0dXJucyB0aGUgcG9zaXRpb24gdG8gcGxhY2UgdGhlIGRpdiBkZW5kaW5nIG9uIHRoZSBsYXRsbmcuXG4gKlxuICogQHBhcmFtIHtnb29nbGUubWFwcy5MYXRMbmd9IGxhdGxuZyBUaGUgcG9zaXRpb24gaW4gbGF0bG5nLlxuICogQHJldHVybiB7Z29vZ2xlLm1hcHMuUG9pbnR9IFRoZSBwb3NpdGlvbiBpbiBwaXhlbHMuXG4gKiBAcHJpdmF0ZVxuICovXG5DbHVzdGVySWNvbi5wcm90b3R5cGUuZ2V0UG9zRnJvbUxhdExuZ18gPSBmdW5jdGlvbihsYXRsbmcpIHtcbiAgdmFyIHBvcyA9IHRoaXMuZ2V0UHJvamVjdGlvbigpLmZyb21MYXRMbmdUb0RpdlBpeGVsKGxhdGxuZyk7XG4gIHBvcy54IC09IHBhcnNlSW50KHRoaXMud2lkdGhfIC8gMiwgMTApO1xuICBwb3MueSAtPSBwYXJzZUludCh0aGlzLmhlaWdodF8gLyAyLCAxMCk7XG4gIHJldHVybiBwb3M7XG59O1xuXG5cbi8qKlxuICogRHJhdyB0aGUgaWNvbi5cbiAqIEBpZ25vcmVcbiAqL1xuQ2x1c3Rlckljb24ucHJvdG90eXBlLmRyYXcgPSBmdW5jdGlvbigpIHtcbiAgaWYgKHRoaXMudmlzaWJsZV8pIHtcbiAgICB2YXIgcG9zID0gdGhpcy5nZXRQb3NGcm9tTGF0TG5nXyh0aGlzLmNlbnRlcl8pO1xuICAgIHRoaXMuZGl2Xy5zdHlsZS50b3AgPSBwb3MueSArICdweCc7XG4gICAgdGhpcy5kaXZfLnN0eWxlLmxlZnQgPSBwb3MueCArICdweCc7XG4gIH1cbn07XG5cblxuLyoqXG4gKiBIaWRlIHRoZSBpY29uLlxuICovXG5DbHVzdGVySWNvbi5wcm90b3R5cGUuaGlkZSA9IGZ1bmN0aW9uKCkge1xuICBpZiAodGhpcy5kaXZfKSB7XG4gICAgdGhpcy5kaXZfLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gIH1cbiAgdGhpcy52aXNpYmxlXyA9IGZhbHNlO1xufTtcblxuXG4vKipcbiAqIFBvc2l0aW9uIGFuZCBzaG93IHRoZSBpY29uLlxuICovXG5DbHVzdGVySWNvbi5wcm90b3R5cGUuc2hvdyA9IGZ1bmN0aW9uKCkge1xuICBpZiAodGhpcy5kaXZfKSB7XG4gICAgdmFyIHBvcyA9IHRoaXMuZ2V0UG9zRnJvbUxhdExuZ18odGhpcy5jZW50ZXJfKTtcbiAgICB0aGlzLmRpdl8uc3R5bGUuY3NzVGV4dCA9IHRoaXMuY3JlYXRlQ3NzKHBvcyk7XG4gICAgdGhpcy5kaXZfLnN0eWxlLmRpc3BsYXkgPSAnJztcbiAgfVxuICB0aGlzLnZpc2libGVfID0gdHJ1ZTtcbn07XG5cblxuLyoqXG4gKiBSZW1vdmUgdGhlIGljb24gZnJvbSB0aGUgbWFwXG4gKi9cbkNsdXN0ZXJJY29uLnByb3RvdHlwZS5yZW1vdmUgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5zZXRNYXAobnVsbCk7XG59O1xuXG5cbi8qKlxuICogSW1wbGVtZW50YXRpb24gb2YgdGhlIG9uUmVtb3ZlIGludGVyZmFjZS5cbiAqIEBpZ25vcmVcbiAqL1xuQ2x1c3Rlckljb24ucHJvdG90eXBlLm9uUmVtb3ZlID0gZnVuY3Rpb24oKSB7XG4gIGlmICh0aGlzLmRpdl8gJiYgdGhpcy5kaXZfLnBhcmVudE5vZGUpIHtcbiAgICB0aGlzLmhpZGUoKTtcbiAgICB0aGlzLmRpdl8ucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCh0aGlzLmRpdl8pO1xuICAgIHRoaXMuZGl2XyA9IG51bGw7XG4gIH1cbn07XG5cblxuLyoqXG4gKiBTZXQgdGhlIHN1bXMgb2YgdGhlIGljb24uXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHN1bXMgVGhlIHN1bXMgY29udGFpbmluZzpcbiAqICAgJ3RleHQnOiAoc3RyaW5nKSBUaGUgdGV4dCB0byBkaXNwbGF5IGluIHRoZSBpY29uLlxuICogICAnaW5kZXgnOiAobnVtYmVyKSBUaGUgc3R5bGUgaW5kZXggb2YgdGhlIGljb24uXG4gKi9cbkNsdXN0ZXJJY29uLnByb3RvdHlwZS5zZXRTdW1zID0gZnVuY3Rpb24oc3Vtcykge1xuICB0aGlzLnN1bXNfID0gc3VtcztcbiAgdGhpcy50ZXh0XyA9IHN1bXMudGV4dDtcbiAgdGhpcy5pbmRleF8gPSBzdW1zLmluZGV4O1xuICBpZiAodGhpcy5kaXZfKSB7XG4gICAgdGhpcy5kaXZfLmlubmVySFRNTCA9IHN1bXMudGV4dDtcbiAgfVxuXG4gIHRoaXMudXNlU3R5bGUoKTtcbn07XG5cblxuLyoqXG4gKiBTZXRzIHRoZSBpY29uIHRvIHRoZSB0aGUgc3R5bGVzLlxuICovXG5DbHVzdGVySWNvbi5wcm90b3R5cGUudXNlU3R5bGUgPSBmdW5jdGlvbigpIHtcbiAgdmFyIGluZGV4ID0gTWF0aC5tYXgoMCwgdGhpcy5zdW1zXy5pbmRleCAtIDEpO1xuICBpbmRleCA9IE1hdGgubWluKHRoaXMuc3R5bGVzXy5sZW5ndGggLSAxLCBpbmRleCk7XG4gIHZhciBzdHlsZSA9IHRoaXMuc3R5bGVzX1tpbmRleF07XG4gIHRoaXMudXJsXyA9IHN0eWxlWyd1cmwnXTtcbiAgdGhpcy5oZWlnaHRfID0gc3R5bGVbJ2hlaWdodCddO1xuICB0aGlzLndpZHRoXyA9IHN0eWxlWyd3aWR0aCddO1xuICB0aGlzLnRleHRDb2xvcl8gPSBzdHlsZVsndGV4dENvbG9yJ107XG4gIHRoaXMuYW5jaG9yXyA9IHN0eWxlWydhbmNob3InXTtcbiAgdGhpcy50ZXh0U2l6ZV8gPSBzdHlsZVsndGV4dFNpemUnXTtcbiAgdGhpcy5iYWNrZ3JvdW5kUG9zaXRpb25fID0gc3R5bGVbJ2JhY2tncm91bmRQb3NpdGlvbiddO1xufTtcblxuXG4vKipcbiAqIFNldHMgdGhlIGNlbnRlciBvZiB0aGUgaWNvbi5cbiAqXG4gKiBAcGFyYW0ge2dvb2dsZS5tYXBzLkxhdExuZ30gY2VudGVyIFRoZSBsYXRsbmcgdG8gc2V0IGFzIHRoZSBjZW50ZXIuXG4gKi9cbkNsdXN0ZXJJY29uLnByb3RvdHlwZS5zZXRDZW50ZXIgPSBmdW5jdGlvbihjZW50ZXIpIHtcbiAgdGhpcy5jZW50ZXJfID0gY2VudGVyO1xufTtcblxuXG4vKipcbiAqIENyZWF0ZSB0aGUgY3NzIHRleHQgYmFzZWQgb24gdGhlIHBvc2l0aW9uIG9mIHRoZSBpY29uLlxuICpcbiAqIEBwYXJhbSB7Z29vZ2xlLm1hcHMuUG9pbnR9IHBvcyBUaGUgcG9zaXRpb24uXG4gKiBAcmV0dXJuIHtzdHJpbmd9IFRoZSBjc3Mgc3R5bGUgdGV4dC5cbiAqL1xuQ2x1c3Rlckljb24ucHJvdG90eXBlLmNyZWF0ZUNzcyA9IGZ1bmN0aW9uKHBvcykge1xuICB2YXIgc3R5bGUgPSBbXTtcbiAgc3R5bGUucHVzaCgnYmFja2dyb3VuZC1pbWFnZTp1cmwoJyArIHRoaXMudXJsXyArICcpOycpO1xuICB2YXIgYmFja2dyb3VuZFBvc2l0aW9uID0gdGhpcy5iYWNrZ3JvdW5kUG9zaXRpb25fID8gdGhpcy5iYWNrZ3JvdW5kUG9zaXRpb25fIDogJzAgMCc7XG4gIHN0eWxlLnB1c2goJ2JhY2tncm91bmQtcG9zaXRpb246JyArIGJhY2tncm91bmRQb3NpdGlvbiArICc7Jyk7XG5cbiAgaWYgKHR5cGVvZiB0aGlzLmFuY2hvcl8gPT09ICdvYmplY3QnKSB7XG4gICAgaWYgKHR5cGVvZiB0aGlzLmFuY2hvcl9bMF0gPT09ICdudW1iZXInICYmIHRoaXMuYW5jaG9yX1swXSA+IDAgJiZcbiAgICAgICAgdGhpcy5hbmNob3JfWzBdIDwgdGhpcy5oZWlnaHRfKSB7XG4gICAgICBzdHlsZS5wdXNoKCdoZWlnaHQ6JyArICh0aGlzLmhlaWdodF8gLSB0aGlzLmFuY2hvcl9bMF0pICtcbiAgICAgICAgICAncHg7IHBhZGRpbmctdG9wOicgKyB0aGlzLmFuY2hvcl9bMF0gKyAncHg7Jyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0eWxlLnB1c2goJ2hlaWdodDonICsgdGhpcy5oZWlnaHRfICsgJ3B4OyBsaW5lLWhlaWdodDonICsgdGhpcy5oZWlnaHRfICtcbiAgICAgICAgICAncHg7Jyk7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgdGhpcy5hbmNob3JfWzFdID09PSAnbnVtYmVyJyAmJiB0aGlzLmFuY2hvcl9bMV0gPiAwICYmXG4gICAgICAgIHRoaXMuYW5jaG9yX1sxXSA8IHRoaXMud2lkdGhfKSB7XG4gICAgICBzdHlsZS5wdXNoKCd3aWR0aDonICsgKHRoaXMud2lkdGhfIC0gdGhpcy5hbmNob3JfWzFdKSArXG4gICAgICAgICAgJ3B4OyBwYWRkaW5nLWxlZnQ6JyArIHRoaXMuYW5jaG9yX1sxXSArICdweDsnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3R5bGUucHVzaCgnd2lkdGg6JyArIHRoaXMud2lkdGhfICsgJ3B4OyB0ZXh0LWFsaWduOmNlbnRlcjsnKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgc3R5bGUucHVzaCgnaGVpZ2h0OicgKyB0aGlzLmhlaWdodF8gKyAncHg7IGxpbmUtaGVpZ2h0OicgK1xuICAgICAgICB0aGlzLmhlaWdodF8gKyAncHg7IHdpZHRoOicgKyB0aGlzLndpZHRoXyArICdweDsgdGV4dC1hbGlnbjpjZW50ZXI7Jyk7XG4gIH1cblxuICB2YXIgdHh0Q29sb3IgPSB0aGlzLnRleHRDb2xvcl8gPyB0aGlzLnRleHRDb2xvcl8gOiAnYmxhY2snO1xuICB2YXIgdHh0U2l6ZSA9IHRoaXMudGV4dFNpemVfID8gdGhpcy50ZXh0U2l6ZV8gOiAxMTtcblxuICBzdHlsZS5wdXNoKCdjdXJzb3I6cG9pbnRlcjsgdG9wOicgKyBwb3MueSArICdweDsgbGVmdDonICtcbiAgICAgIHBvcy54ICsgJ3B4OyBjb2xvcjonICsgdHh0Q29sb3IgKyAnOyBwb3NpdGlvbjphYnNvbHV0ZTsgZm9udC1zaXplOicgK1xuICAgICAgdHh0U2l6ZSArICdweDsgZm9udC1mYW1pbHk6QXJpYWwsc2Fucy1zZXJpZjsgZm9udC13ZWlnaHQ6Ym9sZCcpO1xuICByZXR1cm4gc3R5bGUuam9pbignJyk7XG59O1xuIiwiKGZ1bmN0aW9uKHdpbmRvdyl7XG4gIHZhciBMaXN0ID0gKGZ1bmN0aW9uKCl7XG4gICAgZnVuY3Rpb24gTGlzdChwYXJhbXMpe1xuICAgICAgdGhpcy5pdGVtcyA9IFtdO1xuICAgIH07XG4gICAgTGlzdC5wcm90b3R5cGUgPSB7XG4gICAgICBhZGQ6IGZ1bmN0aW9uKGl0ZW0pe1xuICAgICAgICB0aGlzLml0ZW1zLnB1c2goaXRlbSk7XG4gICAgICB9LFxuICAgICAgcmVtb3ZlOiBmdW5jdGlvbihpdGVtKXsgXG4gICAgICAgIHZhciBpbmRleE9mID0gdGhpcy5pdGVtcy5pbmRleE9mKGl0ZW0pO1xuICAgICAgICBpZiAoaW5kZXhPZiAhPT0gLTEpIHtcbiAgICAgICAgICB0aGlzLml0ZW1zLnNwbGljZShpbmRleE9mLCAxKTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIGZpbmQ6IGZ1bmN0aW9uKGNhbGxiYWNrLCBhY3Rpb24pe1xuICAgICAgICB2YXIgY2FsbGJhY2tSZXR1cm4sXG4gICAgICAgICAgICBpdGVtcyA9IHRoaXMuaXRlbXMsXG4gICAgICAgICAgICBsZW5ndGggPSBpdGVtcy5sZW5ndGgsXG4gICAgICAgICAgICBtYXRjaGVzID0gW10sXG4gICAgICAgICAgICBpID0gMDtcbiAgICAgICAgXG4gICAgICAgIGZvcig7IGkgPCBsZW5ndGg7IGkrKyl7XG4gICAgICAgICAgY2FsbGJhY2tSZXR1cm4gPSBjYWxsYmFjayhpdGVtc1tpXSwgaSk7XG4gICAgICAgICAgaWYoY2FsbGJhY2tSZXR1cm4pIHtcbiAgICAgICAgICAgIG1hdGNoZXMucHVzaChpdGVtc1tpXSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGFjdGlvbikge1xuICAgICAgICAgIGFjdGlvbi5jYWxsKHRoaXMsIG1hdGNoZXMpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG1hdGNoZXM7XG4gICAgICB9LFxuICAgIH07XG4gICAgcmV0dXJuIExpc3Q7XG4gIH0oKSk7XG4gIExpc3QuY3JlYXRlID0gZnVuY3Rpb24ocGFyYW1zKSB7XG4gICAgcmV0dXJuIG5ldyBMaXN0KHBhcmFtcyk7XG4gIH1cbiAgd2luZG93Lkxpc3QgPSBMaXN0O1xufSh3aW5kb3cpKTsiLCIoZnVuY3Rpb24od2luZG93LCBnb29nbGUsIExpc3QpIHtcblxuICB2YXIgTWFwc3RlciA9IChmdW5jdGlvbigpIHtcbiAgICBmdW5jdGlvbiBNYXBzdGVyKGVsZW1lbnQsIG9wdHMpIHtcbiAgICAgIHRoaXMuZ01hcCA9IG5ldyBnb29nbGUubWFwcy5NYXAoZWxlbWVudCwgb3B0cyk7XG4gICAgICB0aGlzLm1hcmtlcnMgPSBMaXN0LmNyZWF0ZSgpO1xuICAgICAgaWYgKG9wdHMuY2x1c3Rlcikge1xuICAgICAgICB0aGlzLm1hcmtlckNsdXN0ZXJlciA9IG5ldyBNYXJrZXJDbHVzdGVyZXIodGhpcy5nTWFwLCBbXSwgb3B0cy5jbHVzdGVyLm9wdGlvbnMpO1xuICAgICAgfVxuICAgICAgaWYgKG9wdHMuZ2VvY29kZXIpIHtcbiAgICAgICAgdGhpcy5nZW9jb2RlciA9IG5ldyBnb29nbGUubWFwcy5HZW9jb2RlcigpO1xuICAgICAgfVxuICAgIH1cbiAgICBNYXBzdGVyLnByb3RvdHlwZSA9IHtcbiAgICAgIHpvb206IGZ1bmN0aW9uKGxldmVsKSB7XG4gICAgICAgIGlmKGxldmVsKSB7XG4gICAgICAgICAgdGhpcy5nTWFwLnNldFpvb20obGV2ZWwpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiB0aGlzLmdNYXAuZ2V0Wm9vbSgpO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgY2VudGVyZWRNYXA6IGZ1bmN0aW9uKG9iaikge1xuICAgICAgICB0aGlzLmdNYXAuc2V0Q2VudGVyKG5ldyBnb29nbGUubWFwcy5MYXRMbmcob2JqLmxhdCwgb2JqLmxuZyksIDE1KTtcbiAgICAgIH0sXG4gICAgICBhZGRNYXJrZXI6IGZ1bmN0aW9uKG9wdHMpIHtcbiAgICAgICAgdmFyIG1hcmtlcjtcbiAgICAgICAgdmFyIGluZm9XaWRvdztcbiAgICAgICAgb3B0cy5wb3NpdGlvbiA9IHtcbiAgICAgICAgICBsYXQ6IG9wdHMubGF0LFxuICAgICAgICAgIGxuZzogb3B0cy5sbmdcbiAgICAgICAgfVxuICAgICAgICBtYXJrZXIgPSB0aGlzLl9jcmVhdGVNYXJrZXIob3B0cyk7XG4gICAgICAgIGlmKHRoaXMubWFya2VyQ2x1c3RlcmVyKSB7XG4gICAgICAgICAgdGhpcy5tYXJrZXJDbHVzdGVyZXIuYWRkTWFya2VyKG1hcmtlcik7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5tYXJrZXJzLmFkZChtYXJrZXIpO1xuICAgICAgICBpZiAob3B0cy5ldmVudHMpIHtcbiAgICAgICAgICB0aGlzLl9hdHRhY2hFdmVudHMobWFya2VyLCBvcHRzLmV2ZW50cyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9wdHMuY29udGVudCkge1xuICAgICAgICAgIHRoaXMuX29uKHtcbiAgICAgICAgICAgIG9iajogbWFya2VyLFxuICAgICAgICAgICAgZXZlbnQ6ICdjbGljaycsXG4gICAgICAgICAgICBjYWxsYmFjazogZnVuY3Rpb24oZSkgeyAgICAgICBcbiAgICAgICAgICAgICAgaWYgKCFpbmZvV2lkb3cpe1xuICAgICAgICAgICAgICAgIGluZm9XaWRvdyA9IG5ldyBnb29nbGUubWFwcy5JbmZvV2luZG93KHtcbiAgICAgICAgICAgICAgICAgIGNvbnRlbnQ6IG9wdHMuY29udGVudFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICB9IFxuICAgICAgICAgICAgICBpZighaW5mb1dpZG93LmdldE1hcCgpKXtcbiAgICAgICAgICAgICAgICBpbmZvV2lkb3cub3Blbih0aGlzLmdNYXAsIG1hcmtlcik7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgaW5mb1dpZG93LmNsb3NlKCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbWFya2VyO1xuICAgICAgfSxcbiAgICAgIHNldFBhbm86IGZ1bmN0aW9uKGVsZW1lbnQsIG9wdHMpe1xuICAgICAgICB2YXIgcGFub3JhbWEgPSBuZXcgZ29vZ2xlLm1hcHMuU3RyZWV0Vmlld1Bhbm9yYW1hKGVsZW1lbnQsIG9wdHMpO1xuICAgICAgICB0aGlzLmdNYXAuc2V0U3RyZWV0VmlldyhwYW5vcmFtYSk7XG4gICAgICAgIGlmIChvcHRzLmV2ZW50cykge1xuICAgICAgICAgIHRoaXMuX2F0dGFjaEV2ZW50cyhwYW5vcmFtYSwgb3B0cy5ldmVudHMpO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgZmluZEJ5OiBmdW5jdGlvbihjYWxsYmFjaykge1xuICAgICAgICByZXR1cm4gdGhpcy5tYXJrZXJzLmZpbmQoY2FsbGJhY2spXG4gICAgICB9LFxuICAgICAgcmVtb3ZlQnk6IGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG4gICAgICAgIHZhciBzZWxmID0gdGhpcztcbiAgICAgICAgdGhpcy5tYXJrZXJzLmZpbmQoY2FsbGJhY2ssIGZ1bmN0aW9uKG1hcmtlcnMpIHtcbiAgICAgICAgICBtYXJrZXJzLmZvckVhY2goZnVuY3Rpb24obWFya2VyKXtcbiAgICAgICAgICAgIGlmKHNlbGYubWFya2VyQ2x1c3RlcmVyKXtcbiAgICAgICAgICAgICAgc2VsZi5tYXJrZXJDbHVzdGVyZXIucmVtb3ZlTWFya2VyKG1hcmtlcik7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBtYXJrZXIuc2V0TWFwKG51bGwpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pXG4gICAgICAgIH0pO1xuICAgICAgfSxcbiAgICAgIGdlb2NvZGU6IGZ1bmN0aW9uKG9wdHMpIHtcbiAgICAgICAgdGhpcy5nZW9jb2Rlci5nZW9jb2RlKHtcbiAgICAgICAgICBhZGRyZXNzOiBvcHRzLmFkZHJlc3NcbiAgICAgICAgfSxmdW5jdGlvbihyZXN1bHRzLCBzdGF0dXMpe1xuICAgICAgICAgIGlmIChzdGF0dXMgPT09IGdvb2dsZS5tYXBzLkdlb2NvZGVyU3RhdHVzLk9LKXtcbiAgICAgICAgICAgIG9wdHMuc3VjY2Vzcy5jYWxsKHRoaXMsIHJlc3VsdHMsIHN0YXR1cyk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG9wdHMuZXJyb3IuY2FsbCh0aGlzLCBzdGF0dXMpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9LFxuICAgICAgZ2V0Q3VycmVudFBvc2l0aW9uOiBmdW5jdGlvbihjYWxsYmFjaykge1xuICAgICAgICBpZiAobmF2aWdhdG9yLmdlb2xvY2F0aW9uKSB7XG4gICAgICAgICAgbmF2aWdhdG9yLmdlb2xvY2F0aW9uLmdldEN1cnJlbnRQb3NpdGlvbihmdW5jdGlvbihwb3NpdGlvbil7XG4gICAgICAgICAgICBjYWxsYmFjay5jYWxsKHRoaXMsIHBvc2l0aW9uKTtcbiAgICAgICAgICB9KVxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgX2F0dGFjaEV2ZW50czogZnVuY3Rpb24ob2JqLCBldmVudHMpe1xuICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgICAgIGV2ZW50cy5mb3JFYWNoKGZ1bmN0aW9uKGV2ZW50KXtcbiAgICAgICAgICBzZWxmLl9vbih7XG4gICAgICAgICAgICBvYmo6IG9iaixcbiAgICAgICAgICAgIGV2ZW50OiBldmVudC5uYW1lLFxuICAgICAgICAgICAgY2FsbGJhY2s6IGV2ZW50LmNhbGxiYWNrXG4gICAgICAgICAgfSlcbiAgICAgICAgfSlcbiAgICAgIH0sXG4gICAgICBfb246IGZ1bmN0aW9uKG9wdHMpIHtcbiAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgICAgICBnb29nbGUubWFwcy5ldmVudC5hZGRMaXN0ZW5lcihvcHRzLm9iaiwgb3B0cy5ldmVudCwgZnVuY3Rpb24oZSl7XG4gICAgICAgICAgb3B0cy5jYWxsYmFjay5jYWxsKHNlbGYsIGUsIG9wdHMub2JqKTtcbiAgICAgICAgfSk7XG4gICAgICB9LFxuICAgICAgX2NyZWF0ZU1hcmtlcjogZnVuY3Rpb24ob3B0cykge1xuICAgICAgICBvcHRzLm1hcCA9IHRoaXMuZ01hcDtcbiAgICAgICAgcmV0dXJuIG5ldyBnb29nbGUubWFwcy5NYXJrZXIob3B0cyk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBNYXBzdGVyO1xuICB9KCkpO1xuXG4gIE1hcHN0ZXIuY3JlYXRlID0gZnVuY3Rpb24oZWxlbWVudCwgb3B0cykge1xuICAgIHJldHVybiBuZXcgTWFwc3RlcihlbGVtZW50LCBvcHRzKTtcbiAgfTtcblxuICB3aW5kb3cuTWFwc3RlciA9IE1hcHN0ZXI7XG59KHdpbmRvdywgZ29vZ2xlLCBMaXN0KSk7IiwiKGZ1bmN0aW9uKHdpbmRvdywgZ29vZ2xlLCBtYXBzdGVyKXtcbiAgdmFyIHN0eWxlcyA9IFtcbiAgICB7XG4gICAgICBcImVsZW1lbnRUeXBlXCI6IFwiZ2VvbWV0cnlcIixcbiAgICAgIFwic3R5bGVyc1wiOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBcImNvbG9yXCI6IFwiI2Y1ZjVmNVwiXG4gICAgICAgIH1cbiAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgIFwiZWxlbWVudFR5cGVcIjogXCJsYWJlbHMuaWNvblwiLFxuICAgICAgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAge1xuICAgICAgICAgIFwidmlzaWJpbGl0eVwiOiBcIm9mZlwiXG4gICAgICAgIH1cbiAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgIFwiZWxlbWVudFR5cGVcIjogXCJsYWJlbHMudGV4dC5maWxsXCIsXG4gICAgICBcInN0eWxlcnNcIjogW1xuICAgICAgICB7XG4gICAgICAgICAgXCJjb2xvclwiOiBcIiM2MTYxNjFcIlxuICAgICAgICB9XG4gICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICBcImVsZW1lbnRUeXBlXCI6IFwibGFiZWxzLnRleHQuc3Ryb2tlXCIsXG4gICAgICBcInN0eWxlcnNcIjogW1xuICAgICAgICB7XG4gICAgICAgICAgXCJjb2xvclwiOiBcIiNmNWY1ZjVcIlxuICAgICAgICB9XG4gICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICBcImZlYXR1cmVUeXBlXCI6IFwiYWRtaW5pc3RyYXRpdmUubGFuZF9wYXJjZWxcIixcbiAgICAgIFwiZWxlbWVudFR5cGVcIjogXCJsYWJlbHMudGV4dC5maWxsXCIsXG4gICAgICBcInN0eWxlcnNcIjogW1xuICAgICAgICB7XG4gICAgICAgICAgXCJjb2xvclwiOiBcIiNiZGJkYmRcIlxuICAgICAgICB9XG4gICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICBcImZlYXR1cmVUeXBlXCI6IFwicG9pXCIsXG4gICAgICBcImVsZW1lbnRUeXBlXCI6IFwiZ2VvbWV0cnlcIixcbiAgICAgIFwic3R5bGVyc1wiOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBcImNvbG9yXCI6IFwiI2VlZWVlZVwiXG4gICAgICAgIH1cbiAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgIFwiZmVhdHVyZVR5cGVcIjogXCJwb2lcIixcbiAgICAgIFwiZWxlbWVudFR5cGVcIjogXCJsYWJlbHMudGV4dC5maWxsXCIsXG4gICAgICBcInN0eWxlcnNcIjogW1xuICAgICAgICB7XG4gICAgICAgICAgXCJjb2xvclwiOiBcIiM3NTc1NzVcIlxuICAgICAgICB9XG4gICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICBcImZlYXR1cmVUeXBlXCI6IFwicG9pLnBhcmtcIixcbiAgICAgIFwiZWxlbWVudFR5cGVcIjogXCJnZW9tZXRyeVwiLFxuICAgICAgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAge1xuICAgICAgICAgIFwiY29sb3JcIjogXCIjZTVlNWU1XCJcbiAgICAgICAgfVxuICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgXCJmZWF0dXJlVHlwZVwiOiBcInBvaS5wYXJrXCIsXG4gICAgICBcImVsZW1lbnRUeXBlXCI6IFwibGFiZWxzLnRleHQuZmlsbFwiLFxuICAgICAgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAge1xuICAgICAgICAgIFwiY29sb3JcIjogXCIjOWU5ZTllXCJcbiAgICAgICAgfVxuICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgXCJmZWF0dXJlVHlwZVwiOiBcInJvYWRcIixcbiAgICAgIFwiZWxlbWVudFR5cGVcIjogXCJnZW9tZXRyeVwiLFxuICAgICAgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAge1xuICAgICAgICAgIFwiY29sb3JcIjogXCIjZmZmZmZmXCJcbiAgICAgICAgfVxuICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgXCJmZWF0dXJlVHlwZVwiOiBcInJvYWQuYXJ0ZXJpYWxcIixcbiAgICAgIFwiZWxlbWVudFR5cGVcIjogXCJsYWJlbHMudGV4dC5maWxsXCIsXG4gICAgICBcInN0eWxlcnNcIjogW1xuICAgICAgICB7XG4gICAgICAgICAgXCJjb2xvclwiOiBcIiM3NTc1NzVcIlxuICAgICAgICB9XG4gICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICBcImZlYXR1cmVUeXBlXCI6IFwicm9hZC5oaWdod2F5XCIsXG4gICAgICBcImVsZW1lbnRUeXBlXCI6IFwiZ2VvbWV0cnlcIixcbiAgICAgIFwic3R5bGVyc1wiOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBcImNvbG9yXCI6IFwiI2RhZGFkYVwiXG4gICAgICAgIH1cbiAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgIFwiZmVhdHVyZVR5cGVcIjogXCJyb2FkLmhpZ2h3YXlcIixcbiAgICAgIFwiZWxlbWVudFR5cGVcIjogXCJsYWJlbHMudGV4dC5maWxsXCIsXG4gICAgICBcInN0eWxlcnNcIjogW1xuICAgICAgICB7XG4gICAgICAgICAgXCJjb2xvclwiOiBcIiM2MTYxNjFcIlxuICAgICAgICB9XG4gICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICBcImZlYXR1cmVUeXBlXCI6IFwicm9hZC5sb2NhbFwiLFxuICAgICAgXCJlbGVtZW50VHlwZVwiOiBcImxhYmVscy50ZXh0LmZpbGxcIixcbiAgICAgIFwic3R5bGVyc1wiOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBcImNvbG9yXCI6IFwiIzllOWU5ZVwiXG4gICAgICAgIH1cbiAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgIFwiZmVhdHVyZVR5cGVcIjogXCJ0cmFuc2l0LmxpbmVcIixcbiAgICAgIFwiZWxlbWVudFR5cGVcIjogXCJnZW9tZXRyeVwiLFxuICAgICAgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAge1xuICAgICAgICAgIFwiY29sb3JcIjogXCIjZTVlNWU1XCJcbiAgICAgICAgfVxuICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgXCJmZWF0dXJlVHlwZVwiOiBcInRyYW5zaXQuc3RhdGlvblwiLFxuICAgICAgXCJlbGVtZW50VHlwZVwiOiBcImdlb21ldHJ5XCIsXG4gICAgICBcInN0eWxlcnNcIjogW1xuICAgICAgICB7XG4gICAgICAgICAgXCJjb2xvclwiOiBcIiNlZWVlZWVcIlxuICAgICAgICB9XG4gICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICBcImZlYXR1cmVUeXBlXCI6IFwid2F0ZXJcIixcbiAgICAgIFwiZWxlbWVudFR5cGVcIjogXCJnZW9tZXRyeVwiLFxuICAgICAgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAge1xuICAgICAgICAgIFwiY29sb3JcIjogXCIjYzljOWM5XCJcbiAgICAgICAgfVxuICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgXCJmZWF0dXJlVHlwZVwiOiBcIndhdGVyXCIsXG4gICAgICBcImVsZW1lbnRUeXBlXCI6IFwibGFiZWxzLnRleHQuZmlsbFwiLFxuICAgICAgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAge1xuICAgICAgICAgIFwiY29sb3JcIjogXCIjOWU5ZTllXCJcbiAgICAgICAgfVxuICAgICAgXVxuICAgIH1cbiAgXTtcbiAgbWFwc3Rlci5NQVBfT1BUSU9OUyA9IHtcbiAgICBjZW50ZXI6IHtcbiAgICAgIGxhdDogMzcuNzkxMzUwLFxuICAgICAgbG5nOiAtMTIyLjQzNTg4MyAgXG4gICAgfSxcbiAgICB6b29tOiAxMCxcbiAgICBkaXNhYmxlRGVmYXVsdFVJOiBmYWxzZSxcbiAgICBzY3JvbGx3aGVlbDogdHJ1ZSxcbiAgICBkcmFnZ2FibGU6IHRydWUsXG4gICAgbWFwVHlwZUlkOiBnb29nbGUubWFwcy5NYXBUeXBlSWQuUk9BRE1BUCxcbiAgICAvLyBtYXhab29tOiAxMSxcbiAgICAvLyBtaW5ab29tOiA5LFxuICAgIHpvb21Db250cm9sT3B0aW9uczoge1xuICAgICAgcG9zaXRpb246IGdvb2dsZS5tYXBzLkNvbnRyb2xQb3NpdGlvbi5CT1RUT01fTEVGVCxcbiAgICAgIHN0eWxlOiBnb29nbGUubWFwcy5ab29tQ29udHJvbFN0eWxlLkRFRkFVTFRcbiAgICB9LFxuICAgIHBhbkNvbnRyb2xPcHRpb25zOiB7XG4gICAgICBwb3NpdGlvbjogZ29vZ2xlLm1hcHMuQ29udHJvbFBvc2l0aW9uLkxFRlRfQk9UVE9NXG4gICAgfSxcbiAgICBzdHlsZXM6IHN0eWxlcyxcbiAgICBjbHVzdGVyOiBmYWxzZSxcbiAgICBnZW9jb2RlcjogdHJ1ZVxuICB9XG59KHdpbmRvdywgZ29vZ2xlLCB3aW5kb3cuTWFwc3RlciB8fCAod2luZG93Lk1hcHN0ZXIgPSB7fSkpKTsiLCIoZnVuY3Rpb24od2luZG93LCBnb29nbGUsIE1hcHN0ZXIpe1xuICAkLndpZGdldChcIm1hcHN0ZXIubWFwc3RlclwiLCB7XG4gICAgLy8gZGVmYXVsdCBvcHRpb25zXG4gICAgb3B0aW9uczogeyB9LFxuXG4gICAgLy8gVGhlIGNvbnN0cnVjdG9yXG4gICAgX2NyZWF0ZTogZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgZWxlbWVudCA9IHRoaXMuZWxlbWVudFswXSxcbiAgICAgICAgICBvcHRpb25zID0gdGhpcy5vcHRpb25zO1xuICAgICAgdGhpcy5tYXAgPSBNYXBzdGVyLmNyZWF0ZShlbGVtZW50LCBvcHRpb25zKVxuICAgIH0sXG5cbiAgICAvLyBDYWxsZWQgd2hlbiBjcmVhdGVkLCBhbmQgbGF0ZXIgd2hlbiBjaGFuZ2luZyBvcHRpb25zXG4gICAgX3JlZnJlc2g6IGZ1bmN0aW9uKCkge1xuICAgICAgXG4gICAgfSxcblxuICAgIGFkZE1hcmtlcjogZnVuY3Rpb24oIG9wdGlvbnMgKSB7XG4gICAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgICBpZihvcHRpb25zLmxvY2F0aW9uKSB7XG4gICAgICAgIHRoaXMubWFwLmdlb2NvZGUoe1xuICAgICAgICAgIGFkZHJlc3M6IG9wdGlvbnMubG9jYXRpb24sIC8vJ0dvbGRlbiBHYXRlIEJyaWRnZSwgU2FuIEpyYW5jaXNjbywgQ0EnXG4gICAgICAgICAgc3VjY2VzczogZnVuY3Rpb24ocmVzdWx0cykge1xuICAgICAgICAgICAgcmVzdWx0cy5mb3JFYWNoKGZ1bmN0aW9uKHJlc3VsdCl7XG4gICAgICAgICAgICAgIG9wdGlvbnMubGF0ID0gcmVzdWx0Lmdlb21ldHJ5LmxvY2F0aW9uLmxhdCgpO1xuICAgICAgICAgICAgICBvcHRpb25zLmxuZyA9ICByZXN1bHQuZ2VvbWV0cnkubG9jYXRpb24ubG5nKCk7XG4gICAgICAgICAgICAgIHNlbGYubWFwLmFkZE1hcmtlcihvcHRpb25zKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgZXJyb3I6IGZ1bmN0aW9uKHN0YXR1cykge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihzdGF0dXMpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2UgeyAgXG4gICAgICAgIHRoaXMubWFwLmFkZE1hcmtlcihvcHRpb25zKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIGZpbmRNYXJrZXI6IGZ1bmN0aW9uKGNhbGxiYWNrKXtcbiAgICAgIHJldHVybiB0aGlzLm1hcC5maW5kQnkoY2FsbGJhY2spXG4gICAgfSxcbiAgICByZW1vdmVNYXJrZXI6IGZ1bmN0aW9uKGNhbGxiYWNrKXtcbiAgICAgIHRoaXMubWFwLnJlbW92ZUJ5KGNhbGxiYWNrKTtcbiAgICB9LFxuICAgIGdldE1hcmtlcnM6IGZ1bmN0aW9uKCl7XG4gICAgICByZXR1cm4gdGhpcy5tYXAubWFya2Vycy5pdGVtcztcbiAgICB9LFxuICAgIHNldFBhbm86IGZ1bmN0aW9uKHNlbGVjdG9yLCBvcHRzKXtcbiAgICAgIHZhciBlbGVtZW50cyA9ICQoc2VsZWN0b3IpLFxuICAgICAgICAgIHNlbGYgPSB0aGlzO1xuICAgICAgJC5lYWNoKGVsZW1lbnRzLCBmdW5jdGlvbihrZXksIGVsZW1lbnQpe1xuICAgICAgICBzZWxmLm1hcC5zZXRQYW5vKGVsZW1lbnQsIG9wdHMpO1xuICAgICAgfSlcbiAgICB9LFxuICAgIGdldEN1cnJlbnRQb3NpdGlvbjogZnVuY3Rpb24oY2FsbGJhY2spe1xuICAgICAgdGhpcy5tYXAuZ2V0Q3VycmVudFBvc2l0aW9uKGNhbGxiYWNrKTtcbiAgICB9LFxuICAgIGNlbnRlcmVkTWFwOiBmdW5jdGlvbihvYmope1xuICAgICAgdGhpcy5tYXAuY2VudGVyZWRNYXAob2JqKTtcbiAgICB9LFxuICAgIC8vIEV2ZW50cyBib3VuZCB2aWEgX29uIGFyZSByZW1vdmVkIGF1dG9tYXRpY2FsbHlcbiAgICAvLyByZXZlcnQgb3RoZXIgbW9kaWZpY2F0aW9ucyBoZXJlXG4gICAgX2Rlc3Ryb3k6IGZ1bmN0aW9uKCkge1xuICAgICAgXG4gICAgfSxcblxuICAgIC8vIF9zZXRPcHRpb25zIGlzIGNhbGxlZCB3aXRoIGEgaGFzaCBvZiBhbGwgb3B0aW9ucyB0aGF0IGFyZSBjaGFuZ2luZ1xuICAgIC8vIGFsd2F5cyByZWZyZXNoIHdoZW4gY2hhbmdpbmcgb3B0aW9uc1xuICAgIF9zZXRPcHRpb25zOiBmdW5jdGlvbigpIHtcbiAgICAgIC8vIF9zdXBlciBhbmQgX3N1cGVyQXBwbHkgaGFuZGxlIGtlZXBpbmcgdGhlIHJpZ2h0IHRoaXMtY29udGV4dFxuICAgICAgdGhpcy5fc3VwZXJBcHBseSggYXJndW1lbnRzICk7XG4gICAgICB0aGlzLl9yZWZyZXNoKCk7XG4gICAgfSxcblxuICAgIC8vIF9zZXRPcHRpb24gaXMgY2FsbGVkIGZvciBlYWNoIGluZGl2aWR1YWwgb3B0aW9uIHRoYXQgaXMgY2hhbmdpbmdcbiAgICBfc2V0T3B0aW9uOiBmdW5jdGlvbigga2V5LCB2YWx1ZSApIHtcbiAgICAgIHRoaXMuX3N1cGVyKCBrZXksIHZhbHVlICk7XG4gICAgfVxuICB9KTtcblxufSh3aW5kb3csIGdvb2dsZSwgTWFwc3RlcikpOyIsIihmdW5jdGlvbih3aW5kb3csIGdvb2dsZSwgJCApe1xuICBcbiAgdmFyICRtYXBzdGVyID0gJCgnI21hcC1jYW52YXMnKS5tYXBzdGVyKE1hcHN0ZXIuTUFQX09QVElPTlMpO1xuICAvLyAkbWFwc3Rlci5tYXBzdGVyKCdhZGRNYXJrZXInICwge1xuICAvLyAgIGxhdDogMzcuNzkxMzUwLFxuICAvLyAgIGxuZzogLTEyMi40MzU4ODMsXG4gIC8vICAgZHJhZ2dhYmxlOiB0cnVlLFxuICAvLyAgIGlkOjEsXG4gIC8vICAgZXZlbnRzOiBbXG4gIC8vICAgICB7XG4gIC8vICAgICAgIG5hbWU6ICdjbGljaycsXG4gIC8vICAgICAgIGNhbGxiYWNrOiBmdW5jdGlvbihlLCBtYXJrZXIpe1xuICAvLyAgICAgICAgIGNvbnNvbGUubG9nKGUpO1xuICAvLyAgICAgICAgIGNvbnNvbGUubG9nKG1hcmtlcik7XG4gIC8vICAgICAgICAgY29uc29sZS5sb2codGhpcylcbiAgLy8gICAgICAgfVxuICAvLyAgICAgfSx7XG4gIC8vICAgICAgIG5hbWU6ICdkcmFnZW5kJyxcbiAgLy8gICAgICAgY2FsbGJhY2s6IGZ1bmN0aW9uKCl7XG4gIC8vICAgICAgICAgYWxlcnQoJ2RyYWdnZWQnKTtcbiAgLy8gICAgICAgfVxuICAvLyAgICAgfVxuICAvLyAgIF0sXG4gIC8vICAgaWNvbjogJy4uL2ltZy9pY29ucy9tYXAtcGluLnBuZydcbiAgLy8gfSk7XG4gIC8vICRtYXBzdGVyLm1hcHN0ZXIoJ3NldFBhbm8nLCAnI3BpcC1wYW5vJywge1xuICAvLyAgIHBvc2l0aW9uOiB7XG4gIC8vICAgICBsYXQ6IDM3Ljc5MTM1MCxcbiAgLy8gICAgIGxuZzogLTEyMi40MzU4ODMsXG4gIC8vICAgfSxcbiAgLy8gICBwb3Y6IHtcbiAgLy8gICAgIGhlYWRpbmc6IDIwMCwgLy8gaG9yaXNvbnRhbCBjYW1lcmEgdmlldyBcbiAgLy8gICAgIHBpdGNoOiAwICAvLyB2ZXJ0aWNhbCBjYW1lcmEgdmlld1xuICAvLyAgIH0sXG4gIC8vICAgZXZlbnRzOltcbiAgLy8gICAgIHtcbiAgLy8gICAgICAgbmFtZTogJ3Bvc2l0aW9uX2NoYW5nZWQnLFxuICAvLyAgICAgICBjYWxsYmFjazogZnVuY3Rpb24oKXtcbiAgLy8gICAgICAgICBjb25zb2xlLmxvZygnY2hhbmdlZCBwb3NpdGlvbicpO1xuICAvLyAgICAgICB9XG4gIC8vICAgICB9LFxuICAvLyAgICAge1xuICAvLyAgICAgICBuYW1lOiAncG92X2NoYW5nZWQnLFxuICAvLyAgICAgICBjYWxsYmFjazogZnVuY3Rpb24oKXtcbiAgLy8gICAgICAgICBjb25zb2xlLmxvZygnY2hhbmdlZCBwb3YnKTtcbiAgLy8gICAgICAgfVxuICAvLyAgICAgfSxcbiAgLy8gICAgIHtcbiAgLy8gICAgICAgbmFtZTogJ2xpbmtzX2NoYW5nZWQnLFxuICAvLyAgICAgICBjYWxsYmFjazogZnVuY3Rpb24oZSwgcGFub3JhbWEpe1xuICAvLyAgICAgICAgIGNvbnNvbGUubG9nKHBhbm9yYW1hLmdldExpbmtzKCkpXG4gIC8vICAgICAgIH1cbiAgLy8gICAgIH1cbiAgLy8gICBdXG4gIC8vIH0pO1xuICAvLyAkbWFwc3Rlci5tYXBzdGVyKCdhZGRNYXJrZXInLCB7XG4gIC8vICAgbG9jYXRpb246ICdHb2xkZW4gR2F0ZSBCcmlkZ2UsIFNhbiBKcmFuY2lzY28sIENBJ1xuICAvLyB9KVxuICAkbWFwc3Rlci5tYXBzdGVyKCdnZXRDdXJyZW50UG9zaXRpb24nLCBmdW5jdGlvbihwb3NpdGlvbil7XG4gICAgY29uc29sZS5sb2codGhpcyk7XG4gICAgJG1hcHN0ZXIubWFwc3RlcignYWRkTWFya2VyJywge1xuICAgICAgbGF0OiBwb3NpdGlvbi5jb29yZHMubGF0aXR1ZGUsXG4gICAgICBsbmc6IHBvc2l0aW9uLmNvb3Jkcy5sYXRpdHVkZVxuICAgIH0pO1xuICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKXtcbiAgICAgICRtYXBzdGVyLm1hcHN0ZXIoJ2NlbnRlcmVkTWFwJywge1xuICAgICAgICBsYXQ6IHBvc2l0aW9uLmNvb3Jkcy5sYXRpdHVkZSxcbiAgICAgICAgbG5nOiBwb3NpdGlvbi5jb29yZHMubGF0aXR1ZGVcbiAgICAgIH0pO1xuICAgIH0sMjAwMClcbiAgfSk7XG5cbn0od2luZG93LCBnb29nbGUsIGpRdWVyeSkpOyAiXX0=
