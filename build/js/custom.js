function o(t,e,r){this.extend(o,google.maps.OverlayView),this.map_=t,this.markers_=[],this.clusters_=[],this.sizes=[53,56,66,78,90],this.styles_=[],this.ready_=!1;var s=r||{};this.gridSize_=s.gridSize||60,this.minClusterSize_=s.minimumClusterSize||2,this.maxZoom_=s.maxZoom||null,this.styles_=s.styles||[],this.imagePath_=s.imagePath||this.MARKER_CLUSTER_IMAGE_PATH_,this.imageExtension_=s.imageExtension||this.MARKER_CLUSTER_IMAGE_EXTENSION_,this.zoomOnClick_=!0,null!=s.zoomOnClick&&(this.zoomOnClick_=s.zoomOnClick),this.averageCenter_=!1,null!=s.averageCenter&&(this.averageCenter_=s.averageCenter),this.setupStyles_(),this.setMap(t),this.prevZoom_=this.map_.getZoom();var i=this;google.maps.event.addListener(this.map_,"zoom_changed",function(){var t=i.map_.getZoom(),e=i.map_.minZoom||0,r=Math.min(i.map_.maxZoom||100,i.map_.mapTypes[i.map_.getMapTypeId()].maxZoom);t=Math.min(Math.max(t,e),r),i.prevZoom_!=t&&(i.prevZoom_=t,i.resetViewport())}),google.maps.event.addListener(this.map_,"idle",function(){i.redraw()}),e&&(e.length||Object.keys(e).length)&&this.addMarkers(e,!1)}function a(t){this.markerClusterer_=t,this.map_=t.getMap(),this.gridSize_=t.getGridSize(),this.minClusterSize_=t.getMinClusterSize(),this.averageCenter_=t.isAverageCenter(),this.center_=null,this.markers_=[],this.bounds_=null,this.clusterIcon_=new s(this,t.getStyles(),t.getGridSize())}function s(t,e,r){t.getMarkerClusterer().extend(s,google.maps.OverlayView),this.styles_=e,this.padding_=r||0,this.cluster_=t,this.center_=null,this.map_=t.getMap(),this.div_=null,this.sums_=null,this.visible_=!1,this.setMap(this.map_)}function t(t){this.items=[]}var e,r,i,n,h,l,p,u,c;function _(t,e){this.gMap=new n.maps.Map(t,e),this.markers=h.create(),e.cluster&&(this.markerClusterer=new o(this.gMap,[],e.cluster.options))}o.prototype.MARKER_CLUSTER_IMAGE_PATH_="../images/m",o.prototype.MARKER_CLUSTER_IMAGE_EXTENSION_="png",o.prototype.extend=function(t,e){return function(t){for(var e in t.prototype)this.prototype[e]=t.prototype[e];return this}.apply(t,[e])},o.prototype.onAdd=function(){this.setReady_(!0)},o.prototype.draw=function(){},o.prototype.setupStyles_=function(){if(!this.styles_.length)for(var t,e=0;t=this.sizes[e];e++)this.styles_.push({url:this.imagePath_+(e+1)+"."+this.imageExtension_,height:t,width:t})},o.prototype.fitMapToMarkers=function(){for(var t,e=this.getMarkers(),r=new google.maps.LatLngBounds,s=0;t=e[s];s++)r.extend(t.getPosition());this.map_.fitBounds(r)},o.prototype.setStyles=function(t){this.styles_=t},o.prototype.getStyles=function(){return this.styles_},o.prototype.isZoomOnClick=function(){return this.zoomOnClick_},o.prototype.isAverageCenter=function(){return this.averageCenter_},o.prototype.getMarkers=function(){return this.markers_},o.prototype.getTotalMarkers=function(){return this.markers_.length},o.prototype.setMaxZoom=function(t){this.maxZoom_=t},o.prototype.getMaxZoom=function(){return this.maxZoom_},o.prototype.calculator_=function(t,e){for(var r=0,s=t.length,i=s;0!==i;)i=parseInt(i/10,10),r++;return{text:s,index:r=Math.min(r,e)}},o.prototype.setCalculator=function(t){this.calculator_=t},o.prototype.getCalculator=function(){return this.calculator_},o.prototype.addMarkers=function(t,e){if(t.length)for(var r=0;s=t[r];r++)this.pushMarkerTo_(s);else if(Object.keys(t).length)for(var s in t)this.pushMarkerTo_(t[s]);e||this.redraw()},o.prototype.pushMarkerTo_=function(t){if(t.isAdded=!1,t.draggable){var e=this;google.maps.event.addListener(t,"dragend",function(){t.isAdded=!1,e.repaint()})}this.markers_.push(t)},o.prototype.addMarker=function(t,e){this.pushMarkerTo_(t),e||this.redraw()},o.prototype.removeMarker_=function(t){var e=-1;if(this.markers_.indexOf)e=this.markers_.indexOf(t);else for(var r,s=0;r=this.markers_[s];s++)if(r==t){e=s;break}return-1!=e&&(t.setMap(null),this.markers_.splice(e,1),!0)},o.prototype.removeMarker=function(t,e){var r=this.removeMarker_(t);return!(e||!r)&&(this.resetViewport(),this.redraw(),!0)},o.prototype.removeMarkers=function(t,e){for(var r,s=!1,i=0;r=t[i];i++){var o=this.removeMarker_(r);s=s||o}if(!e&&s)return this.resetViewport(),this.redraw(),!0},o.prototype.setReady_=function(t){this.ready_||(this.ready_=t,this.createClusters_())},o.prototype.getTotalClusters=function(){return this.clusters_.length},o.prototype.getMap=function(){return this.map_},o.prototype.setMap=function(t){this.map_=t},o.prototype.getGridSize=function(){return this.gridSize_},o.prototype.setGridSize=function(t){this.gridSize_=t},o.prototype.getMinClusterSize=function(){return this.minClusterSize_},o.prototype.setMinClusterSize=function(t){this.minClusterSize_=t},o.prototype.getExtendedBounds=function(t){var e=this.getProjection(),r=new google.maps.LatLng(t.getNorthEast().lat(),t.getNorthEast().lng()),s=new google.maps.LatLng(t.getSouthWest().lat(),t.getSouthWest().lng()),i=e.fromLatLngToDivPixel(r);i.x+=this.gridSize_,i.y-=this.gridSize_;var o=e.fromLatLngToDivPixel(s);o.x-=this.gridSize_,o.y+=this.gridSize_;var n=e.fromDivPixelToLatLng(i),a=e.fromDivPixelToLatLng(o);return t.extend(n),t.extend(a),t},o.prototype.isMarkerInBounds_=function(t,e){return e.contains(t.getPosition())},o.prototype.clearMarkers=function(){this.resetViewport(!0),this.markers_=[]},o.prototype.resetViewport=function(t){for(var e,r=0;e=this.clusters_[r];r++)e.remove();var s;for(r=0;s=this.markers_[r];r++)s.isAdded=!1,t&&s.setMap(null);this.clusters_=[]},o.prototype.repaint=function(){var r=this.clusters_.slice();this.clusters_.length=0,this.resetViewport(),this.redraw(),window.setTimeout(function(){for(var t,e=0;t=r[e];e++)t.remove()},0)},o.prototype.redraw=function(){this.createClusters_()},o.prototype.distanceBetweenPoints_=function(t,e){if(!t||!e)return 0;var r=(e.lat()-t.lat())*Math.PI/180,s=(e.lng()-t.lng())*Math.PI/180,i=Math.sin(r/2)*Math.sin(r/2)+Math.cos(t.lat()*Math.PI/180)*Math.cos(e.lat()*Math.PI/180)*Math.sin(s/2)*Math.sin(s/2);return 6371*(2*Math.atan2(Math.sqrt(i),Math.sqrt(1-i)))},o.prototype.addToClosestCluster_=function(t){for(var e,r=4e4,s=null,i=(t.getPosition(),0);e=this.clusters_[i];i++){var o=e.getCenter();if(o){var n=this.distanceBetweenPoints_(o,t.getPosition());n<r&&(r=n,s=e)}}s&&s.isMarkerInClusterBounds(t)?s.addMarker(t):((e=new a(this)).addMarker(t),this.clusters_.push(e))},o.prototype.createClusters_=function(){if(this.ready_)for(var t,e=new google.maps.LatLngBounds(this.map_.getBounds().getSouthWest(),this.map_.getBounds().getNorthEast()),r=this.getExtendedBounds(e),s=0;t=this.markers_[s];s++)!t.isAdded&&this.isMarkerInBounds_(t,r)&&this.addToClosestCluster_(t)},a.prototype.isMarkerAlreadyAdded=function(t){if(this.markers_.indexOf)return-1!=this.markers_.indexOf(t);for(var e,r=0;e=this.markers_[r];r++)if(e==t)return!0;return!1},a.prototype.addMarker=function(t){if(this.isMarkerAlreadyAdded(t))return!1;if(this.center_){if(this.averageCenter_){var e=this.markers_.length+1,r=(this.center_.lat()*(e-1)+t.getPosition().lat())/e,s=(this.center_.lng()*(e-1)+t.getPosition().lng())/e;this.center_=new google.maps.LatLng(r,s),this.calculateBounds_()}}else this.center_=t.getPosition(),this.calculateBounds_();t.isAdded=!0,this.markers_.push(t);var i=this.markers_.length;if(i<this.minClusterSize_&&t.getMap()!=this.map_&&t.setMap(this.map_),i==this.minClusterSize_)for(var o=0;o<i;o++)this.markers_[o].setMap(null);return i>=this.minClusterSize_&&t.setMap(null),this.updateIcon(),!0},a.prototype.getMarkerClusterer=function(){return this.markerClusterer_},a.prototype.getBounds=function(){for(var t,e=new google.maps.LatLngBounds(this.center_,this.center_),r=this.getMarkers(),s=0;t=r[s];s++)e.extend(t.getPosition());return e},a.prototype.remove=function(){this.clusterIcon_.remove(),this.markers_.length=0,delete this.markers_},a.prototype.getSize=function(){return this.markers_.length},a.prototype.getMarkers=function(){return this.markers_},a.prototype.getCenter=function(){return this.center_},a.prototype.calculateBounds_=function(){var t=new google.maps.LatLngBounds(this.center_,this.center_);this.bounds_=this.markerClusterer_.getExtendedBounds(t)},a.prototype.isMarkerInClusterBounds=function(t){return this.bounds_.contains(t.getPosition())},a.prototype.getMap=function(){return this.map_},a.prototype.updateIcon=function(){var t=this.map_.getZoom(),e=this.markerClusterer_.getMaxZoom();if(e&&e<t)for(var r,s=0;r=this.markers_[s];s++)r.setMap(this.map_);else if(this.markers_.length<this.minClusterSize_)this.clusterIcon_.hide();else{var i=this.markerClusterer_.getStyles().length,o=this.markerClusterer_.getCalculator()(this.markers_,i);this.clusterIcon_.setCenter(this.center_),this.clusterIcon_.setSums(o),this.clusterIcon_.show()}},s.prototype.triggerClusterClick=function(){var t=this.cluster_.getMarkerClusterer();google.maps.event.trigger(t,"clusterclick",this.cluster_),t.isZoomOnClick()&&this.map_.fitBounds(this.cluster_.getBounds())},s.prototype.onAdd=function(){if(this.div_=document.createElement("DIV"),this.visible_){var t=this.getPosFromLatLng_(this.center_);this.div_.style.cssText=this.createCss(t),this.div_.innerHTML=this.sums_.text}this.getPanes().overlayMouseTarget.appendChild(this.div_);var e=this;google.maps.event.addDomListener(this.div_,"click",function(){e.triggerClusterClick()})},s.prototype.getPosFromLatLng_=function(t){var e=this.getProjection().fromLatLngToDivPixel(t);return e.x-=parseInt(this.width_/2,10),e.y-=parseInt(this.height_/2,10),e},s.prototype.draw=function(){if(this.visible_){var t=this.getPosFromLatLng_(this.center_);this.div_.style.top=t.y+"px",this.div_.style.left=t.x+"px"}},s.prototype.hide=function(){this.div_&&(this.div_.style.display="none"),this.visible_=!1},s.prototype.show=function(){if(this.div_){var t=this.getPosFromLatLng_(this.center_);this.div_.style.cssText=this.createCss(t),this.div_.style.display=""}this.visible_=!0},s.prototype.remove=function(){this.setMap(null)},s.prototype.onRemove=function(){this.div_&&this.div_.parentNode&&(this.hide(),this.div_.parentNode.removeChild(this.div_),this.div_=null)},s.prototype.setSums=function(t){this.sums_=t,this.text_=t.text,this.index_=t.index,this.div_&&(this.div_.innerHTML=t.text),this.useStyle()},s.prototype.useStyle=function(){var t=Math.max(0,this.sums_.index-1);t=Math.min(this.styles_.length-1,t);var e=this.styles_[t];this.url_=e.url,this.height_=e.height,this.width_=e.width,this.textColor_=e.textColor,this.anchor_=e.anchor,this.textSize_=e.textSize,this.backgroundPosition_=e.backgroundPosition},s.prototype.setCenter=function(t){this.center_=t},s.prototype.createCss=function(t){var e=[];e.push("background-image:url("+this.url_+");");var r=this.backgroundPosition_?this.backgroundPosition_:"0 0";e.push("background-position:"+r+";"),"object"==typeof this.anchor_?("number"==typeof this.anchor_[0]&&0<this.anchor_[0]&&this.anchor_[0]<this.height_?e.push("height:"+(this.height_-this.anchor_[0])+"px; padding-top:"+this.anchor_[0]+"px;"):e.push("height:"+this.height_+"px; line-height:"+this.height_+"px;"),"number"==typeof this.anchor_[1]&&0<this.anchor_[1]&&this.anchor_[1]<this.width_?e.push("width:"+(this.width_-this.anchor_[1])+"px; padding-left:"+this.anchor_[1]+"px;"):e.push("width:"+this.width_+"px; text-align:center;")):e.push("height:"+this.height_+"px; line-height:"+this.height_+"px; width:"+this.width_+"px; text-align:center;");var s=this.textColor_?this.textColor_:"black",i=this.textSize_?this.textSize_:11;return e.push("cursor:pointer; top:"+t.y+"px; left:"+t.x+"px; color:"+s+"; position:absolute; font-size:"+i+"px; font-family:Arial,sans-serif; font-weight:bold"),e.join("")},e=window,t.prototype={add:function(t){this.items.push(t)},remove:function(t){var e=this.items.indexOf(t);-1!==e&&this.items.splice(e,1)},find:function(t,e){for(var r=this.items,s=r.length,i=[],o=0;o<s;o++)t(r[o],o)&&i.push(r[o]);return e&&e.call(this,i),i}},(r=t).create=function(t){return new r(t)},e.List=r,i=window,n=google,h=List,_.prototype={zoom:function(t){if(!t)return this.gMap.getZoom();this.gMap.setZoom(t)},addMarker:function(e){var r,s;return e.position={lat:e.lat,lng:e.lng},r=this._createMarker(e),this.markerClusterer&&this.markerClusterer.addMarker(r),this.markers.add(r),e.events&&this._attachEvents(r,e.events),e.content&&this._on({obj:r,event:"click",callback:function(t){s||(s=new n.maps.InfoWindow({content:e.content})),s.getMap()?s.close():s.open(this.gMap,r)}}),r},setPano:function(t,e){var r=new n.maps.StreetViewPanorama(t,e);this.gMap.setStreetView(r),e.events&&this._attachEvents(r,e.events)},findBy:function(t){return this.markers.find(t)},removeBy:function(t){var e=this;this.markers.find(t,function(t){t.forEach(function(t){e.markerClusterer?e.markerClusterer.removeMarker(t):t.setMap(null)})})},_attachEvents:function(e,t){var r=this;t.forEach(function(t){r._on({obj:e,event:t.name,callback:t.callback})})},_on:function(e){var r=this;n.maps.event.addListener(e.obj,e.event,function(t){e.callback.call(r,t,e.obj)})},_createMarker:function(t){return t.map=this.gMap,new n.maps.Marker(t)}},(l=_).create=function(t,e){return new l(t,e)},i.Mapster=l,window,p=google,(window.Mapster||(window.Mapster={})).MAP_OPTIONS={center:{lat:37.79135,lng:-122.435883},zoom:10,disableDefaultUI:!1,scrollwheel:!0,draggable:!0,mapTypeId:p.maps.MapTypeId.ROADMAP,zoomControlOptions:{position:p.maps.ControlPosition.BOTTOM_LEFT,style:p.maps.ZoomControlStyle.DEFAULT},panControlOptions:{position:p.maps.ControlPosition.LEFT_BOTTOM},styles:[{elementType:"geometry",stylers:[{color:"#f5f5f5"}]},{elementType:"labels.icon",stylers:[{visibility:"off"}]},{elementType:"labels.text.fill",stylers:[{color:"#616161"}]},{elementType:"labels.text.stroke",stylers:[{color:"#f5f5f5"}]},{featureType:"administrative.land_parcel",elementType:"labels.text.fill",stylers:[{color:"#bdbdbd"}]},{featureType:"poi",elementType:"geometry",stylers:[{color:"#eeeeee"}]},{featureType:"poi",elementType:"labels.text.fill",stylers:[{color:"#757575"}]},{featureType:"poi.park",elementType:"geometry",stylers:[{color:"#e5e5e5"}]},{featureType:"poi.park",elementType:"labels.text.fill",stylers:[{color:"#9e9e9e"}]},{featureType:"road",elementType:"geometry",stylers:[{color:"#ffffff"}]},{featureType:"road.arterial",elementType:"labels.text.fill",stylers:[{color:"#757575"}]},{featureType:"road.highway",elementType:"geometry",stylers:[{color:"#dadada"}]},{featureType:"road.highway",elementType:"labels.text.fill",stylers:[{color:"#616161"}]},{featureType:"road.local",elementType:"labels.text.fill",stylers:[{color:"#9e9e9e"}]},{featureType:"transit.line",elementType:"geometry",stylers:[{color:"#e5e5e5"}]},{featureType:"transit.station",elementType:"geometry",stylers:[{color:"#eeeeee"}]},{featureType:"water",elementType:"geometry",stylers:[{color:"#c9c9c9"}]},{featureType:"water",elementType:"labels.text.fill",stylers:[{color:"#9e9e9e"}]}],cluster:!1},window,google,u=Mapster,$.widget("mapster.mapster",{options:{},_create:function(){var t=this.element[0],e=this.options;this.map=u.create(t,e)},_refresh:function(){},addMarker:function(t){return this.map.addMarker(t)},findMarker:function(t){return this.map.findBy(t)},removeMarker:function(t){this.map.removeBy(t)},getMarkers:function(){return this.map.markers.items},setPano:function(t,r){var e=$(t),s=this;$.each(e,function(t,e){s.map.setPano(e,r)})},_destroy:function(){},_setOptions:function(){this._superApply(arguments),this._refresh()},_setOption:function(t,e){this._super(t,e)}}),window,(c=jQuery("#map-canvas").mapster(Mapster.MAP_OPTIONS)).mapster("addMarker",{lat:37.79135,lng:-122.435883,draggable:!0,id:1,events:[{name:"click",callback:function(t,e){console.log(t),console.log(e),console.log(this)}},{name:"dragend",callback:function(){alert("dragged")}}],icon:"../img/icons/map-pin.png"}),c.mapster("setPano","#pip-pano",{position:{lat:37.79135,lng:-122.435883},pov:{heading:200,pitch:0},events:[{name:"position_changed",callback:function(){console.log("changed position")}},{name:"pov_changed",callback:function(){console.log("changed pov")}},{name:"links_changed",callback:function(t,e){console.log(e.getLinks())}}]}),console.log(c.mapster("getMarkers"));
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1hcmtlcmNsdXN0ZXJlci5qcyIsIkxpc3QuanMiLCJNYXBzdGVyLmpzIiwibWFwLW9wdGlvbnMuanMiLCJqcXVlcnl1aS5tYXBzdGVyLmpzIiwibWFpbi5qcyJdLCJuYW1lcyI6WyJNYXJrZXJDbHVzdGVyZXIiLCJtYXAiLCJvcHRfbWFya2VycyIsIm9wdF9vcHRpb25zIiwidGhpcyIsImV4dGVuZCIsImdvb2dsZSIsIm1hcHMiLCJPdmVybGF5VmlldyIsIm1hcF8iLCJtYXJrZXJzXyIsImNsdXN0ZXJzXyIsInNpemVzIiwic3R5bGVzXyIsInJlYWR5XyIsIm9wdGlvbnMiLCJncmlkU2l6ZV8iLCJtaW5DbHVzdGVyU2l6ZV8iLCJtYXhab29tXyIsImltYWdlUGF0aF8iLCJNQVJLRVJfQ0xVU1RFUl9JTUFHRV9QQVRIXyIsImltYWdlRXh0ZW5zaW9uXyIsIk1BUktFUl9DTFVTVEVSX0lNQUdFX0VYVEVOU0lPTl8iLCJ6b29tT25DbGlja18iLCJ1bmRlZmluZWQiLCJhdmVyYWdlQ2VudGVyXyIsInNldHVwU3R5bGVzXyIsInNldE1hcCIsInByZXZab29tXyIsImdldFpvb20iLCJ0aGF0IiwiZXZlbnQiLCJhZGRMaXN0ZW5lciIsInpvb20iLCJtaW5ab29tIiwibWF4Wm9vbSIsIk1hdGgiLCJtaW4iLCJtYXBUeXBlcyIsImdldE1hcFR5cGVJZCIsIm1heCIsInJlc2V0Vmlld3BvcnQiLCJyZWRyYXciLCJsZW5ndGgiLCJPYmplY3QiLCJrZXlzIiwiYWRkTWFya2VycyIsIkNsdXN0ZXIiLCJtYXJrZXJDbHVzdGVyZXIiLCJtYXJrZXJDbHVzdGVyZXJfIiwiZ2V0TWFwIiwiZ2V0R3JpZFNpemUiLCJnZXRNaW5DbHVzdGVyU2l6ZSIsImlzQXZlcmFnZUNlbnRlciIsImNlbnRlcl8iLCJib3VuZHNfIiwiY2x1c3Rlckljb25fIiwiQ2x1c3Rlckljb24iLCJnZXRTdHlsZXMiLCJjbHVzdGVyIiwic3R5bGVzIiwib3B0X3BhZGRpbmciLCJnZXRNYXJrZXJDbHVzdGVyZXIiLCJwYWRkaW5nXyIsImNsdXN0ZXJfIiwiZGl2XyIsInN1bXNfIiwidmlzaWJsZV8iLCJMaXN0IiwicGFyYW1zIiwiaXRlbXMiLCJ3aW5kb3ciLCJNYXBzdGVyIiwiJG1hcHN0ZXIiLCJlbGVtZW50Iiwib3B0cyIsImdNYXAiLCJNYXAiLCJtYXJrZXJzIiwiY3JlYXRlIiwicHJvdG90eXBlIiwib2JqMSIsIm9iajIiLCJvYmplY3QiLCJwcm9wZXJ0eSIsImFwcGx5Iiwib25BZGQiLCJzZXRSZWFkeV8iLCJkcmF3Iiwic2l6ZSIsImkiLCJwdXNoIiwidXJsIiwiaGVpZ2h0Iiwid2lkdGgiLCJmaXRNYXBUb01hcmtlcnMiLCJtYXJrZXIiLCJnZXRNYXJrZXJzIiwiYm91bmRzIiwiTGF0TG5nQm91bmRzIiwiZ2V0UG9zaXRpb24iLCJmaXRCb3VuZHMiLCJzZXRTdHlsZXMiLCJpc1pvb21PbkNsaWNrIiwiZ2V0VG90YWxNYXJrZXJzIiwic2V0TWF4Wm9vbSIsImdldE1heFpvb20iLCJjYWxjdWxhdG9yXyIsIm51bVN0eWxlcyIsImluZGV4IiwiY291bnQiLCJkdiIsInBhcnNlSW50IiwidGV4dCIsInNldENhbGN1bGF0b3IiLCJjYWxjdWxhdG9yIiwiZ2V0Q2FsY3VsYXRvciIsIm9wdF9ub2RyYXciLCJwdXNoTWFya2VyVG9fIiwiaXNBZGRlZCIsInJlcGFpbnQiLCJhZGRNYXJrZXIiLCJyZW1vdmVNYXJrZXJfIiwiaW5kZXhPZiIsIm0iLCJzcGxpY2UiLCJyZW1vdmVNYXJrZXIiLCJyZW1vdmVkIiwicmVtb3ZlTWFya2VycyIsInIiLCJyZWFkeSIsImNyZWF0ZUNsdXN0ZXJzXyIsImdldFRvdGFsQ2x1c3RlcnMiLCJzZXRHcmlkU2l6ZSIsInNldE1pbkNsdXN0ZXJTaXplIiwiZ2V0RXh0ZW5kZWRCb3VuZHMiLCJwcm9qZWN0aW9uIiwiZ2V0UHJvamVjdGlvbiIsInRyIiwiTGF0TG5nIiwiZ2V0Tm9ydGhFYXN0IiwibGF0IiwibG5nIiwiYmwiLCJnZXRTb3V0aFdlc3QiLCJ0clBpeCIsImZyb21MYXRMbmdUb0RpdlBpeGVsIiwieCIsInkiLCJibFBpeCIsIm5lIiwiZnJvbURpdlBpeGVsVG9MYXRMbmciLCJzdyIsImlzTWFya2VySW5Cb3VuZHNfIiwiY29udGFpbnMiLCJjbGVhck1hcmtlcnMiLCJvcHRfaGlkZSIsInJlbW92ZSIsIm9sZENsdXN0ZXJzIiwic2xpY2UiLCJzZXRUaW1lb3V0IiwiZGlzdGFuY2VCZXR3ZWVuUG9pbnRzXyIsInAxIiwicDIiLCJkTGF0IiwiUEkiLCJkTG9uIiwiYSIsInNpbiIsImNvcyIsImF0YW4yIiwic3FydCIsImFkZFRvQ2xvc2VzdENsdXN0ZXJfIiwiZGlzdGFuY2UiLCJjbHVzdGVyVG9BZGRUbyIsImNlbnRlciIsImdldENlbnRlciIsImQiLCJpc01hcmtlckluQ2x1c3RlckJvdW5kcyIsIm1hcEJvdW5kcyIsImdldEJvdW5kcyIsImlzTWFya2VyQWxyZWFkeUFkZGVkIiwibCIsImNhbGN1bGF0ZUJvdW5kc18iLCJsZW4iLCJ1cGRhdGVJY29uIiwiZ2V0U2l6ZSIsIm16IiwiaGlkZSIsInN1bXMiLCJzZXRDZW50ZXIiLCJzZXRTdW1zIiwic2hvdyIsInRyaWdnZXJDbHVzdGVyQ2xpY2siLCJ0cmlnZ2VyIiwiZG9jdW1lbnQiLCJjcmVhdGVFbGVtZW50IiwicG9zIiwiZ2V0UG9zRnJvbUxhdExuZ18iLCJzdHlsZSIsImNzc1RleHQiLCJjcmVhdGVDc3MiLCJpbm5lckhUTUwiLCJnZXRQYW5lcyIsIm92ZXJsYXlNb3VzZVRhcmdldCIsImFwcGVuZENoaWxkIiwiYWRkRG9tTGlzdGVuZXIiLCJsYXRsbmciLCJ3aWR0aF8iLCJoZWlnaHRfIiwidG9wIiwibGVmdCIsImRpc3BsYXkiLCJvblJlbW92ZSIsInBhcmVudE5vZGUiLCJyZW1vdmVDaGlsZCIsInRleHRfIiwiaW5kZXhfIiwidXNlU3R5bGUiLCJ1cmxfIiwidGV4dENvbG9yXyIsImFuY2hvcl8iLCJ0ZXh0U2l6ZV8iLCJiYWNrZ3JvdW5kUG9zaXRpb25fIiwiYmFja2dyb3VuZFBvc2l0aW9uIiwidHh0Q29sb3IiLCJ0eHRTaXplIiwiam9pbiIsImFkZCIsIml0ZW0iLCJmaW5kIiwiY2FsbGJhY2siLCJhY3Rpb24iLCJtYXRjaGVzIiwiY2FsbCIsImxldmVsIiwic2V0Wm9vbSIsImluZm9XaWRvdyIsInBvc2l0aW9uIiwiX2NyZWF0ZU1hcmtlciIsImV2ZW50cyIsIl9hdHRhY2hFdmVudHMiLCJjb250ZW50IiwiX29uIiwib2JqIiwiZSIsIkluZm9XaW5kb3ciLCJjbG9zZSIsIm9wZW4iLCJzZXRQYW5vIiwicGFub3JhbWEiLCJTdHJlZXRWaWV3UGFub3JhbWEiLCJzZXRTdHJlZXRWaWV3IiwiZmluZEJ5IiwicmVtb3ZlQnkiLCJzZWxmIiwiZm9yRWFjaCIsIm5hbWUiLCJNYXJrZXIiLCJNQVBfT1BUSU9OUyIsImRpc2FibGVEZWZhdWx0VUkiLCJzY3JvbGx3aGVlbCIsImRyYWdnYWJsZSIsIm1hcFR5cGVJZCIsIk1hcFR5cGVJZCIsIlJPQURNQVAiLCJ6b29tQ29udHJvbE9wdGlvbnMiLCJDb250cm9sUG9zaXRpb24iLCJCT1RUT01fTEVGVCIsIlpvb21Db250cm9sU3R5bGUiLCJERUZBVUxUIiwicGFuQ29udHJvbE9wdGlvbnMiLCJMRUZUX0JPVFRPTSIsImVsZW1lbnRUeXBlIiwic3R5bGVycyIsImNvbG9yIiwidmlzaWJpbGl0eSIsImZlYXR1cmVUeXBlIiwiJCIsIndpZGdldCIsIl9jcmVhdGUiLCJfcmVmcmVzaCIsImZpbmRNYXJrZXIiLCJzZWxlY3RvciIsImVsZW1lbnRzIiwiZWFjaCIsImtleSIsIl9kZXN0cm95IiwiX3NldE9wdGlvbnMiLCJfc3VwZXJBcHBseSIsImFyZ3VtZW50cyIsIl9zZXRPcHRpb24iLCJ2YWx1ZSIsIl9zdXBlciIsImpRdWVyeSIsIm1hcHN0ZXIiLCJpZCIsImNvbnNvbGUiLCJsb2ciLCJhbGVydCIsImljb24iLCJwb3YiLCJoZWFkaW5nIiwicGl0Y2giLCJnZXRMaW5rcyJdLCJtYXBwaW5ncyI6IkFBd0RBLFNBQUFBLEVBQUFDLEVBQUFDLEVBQUFDLEdBTUFDLEtBQUFDLE9B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aU4sRUFBQU4sRUFBQUssR0FDQTVCLEVBQUEzUCxLQUNBa1IsRUFBQU8sS0FBQUQsRUFBQSxTQUFBRSxFQUFBcE4sR0FDQXFMLEVBQUE5UCxJQUFBd1AsUUFBQS9LLEVBQUFDLE1BS0FvTixTQUFBLGFBTUFDLFlBQUEsV0FFQTVSLEtBQUE2UixZQUFBQyxXQUNBOVIsS0FBQXFSLFlBSUFVLFdBQUEsU0FBQUwsRUFBQU0sR0FDQWhTLEtBQUFpUyxPQUFBUCxFQUFBTSxNQ0lBN04sUUF0REFFLEVBc0RBNk4sT0F0REEsZUFBQUMsUUFBQS9OLFFBQUEyTCxjQUNBb0MsUUFBQSxZQUFBLENBQ0ExSixJQUFBLFNBQ0FDLEtBQUEsV0FDQXdILFdBQUEsRUFDQWtDLEdBQUEsRUFDQXhELE9BQUEsQ0FDQSxDQUNBaUIsS0FBQSxRQUNBMUIsU0FBQSxTQUFBYyxFQUFBckosR0FDQXlNLFFBQUFDLElBQUFyRCxHQUNBb0QsUUFBQUMsSUFBQTFNLEdBQ0F5TSxRQUFBQyxJQUFBdFMsUUFFQSxDQUNBNlAsS0FBQSxVQUNBMUIsU0FBQSxXQUNBb0UsTUFBQSxjQUlBQyxLQUFBLDZCQUVBbk8sRUFBQThOLFFBQUEsVUFBQSxZQUFBLENBQ0F6RCxTQUFBLENBQ0FqRyxJQUFBLFNBQ0FDLEtBQUEsWUFFQStKLElBQUEsQ0FDQUMsUUFBQSxJQUNBQyxNQUFBLEdBRUEvRCxPQUFBLENBQ0EsQ0FDQWlCLEtBQUEsbUJBQ0ExQixTQUFBLFdBQ0FrRSxRQUFBQyxJQUFBLHNCQUdBLENBQ0F6QyxLQUFBLGNBQ0ExQixTQUFBLFdBQ0FrRSxRQUFBQyxJQUFBLGlCQUdBLENBQ0F6QyxLQUFBLGdCQUNBMUIsU0FBQSxTQUFBYyxFQUFBSyxHQUNBK0MsUUFBQUMsSUFBQWhELEVBQUFzRCxpQkFLQVAsUUFBQUMsSUFBQWpPLEVBQUE4TixRQUFBIiwiZmlsZSI6ImN1c3RvbS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQG5hbWUgTWFya2VyQ2x1c3RlcmVyIGZvciBHb29nbGUgTWFwcyB2M1xuICogQHZlcnNpb24gdmVyc2lvbiAxLjAuMVxuICogQGF1dGhvciBMdWtlIE1haGVcbiAqIEBmaWxlb3ZlcnZpZXdcbiAqIFRoZSBsaWJyYXJ5IGNyZWF0ZXMgYW5kIG1hbmFnZXMgcGVyLXpvb20tbGV2ZWwgY2x1c3RlcnMgZm9yIGxhcmdlIGFtb3VudHMgb2ZcbiAqIG1hcmtlcnMuXG4gKiA8YnIvPlxuICogVGhpcyBpcyBhIHYzIGltcGxlbWVudGF0aW9uIG9mIHRoZVxuICogPGEgaHJlZj1cImh0dHA6Ly9nbWFwcy11dGlsaXR5LWxpYnJhcnktZGV2Lmdvb2dsZWNvZGUuY29tL3N2bi90YWdzL21hcmtlcmNsdXN0ZXJlci9cIlxuICogPnYyIE1hcmtlckNsdXN0ZXJlcjwvYT4uXG4gKi9cblxuLyoqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuXG4vKipcbiAqIEEgTWFya2VyIENsdXN0ZXJlciB0aGF0IGNsdXN0ZXJzIG1hcmtlcnMuXG4gKlxuICogQHBhcmFtIHtnb29nbGUubWFwcy5NYXB9IG1hcCBUaGUgR29vZ2xlIG1hcCB0byBhdHRhY2ggdG8uXG4gKiBAcGFyYW0ge0FycmF5Ljxnb29nbGUubWFwcy5NYXJrZXI+PX0gb3B0X21hcmtlcnMgT3B0aW9uYWwgbWFya2VycyB0byBhZGQgdG9cbiAqICAgdGhlIGNsdXN0ZXIuXG4gKiBAcGFyYW0ge09iamVjdD19IG9wdF9vcHRpb25zIHN1cHBvcnQgdGhlIGZvbGxvd2luZyBvcHRpb25zOlxuICogICAgICdncmlkU2l6ZSc6IChudW1iZXIpIFRoZSBncmlkIHNpemUgb2YgYSBjbHVzdGVyIGluIHBpeGVscy5cbiAqICAgICAnbWF4Wm9vbSc6IChudW1iZXIpIFRoZSBtYXhpbXVtIHpvb20gbGV2ZWwgdGhhdCBhIG1hcmtlciBjYW4gYmUgcGFydCBvZiBhXG4gKiAgICAgICAgICAgICAgICBjbHVzdGVyLlxuICogICAgICd6b29tT25DbGljayc6IChib29sZWFuKSBXaGV0aGVyIHRoZSBkZWZhdWx0IGJlaGF2aW91ciBvZiBjbGlja2luZyBvbiBhXG4gKiAgICAgICAgICAgICAgICAgICAgY2x1c3RlciBpcyB0byB6b29tIGludG8gaXQuXG4gKiAgICAgJ2F2ZXJhZ2VDZW50ZXInOiAoYm9vbGVhbikgV2hldGhlciB0aGUgY2VudGVyIG9mIGVhY2ggY2x1c3RlciBzaG91bGQgYmVcbiAqICAgICAgICAgICAgICAgICAgICAgIHRoZSBhdmVyYWdlIG9mIGFsbCBtYXJrZXJzIGluIHRoZSBjbHVzdGVyLlxuICogICAgICdtaW5pbXVtQ2x1c3RlclNpemUnOiAobnVtYmVyKSBUaGUgbWluaW11bSBudW1iZXIgb2YgbWFya2VycyB0byBiZSBpbiBhXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsdXN0ZXIgYmVmb3JlIHRoZSBtYXJrZXJzIGFyZSBoaWRkZW4gYW5kIGEgY291bnRcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgaXMgc2hvd24uXG4gKiAgICAgJ3N0eWxlcyc6IChvYmplY3QpIEFuIG9iamVjdCB0aGF0IGhhcyBzdHlsZSBwcm9wZXJ0aWVzOlxuICogICAgICAgJ3VybCc6IChzdHJpbmcpIFRoZSBpbWFnZSB1cmwuXG4gKiAgICAgICAnaGVpZ2h0JzogKG51bWJlcikgVGhlIGltYWdlIGhlaWdodC5cbiAqICAgICAgICd3aWR0aCc6IChudW1iZXIpIFRoZSBpbWFnZSB3aWR0aC5cbiAqICAgICAgICdhbmNob3InOiAoQXJyYXkpIFRoZSBhbmNob3IgcG9zaXRpb24gb2YgdGhlIGxhYmVsIHRleHQuXG4gKiAgICAgICAndGV4dENvbG9yJzogKHN0cmluZykgVGhlIHRleHQgY29sb3IuXG4gKiAgICAgICAndGV4dFNpemUnOiAobnVtYmVyKSBUaGUgdGV4dCBzaXplLlxuICogICAgICAgJ2JhY2tncm91bmRQb3NpdGlvbic6IChzdHJpbmcpIFRoZSBwb3NpdGlvbiBvZiB0aGUgYmFja2dvdW5kIHgsIHkuXG4gKiBAY29uc3RydWN0b3JcbiAqIEBleHRlbmRzIGdvb2dsZS5tYXBzLk92ZXJsYXlWaWV3XG4gKi9cbmZ1bmN0aW9uIE1hcmtlckNsdXN0ZXJlcihtYXAsIG9wdF9tYXJrZXJzLCBvcHRfb3B0aW9ucykge1xuICAvLyBNYXJrZXJDbHVzdGVyZXIgaW1wbGVtZW50cyBnb29nbGUubWFwcy5PdmVybGF5VmlldyBpbnRlcmZhY2UuIFdlIHVzZSB0aGVcbiAgLy8gZXh0ZW5kIGZ1bmN0aW9uIHRvIGV4dGVuZCBNYXJrZXJDbHVzdGVyZXIgd2l0aCBnb29nbGUubWFwcy5PdmVybGF5Vmlld1xuICAvLyBiZWNhdXNlIGl0IG1pZ2h0IG5vdCBhbHdheXMgYmUgYXZhaWxhYmxlIHdoZW4gdGhlIGNvZGUgaXMgZGVmaW5lZCBzbyB3ZVxuICAvLyBsb29rIGZvciBpdCBhdCB0aGUgbGFzdCBwb3NzaWJsZSBtb21lbnQuIElmIGl0IGRvZXNuJ3QgZXhpc3Qgbm93IHRoZW5cbiAgLy8gdGhlcmUgaXMgbm8gcG9pbnQgZ29pbmcgYWhlYWQgOilcbiAgdGhpcy5leHRlbmQoTWFya2VyQ2x1c3RlcmVyLCBnb29nbGUubWFwcy5PdmVybGF5Vmlldyk7XG4gIHRoaXMubWFwXyA9IG1hcDtcblxuICAvKipcbiAgICogQHR5cGUge0FycmF5Ljxnb29nbGUubWFwcy5NYXJrZXI+fVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgdGhpcy5tYXJrZXJzXyA9IFtdO1xuXG4gIC8qKlxuICAgKiAgQHR5cGUge0FycmF5LjxDbHVzdGVyPn1cbiAgICovXG4gIHRoaXMuY2x1c3RlcnNfID0gW107XG5cbiAgdGhpcy5zaXplcyA9IFs1MywgNTYsIDY2LCA3OCwgOTBdO1xuXG4gIC8qKlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgdGhpcy5zdHlsZXNfID0gW107XG5cbiAgLyoqXG4gICAqIEB0eXBlIHtib29sZWFufVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgdGhpcy5yZWFkeV8gPSBmYWxzZTtcblxuICB2YXIgb3B0aW9ucyA9IG9wdF9vcHRpb25zIHx8IHt9O1xuXG4gIC8qKlxuICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgdGhpcy5ncmlkU2l6ZV8gPSBvcHRpb25zWydncmlkU2l6ZSddIHx8IDYwO1xuXG4gIC8qKlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgdGhpcy5taW5DbHVzdGVyU2l6ZV8gPSBvcHRpb25zWydtaW5pbXVtQ2x1c3RlclNpemUnXSB8fCAyO1xuXG5cbiAgLyoqXG4gICAqIEB0eXBlIHs/bnVtYmVyfVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgdGhpcy5tYXhab29tXyA9IG9wdGlvbnNbJ21heFpvb20nXSB8fCBudWxsO1xuXG4gIHRoaXMuc3R5bGVzXyA9IG9wdGlvbnNbJ3N0eWxlcyddIHx8IFtdO1xuXG4gIC8qKlxuICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgdGhpcy5pbWFnZVBhdGhfID0gb3B0aW9uc1snaW1hZ2VQYXRoJ10gfHxcbiAgICAgIHRoaXMuTUFSS0VSX0NMVVNURVJfSU1BR0VfUEFUSF87XG5cbiAgLyoqXG4gICAqIEB0eXBlIHtzdHJpbmd9XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICB0aGlzLmltYWdlRXh0ZW5zaW9uXyA9IG9wdGlvbnNbJ2ltYWdlRXh0ZW5zaW9uJ10gfHxcbiAgICAgIHRoaXMuTUFSS0VSX0NMVVNURVJfSU1BR0VfRVhURU5TSU9OXztcblxuICAvKipcbiAgICogQHR5cGUge2Jvb2xlYW59XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICB0aGlzLnpvb21PbkNsaWNrXyA9IHRydWU7XG5cbiAgaWYgKG9wdGlvbnNbJ3pvb21PbkNsaWNrJ10gIT0gdW5kZWZpbmVkKSB7XG4gICAgdGhpcy56b29tT25DbGlja18gPSBvcHRpb25zWyd6b29tT25DbGljayddO1xuICB9XG5cbiAgLyoqXG4gICAqIEB0eXBlIHtib29sZWFufVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgdGhpcy5hdmVyYWdlQ2VudGVyXyA9IGZhbHNlO1xuXG4gIGlmIChvcHRpb25zWydhdmVyYWdlQ2VudGVyJ10gIT0gdW5kZWZpbmVkKSB7XG4gICAgdGhpcy5hdmVyYWdlQ2VudGVyXyA9IG9wdGlvbnNbJ2F2ZXJhZ2VDZW50ZXInXTtcbiAgfVxuXG4gIHRoaXMuc2V0dXBTdHlsZXNfKCk7XG5cbiAgdGhpcy5zZXRNYXAobWFwKTtcblxuICAvKipcbiAgICogQHR5cGUge251bWJlcn1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIHRoaXMucHJldlpvb21fID0gdGhpcy5tYXBfLmdldFpvb20oKTtcblxuICAvLyBBZGQgdGhlIG1hcCBldmVudCBsaXN0ZW5lcnNcbiAgdmFyIHRoYXQgPSB0aGlzO1xuICBnb29nbGUubWFwcy5ldmVudC5hZGRMaXN0ZW5lcih0aGlzLm1hcF8sICd6b29tX2NoYW5nZWQnLCBmdW5jdGlvbigpIHtcbiAgICAvLyBEZXRlcm1pbmVzIG1hcCB0eXBlIGFuZCBwcmV2ZW50IGlsbGVnYWwgem9vbSBsZXZlbHNcbiAgICB2YXIgem9vbSA9IHRoYXQubWFwXy5nZXRab29tKCk7XG4gICAgdmFyIG1pblpvb20gPSB0aGF0Lm1hcF8ubWluWm9vbSB8fCAwO1xuICAgIHZhciBtYXhab29tID0gTWF0aC5taW4odGhhdC5tYXBfLm1heFpvb20gfHwgMTAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgIHRoYXQubWFwXy5tYXBUeXBlc1t0aGF0Lm1hcF8uZ2V0TWFwVHlwZUlkKCldLm1heFpvb20pO1xuICAgIHpvb20gPSBNYXRoLm1pbihNYXRoLm1heCh6b29tLG1pblpvb20pLG1heFpvb20pO1xuXG4gICAgaWYgKHRoYXQucHJldlpvb21fICE9IHpvb20pIHtcbiAgICAgIHRoYXQucHJldlpvb21fID0gem9vbTtcbiAgICAgIHRoYXQucmVzZXRWaWV3cG9ydCgpO1xuICAgIH1cbiAgfSk7XG5cbiAgZ29vZ2xlLm1hcHMuZXZlbnQuYWRkTGlzdGVuZXIodGhpcy5tYXBfLCAnaWRsZScsIGZ1bmN0aW9uKCkge1xuICAgIHRoYXQucmVkcmF3KCk7XG4gIH0pO1xuXG4gIC8vIEZpbmFsbHksIGFkZCB0aGUgbWFya2Vyc1xuICBpZiAob3B0X21hcmtlcnMgJiYgKG9wdF9tYXJrZXJzLmxlbmd0aCB8fCBPYmplY3Qua2V5cyhvcHRfbWFya2VycykubGVuZ3RoKSkge1xuICAgIHRoaXMuYWRkTWFya2VycyhvcHRfbWFya2VycywgZmFsc2UpO1xuICB9XG59XG5cblxuLyoqXG4gKiBUaGUgbWFya2VyIGNsdXN0ZXIgaW1hZ2UgcGF0aC5cbiAqXG4gKiBAdHlwZSB7c3RyaW5nfVxuICogQHByaXZhdGVcbiAqL1xuTWFya2VyQ2x1c3RlcmVyLnByb3RvdHlwZS5NQVJLRVJfQ0xVU1RFUl9JTUFHRV9QQVRIXyA9ICcuLi9pbWFnZXMvbSc7XG5cblxuLyoqXG4gKiBUaGUgbWFya2VyIGNsdXN0ZXIgaW1hZ2UgcGF0aC5cbiAqXG4gKiBAdHlwZSB7c3RyaW5nfVxuICogQHByaXZhdGVcbiAqL1xuTWFya2VyQ2x1c3RlcmVyLnByb3RvdHlwZS5NQVJLRVJfQ0xVU1RFUl9JTUFHRV9FWFRFTlNJT05fID0gJ3BuZyc7XG5cblxuLyoqXG4gKiBFeHRlbmRzIGEgb2JqZWN0cyBwcm90b3R5cGUgYnkgYW5vdGhlcnMuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IG9iajEgVGhlIG9iamVjdCB0byBiZSBleHRlbmRlZC5cbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmoyIFRoZSBvYmplY3QgdG8gZXh0ZW5kIHdpdGguXG4gKiBAcmV0dXJuIHtPYmplY3R9IFRoZSBuZXcgZXh0ZW5kZWQgb2JqZWN0LlxuICogQGlnbm9yZVxuICovXG5NYXJrZXJDbHVzdGVyZXIucHJvdG90eXBlLmV4dGVuZCA9IGZ1bmN0aW9uKG9iajEsIG9iajIpIHtcbiAgcmV0dXJuIChmdW5jdGlvbihvYmplY3QpIHtcbiAgICBmb3IgKHZhciBwcm9wZXJ0eSBpbiBvYmplY3QucHJvdG90eXBlKSB7XG4gICAgICB0aGlzLnByb3RvdHlwZVtwcm9wZXJ0eV0gPSBvYmplY3QucHJvdG90eXBlW3Byb3BlcnR5XTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG4gIH0pLmFwcGx5KG9iajEsIFtvYmoyXSk7XG59O1xuXG5cbi8qKlxuICogSW1wbGVtZW50YWlvbiBvZiB0aGUgaW50ZXJmYWNlIG1ldGhvZC5cbiAqIEBpZ25vcmVcbiAqL1xuTWFya2VyQ2x1c3RlcmVyLnByb3RvdHlwZS5vbkFkZCA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLnNldFJlYWR5Xyh0cnVlKTtcbn07XG5cbi8qKlxuICogSW1wbGVtZW50YWlvbiBvZiB0aGUgaW50ZXJmYWNlIG1ldGhvZC5cbiAqIEBpZ25vcmVcbiAqL1xuTWFya2VyQ2x1c3RlcmVyLnByb3RvdHlwZS5kcmF3ID0gZnVuY3Rpb24oKSB7fTtcblxuLyoqXG4gKiBTZXRzIHVwIHRoZSBzdHlsZXMgb2JqZWN0LlxuICpcbiAqIEBwcml2YXRlXG4gKi9cbk1hcmtlckNsdXN0ZXJlci5wcm90b3R5cGUuc2V0dXBTdHlsZXNfID0gZnVuY3Rpb24oKSB7XG4gIGlmICh0aGlzLnN0eWxlc18ubGVuZ3RoKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgZm9yICh2YXIgaSA9IDAsIHNpemU7IHNpemUgPSB0aGlzLnNpemVzW2ldOyBpKyspIHtcbiAgICB0aGlzLnN0eWxlc18ucHVzaCh7XG4gICAgICB1cmw6IHRoaXMuaW1hZ2VQYXRoXyArIChpICsgMSkgKyAnLicgKyB0aGlzLmltYWdlRXh0ZW5zaW9uXyxcbiAgICAgIGhlaWdodDogc2l6ZSxcbiAgICAgIHdpZHRoOiBzaXplXG4gICAgfSk7XG4gIH1cbn07XG5cbi8qKlxuICogIEZpdCB0aGUgbWFwIHRvIHRoZSBib3VuZHMgb2YgdGhlIG1hcmtlcnMgaW4gdGhlIGNsdXN0ZXJlci5cbiAqL1xuTWFya2VyQ2x1c3RlcmVyLnByb3RvdHlwZS5maXRNYXBUb01hcmtlcnMgPSBmdW5jdGlvbigpIHtcbiAgdmFyIG1hcmtlcnMgPSB0aGlzLmdldE1hcmtlcnMoKTtcbiAgdmFyIGJvdW5kcyA9IG5ldyBnb29nbGUubWFwcy5MYXRMbmdCb3VuZHMoKTtcbiAgZm9yICh2YXIgaSA9IDAsIG1hcmtlcjsgbWFya2VyID0gbWFya2Vyc1tpXTsgaSsrKSB7XG4gICAgYm91bmRzLmV4dGVuZChtYXJrZXIuZ2V0UG9zaXRpb24oKSk7XG4gIH1cblxuICB0aGlzLm1hcF8uZml0Qm91bmRzKGJvdW5kcyk7XG59O1xuXG5cbi8qKlxuICogIFNldHMgdGhlIHN0eWxlcy5cbiAqXG4gKiAgQHBhcmFtIHtPYmplY3R9IHN0eWxlcyBUaGUgc3R5bGUgdG8gc2V0LlxuICovXG5NYXJrZXJDbHVzdGVyZXIucHJvdG90eXBlLnNldFN0eWxlcyA9IGZ1bmN0aW9uKHN0eWxlcykge1xuICB0aGlzLnN0eWxlc18gPSBzdHlsZXM7XG59O1xuXG5cbi8qKlxuICogIEdldHMgdGhlIHN0eWxlcy5cbiAqXG4gKiAgQHJldHVybiB7T2JqZWN0fSBUaGUgc3R5bGVzIG9iamVjdC5cbiAqL1xuTWFya2VyQ2x1c3RlcmVyLnByb3RvdHlwZS5nZXRTdHlsZXMgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMuc3R5bGVzXztcbn07XG5cblxuLyoqXG4gKiBXaGV0aGVyIHpvb20gb24gY2xpY2sgaXMgc2V0LlxuICpcbiAqIEByZXR1cm4ge2Jvb2xlYW59IFRydWUgaWYgem9vbU9uQ2xpY2tfIGlzIHNldC5cbiAqL1xuTWFya2VyQ2x1c3RlcmVyLnByb3RvdHlwZS5pc1pvb21PbkNsaWNrID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLnpvb21PbkNsaWNrXztcbn07XG5cbi8qKlxuICogV2hldGhlciBhdmVyYWdlIGNlbnRlciBpcyBzZXQuXG4gKlxuICogQHJldHVybiB7Ym9vbGVhbn0gVHJ1ZSBpZiBhdmVyYWdlQ2VudGVyXyBpcyBzZXQuXG4gKi9cbk1hcmtlckNsdXN0ZXJlci5wcm90b3R5cGUuaXNBdmVyYWdlQ2VudGVyID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLmF2ZXJhZ2VDZW50ZXJfO1xufTtcblxuXG4vKipcbiAqICBSZXR1cm5zIHRoZSBhcnJheSBvZiBtYXJrZXJzIGluIHRoZSBjbHVzdGVyZXIuXG4gKlxuICogIEByZXR1cm4ge0FycmF5Ljxnb29nbGUubWFwcy5NYXJrZXI+fSBUaGUgbWFya2Vycy5cbiAqL1xuTWFya2VyQ2x1c3RlcmVyLnByb3RvdHlwZS5nZXRNYXJrZXJzID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLm1hcmtlcnNfO1xufTtcblxuXG4vKipcbiAqICBSZXR1cm5zIHRoZSBudW1iZXIgb2YgbWFya2VycyBpbiB0aGUgY2x1c3RlcmVyXG4gKlxuICogIEByZXR1cm4ge051bWJlcn0gVGhlIG51bWJlciBvZiBtYXJrZXJzLlxuICovXG5NYXJrZXJDbHVzdGVyZXIucHJvdG90eXBlLmdldFRvdGFsTWFya2VycyA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5tYXJrZXJzXy5sZW5ndGg7XG59O1xuXG5cbi8qKlxuICogIFNldHMgdGhlIG1heCB6b29tIGZvciB0aGUgY2x1c3RlcmVyLlxuICpcbiAqICBAcGFyYW0ge251bWJlcn0gbWF4Wm9vbSBUaGUgbWF4IHpvb20gbGV2ZWwuXG4gKi9cbk1hcmtlckNsdXN0ZXJlci5wcm90b3R5cGUuc2V0TWF4Wm9vbSA9IGZ1bmN0aW9uKG1heFpvb20pIHtcbiAgdGhpcy5tYXhab29tXyA9IG1heFpvb207XG59O1xuXG5cbi8qKlxuICogIEdldHMgdGhlIG1heCB6b29tIGZvciB0aGUgY2x1c3RlcmVyLlxuICpcbiAqICBAcmV0dXJuIHtudW1iZXJ9IFRoZSBtYXggem9vbSBsZXZlbC5cbiAqL1xuTWFya2VyQ2x1c3RlcmVyLnByb3RvdHlwZS5nZXRNYXhab29tID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLm1heFpvb21fO1xufTtcblxuXG4vKipcbiAqICBUaGUgZnVuY3Rpb24gZm9yIGNhbGN1bGF0aW5nIHRoZSBjbHVzdGVyIGljb24gaW1hZ2UuXG4gKlxuICogIEBwYXJhbSB7QXJyYXkuPGdvb2dsZS5tYXBzLk1hcmtlcj59IG1hcmtlcnMgVGhlIG1hcmtlcnMgaW4gdGhlIGNsdXN0ZXJlci5cbiAqICBAcGFyYW0ge251bWJlcn0gbnVtU3R5bGVzIFRoZSBudW1iZXIgb2Ygc3R5bGVzIGF2YWlsYWJsZS5cbiAqICBAcmV0dXJuIHtPYmplY3R9IEEgb2JqZWN0IHByb3BlcnRpZXM6ICd0ZXh0JyAoc3RyaW5nKSBhbmQgJ2luZGV4JyAobnVtYmVyKS5cbiAqICBAcHJpdmF0ZVxuICovXG5NYXJrZXJDbHVzdGVyZXIucHJvdG90eXBlLmNhbGN1bGF0b3JfID0gZnVuY3Rpb24obWFya2VycywgbnVtU3R5bGVzKSB7XG4gIHZhciBpbmRleCA9IDA7XG4gIHZhciBjb3VudCA9IG1hcmtlcnMubGVuZ3RoO1xuICB2YXIgZHYgPSBjb3VudDtcbiAgd2hpbGUgKGR2ICE9PSAwKSB7XG4gICAgZHYgPSBwYXJzZUludChkdiAvIDEwLCAxMCk7XG4gICAgaW5kZXgrKztcbiAgfVxuXG4gIGluZGV4ID0gTWF0aC5taW4oaW5kZXgsIG51bVN0eWxlcyk7XG4gIHJldHVybiB7XG4gICAgdGV4dDogY291bnQsXG4gICAgaW5kZXg6IGluZGV4XG4gIH07XG59O1xuXG5cbi8qKlxuICogU2V0IHRoZSBjYWxjdWxhdG9yIGZ1bmN0aW9uLlxuICpcbiAqIEBwYXJhbSB7ZnVuY3Rpb24oQXJyYXksIG51bWJlcil9IGNhbGN1bGF0b3IgVGhlIGZ1bmN0aW9uIHRvIHNldCBhcyB0aGVcbiAqICAgICBjYWxjdWxhdG9yLiBUaGUgZnVuY3Rpb24gc2hvdWxkIHJldHVybiBhIG9iamVjdCBwcm9wZXJ0aWVzOlxuICogICAgICd0ZXh0JyAoc3RyaW5nKSBhbmQgJ2luZGV4JyAobnVtYmVyKS5cbiAqXG4gKi9cbk1hcmtlckNsdXN0ZXJlci5wcm90b3R5cGUuc2V0Q2FsY3VsYXRvciA9IGZ1bmN0aW9uKGNhbGN1bGF0b3IpIHtcbiAgdGhpcy5jYWxjdWxhdG9yXyA9IGNhbGN1bGF0b3I7XG59O1xuXG5cbi8qKlxuICogR2V0IHRoZSBjYWxjdWxhdG9yIGZ1bmN0aW9uLlxuICpcbiAqIEByZXR1cm4ge2Z1bmN0aW9uKEFycmF5LCBudW1iZXIpfSB0aGUgY2FsY3VsYXRvciBmdW5jdGlvbi5cbiAqL1xuTWFya2VyQ2x1c3RlcmVyLnByb3RvdHlwZS5nZXRDYWxjdWxhdG9yID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLmNhbGN1bGF0b3JfO1xufTtcblxuXG4vKipcbiAqIEFkZCBhbiBhcnJheSBvZiBtYXJrZXJzIHRvIHRoZSBjbHVzdGVyZXIuXG4gKlxuICogQHBhcmFtIHtBcnJheS48Z29vZ2xlLm1hcHMuTWFya2VyPn0gbWFya2VycyBUaGUgbWFya2VycyB0byBhZGQuXG4gKiBAcGFyYW0ge2Jvb2xlYW49fSBvcHRfbm9kcmF3IFdoZXRoZXIgdG8gcmVkcmF3IHRoZSBjbHVzdGVycy5cbiAqL1xuTWFya2VyQ2x1c3RlcmVyLnByb3RvdHlwZS5hZGRNYXJrZXJzID0gZnVuY3Rpb24obWFya2Vycywgb3B0X25vZHJhdykge1xuICBpZiAobWFya2Vycy5sZW5ndGgpIHtcbiAgICBmb3IgKHZhciBpID0gMCwgbWFya2VyOyBtYXJrZXIgPSBtYXJrZXJzW2ldOyBpKyspIHtcbiAgICAgIHRoaXMucHVzaE1hcmtlclRvXyhtYXJrZXIpO1xuICAgIH1cbiAgfSBlbHNlIGlmIChPYmplY3Qua2V5cyhtYXJrZXJzKS5sZW5ndGgpIHtcbiAgICBmb3IgKHZhciBtYXJrZXIgaW4gbWFya2Vycykge1xuICAgICAgdGhpcy5wdXNoTWFya2VyVG9fKG1hcmtlcnNbbWFya2VyXSk7XG4gICAgfVxuICB9XG4gIGlmICghb3B0X25vZHJhdykge1xuICAgIHRoaXMucmVkcmF3KCk7XG4gIH1cbn07XG5cblxuLyoqXG4gKiBQdXNoZXMgYSBtYXJrZXIgdG8gdGhlIGNsdXN0ZXJlci5cbiAqXG4gKiBAcGFyYW0ge2dvb2dsZS5tYXBzLk1hcmtlcn0gbWFya2VyIFRoZSBtYXJrZXIgdG8gYWRkLlxuICogQHByaXZhdGVcbiAqL1xuTWFya2VyQ2x1c3RlcmVyLnByb3RvdHlwZS5wdXNoTWFya2VyVG9fID0gZnVuY3Rpb24obWFya2VyKSB7XG4gIG1hcmtlci5pc0FkZGVkID0gZmFsc2U7XG4gIGlmIChtYXJrZXJbJ2RyYWdnYWJsZSddKSB7XG4gICAgLy8gSWYgdGhlIG1hcmtlciBpcyBkcmFnZ2FibGUgYWRkIGEgbGlzdGVuZXIgc28gd2UgdXBkYXRlIHRoZSBjbHVzdGVycyBvblxuICAgIC8vIHRoZSBkcmFnIGVuZC5cbiAgICB2YXIgdGhhdCA9IHRoaXM7XG4gICAgZ29vZ2xlLm1hcHMuZXZlbnQuYWRkTGlzdGVuZXIobWFya2VyLCAnZHJhZ2VuZCcsIGZ1bmN0aW9uKCkge1xuICAgICAgbWFya2VyLmlzQWRkZWQgPSBmYWxzZTtcbiAgICAgIHRoYXQucmVwYWludCgpO1xuICAgIH0pO1xuICB9XG4gIHRoaXMubWFya2Vyc18ucHVzaChtYXJrZXIpO1xufTtcblxuXG4vKipcbiAqIEFkZHMgYSBtYXJrZXIgdG8gdGhlIGNsdXN0ZXJlciBhbmQgcmVkcmF3cyBpZiBuZWVkZWQuXG4gKlxuICogQHBhcmFtIHtnb29nbGUubWFwcy5NYXJrZXJ9IG1hcmtlciBUaGUgbWFya2VyIHRvIGFkZC5cbiAqIEBwYXJhbSB7Ym9vbGVhbj19IG9wdF9ub2RyYXcgV2hldGhlciB0byByZWRyYXcgdGhlIGNsdXN0ZXJzLlxuICovXG5NYXJrZXJDbHVzdGVyZXIucHJvdG90eXBlLmFkZE1hcmtlciA9IGZ1bmN0aW9uKG1hcmtlciwgb3B0X25vZHJhdykge1xuICB0aGlzLnB1c2hNYXJrZXJUb18obWFya2VyKTtcbiAgaWYgKCFvcHRfbm9kcmF3KSB7XG4gICAgdGhpcy5yZWRyYXcoKTtcbiAgfVxufTtcblxuXG4vKipcbiAqIFJlbW92ZXMgYSBtYXJrZXIgYW5kIHJldHVybnMgdHJ1ZSBpZiByZW1vdmVkLCBmYWxzZSBpZiBub3RcbiAqXG4gKiBAcGFyYW0ge2dvb2dsZS5tYXBzLk1hcmtlcn0gbWFya2VyIFRoZSBtYXJrZXIgdG8gcmVtb3ZlXG4gKiBAcmV0dXJuIHtib29sZWFufSBXaGV0aGVyIHRoZSBtYXJrZXIgd2FzIHJlbW92ZWQgb3Igbm90XG4gKiBAcHJpdmF0ZVxuICovXG5NYXJrZXJDbHVzdGVyZXIucHJvdG90eXBlLnJlbW92ZU1hcmtlcl8gPSBmdW5jdGlvbihtYXJrZXIpIHtcbiAgdmFyIGluZGV4ID0gLTE7XG4gIGlmICh0aGlzLm1hcmtlcnNfLmluZGV4T2YpIHtcbiAgICBpbmRleCA9IHRoaXMubWFya2Vyc18uaW5kZXhPZihtYXJrZXIpO1xuICB9IGVsc2Uge1xuICAgIGZvciAodmFyIGkgPSAwLCBtOyBtID0gdGhpcy5tYXJrZXJzX1tpXTsgaSsrKSB7XG4gICAgICBpZiAobSA9PSBtYXJrZXIpIHtcbiAgICAgICAgaW5kZXggPSBpO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBpZiAoaW5kZXggPT0gLTEpIHtcbiAgICAvLyBNYXJrZXIgaXMgbm90IGluIG91ciBsaXN0IG9mIG1hcmtlcnMuXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgbWFya2VyLnNldE1hcChudWxsKTtcblxuICB0aGlzLm1hcmtlcnNfLnNwbGljZShpbmRleCwgMSk7XG5cbiAgcmV0dXJuIHRydWU7XG59O1xuXG5cbi8qKlxuICogUmVtb3ZlIGEgbWFya2VyIGZyb20gdGhlIGNsdXN0ZXIuXG4gKlxuICogQHBhcmFtIHtnb29nbGUubWFwcy5NYXJrZXJ9IG1hcmtlciBUaGUgbWFya2VyIHRvIHJlbW92ZS5cbiAqIEBwYXJhbSB7Ym9vbGVhbj19IG9wdF9ub2RyYXcgT3B0aW9uYWwgYm9vbGVhbiB0byBmb3JjZSBubyByZWRyYXcuXG4gKiBAcmV0dXJuIHtib29sZWFufSBUcnVlIGlmIHRoZSBtYXJrZXIgd2FzIHJlbW92ZWQuXG4gKi9cbk1hcmtlckNsdXN0ZXJlci5wcm90b3R5cGUucmVtb3ZlTWFya2VyID0gZnVuY3Rpb24obWFya2VyLCBvcHRfbm9kcmF3KSB7XG4gIHZhciByZW1vdmVkID0gdGhpcy5yZW1vdmVNYXJrZXJfKG1hcmtlcik7XG5cbiAgaWYgKCFvcHRfbm9kcmF3ICYmIHJlbW92ZWQpIHtcbiAgICB0aGlzLnJlc2V0Vmlld3BvcnQoKTtcbiAgICB0aGlzLnJlZHJhdygpO1xuICAgIHJldHVybiB0cnVlO1xuICB9IGVsc2Uge1xuICAgcmV0dXJuIGZhbHNlO1xuICB9XG59O1xuXG5cbi8qKlxuICogUmVtb3ZlcyBhbiBhcnJheSBvZiBtYXJrZXJzIGZyb20gdGhlIGNsdXN0ZXIuXG4gKlxuICogQHBhcmFtIHtBcnJheS48Z29vZ2xlLm1hcHMuTWFya2VyPn0gbWFya2VycyBUaGUgbWFya2VycyB0byByZW1vdmUuXG4gKiBAcGFyYW0ge2Jvb2xlYW49fSBvcHRfbm9kcmF3IE9wdGlvbmFsIGJvb2xlYW4gdG8gZm9yY2Ugbm8gcmVkcmF3LlxuICovXG5NYXJrZXJDbHVzdGVyZXIucHJvdG90eXBlLnJlbW92ZU1hcmtlcnMgPSBmdW5jdGlvbihtYXJrZXJzLCBvcHRfbm9kcmF3KSB7XG4gIHZhciByZW1vdmVkID0gZmFsc2U7XG5cbiAgZm9yICh2YXIgaSA9IDAsIG1hcmtlcjsgbWFya2VyID0gbWFya2Vyc1tpXTsgaSsrKSB7XG4gICAgdmFyIHIgPSB0aGlzLnJlbW92ZU1hcmtlcl8obWFya2VyKTtcbiAgICByZW1vdmVkID0gcmVtb3ZlZCB8fCByO1xuICB9XG5cbiAgaWYgKCFvcHRfbm9kcmF3ICYmIHJlbW92ZWQpIHtcbiAgICB0aGlzLnJlc2V0Vmlld3BvcnQoKTtcbiAgICB0aGlzLnJlZHJhdygpO1xuICAgIHJldHVybiB0cnVlO1xuICB9XG59O1xuXG5cbi8qKlxuICogU2V0cyB0aGUgY2x1c3RlcmVyJ3MgcmVhZHkgc3RhdGUuXG4gKlxuICogQHBhcmFtIHtib29sZWFufSByZWFkeSBUaGUgc3RhdGUuXG4gKiBAcHJpdmF0ZVxuICovXG5NYXJrZXJDbHVzdGVyZXIucHJvdG90eXBlLnNldFJlYWR5XyA9IGZ1bmN0aW9uKHJlYWR5KSB7XG4gIGlmICghdGhpcy5yZWFkeV8pIHtcbiAgICB0aGlzLnJlYWR5XyA9IHJlYWR5O1xuICAgIHRoaXMuY3JlYXRlQ2x1c3RlcnNfKCk7XG4gIH1cbn07XG5cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBudW1iZXIgb2YgY2x1c3RlcnMgaW4gdGhlIGNsdXN0ZXJlci5cbiAqXG4gKiBAcmV0dXJuIHtudW1iZXJ9IFRoZSBudW1iZXIgb2YgY2x1c3RlcnMuXG4gKi9cbk1hcmtlckNsdXN0ZXJlci5wcm90b3R5cGUuZ2V0VG90YWxDbHVzdGVycyA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5jbHVzdGVyc18ubGVuZ3RoO1xufTtcblxuXG4vKipcbiAqIFJldHVybnMgdGhlIGdvb2dsZSBtYXAgdGhhdCB0aGUgY2x1c3RlcmVyIGlzIGFzc29jaWF0ZWQgd2l0aC5cbiAqXG4gKiBAcmV0dXJuIHtnb29nbGUubWFwcy5NYXB9IFRoZSBtYXAuXG4gKi9cbk1hcmtlckNsdXN0ZXJlci5wcm90b3R5cGUuZ2V0TWFwID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLm1hcF87XG59O1xuXG5cbi8qKlxuICogU2V0cyB0aGUgZ29vZ2xlIG1hcCB0aGF0IHRoZSBjbHVzdGVyZXIgaXMgYXNzb2NpYXRlZCB3aXRoLlxuICpcbiAqIEBwYXJhbSB7Z29vZ2xlLm1hcHMuTWFwfSBtYXAgVGhlIG1hcC5cbiAqL1xuTWFya2VyQ2x1c3RlcmVyLnByb3RvdHlwZS5zZXRNYXAgPSBmdW5jdGlvbihtYXApIHtcbiAgdGhpcy5tYXBfID0gbWFwO1xufTtcblxuXG4vKipcbiAqIFJldHVybnMgdGhlIHNpemUgb2YgdGhlIGdyaWQuXG4gKlxuICogQHJldHVybiB7bnVtYmVyfSBUaGUgZ3JpZCBzaXplLlxuICovXG5NYXJrZXJDbHVzdGVyZXIucHJvdG90eXBlLmdldEdyaWRTaXplID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLmdyaWRTaXplXztcbn07XG5cblxuLyoqXG4gKiBTZXRzIHRoZSBzaXplIG9mIHRoZSBncmlkLlxuICpcbiAqIEBwYXJhbSB7bnVtYmVyfSBzaXplIFRoZSBncmlkIHNpemUuXG4gKi9cbk1hcmtlckNsdXN0ZXJlci5wcm90b3R5cGUuc2V0R3JpZFNpemUgPSBmdW5jdGlvbihzaXplKSB7XG4gIHRoaXMuZ3JpZFNpemVfID0gc2l6ZTtcbn07XG5cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBtaW4gY2x1c3RlciBzaXplLlxuICpcbiAqIEByZXR1cm4ge251bWJlcn0gVGhlIGdyaWQgc2l6ZS5cbiAqL1xuTWFya2VyQ2x1c3RlcmVyLnByb3RvdHlwZS5nZXRNaW5DbHVzdGVyU2l6ZSA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5taW5DbHVzdGVyU2l6ZV87XG59O1xuXG4vKipcbiAqIFNldHMgdGhlIG1pbiBjbHVzdGVyIHNpemUuXG4gKlxuICogQHBhcmFtIHtudW1iZXJ9IHNpemUgVGhlIGdyaWQgc2l6ZS5cbiAqL1xuTWFya2VyQ2x1c3RlcmVyLnByb3RvdHlwZS5zZXRNaW5DbHVzdGVyU2l6ZSA9IGZ1bmN0aW9uKHNpemUpIHtcbiAgdGhpcy5taW5DbHVzdGVyU2l6ZV8gPSBzaXplO1xufTtcblxuXG4vKipcbiAqIEV4dGVuZHMgYSBib3VuZHMgb2JqZWN0IGJ5IHRoZSBncmlkIHNpemUuXG4gKlxuICogQHBhcmFtIHtnb29nbGUubWFwcy5MYXRMbmdCb3VuZHN9IGJvdW5kcyBUaGUgYm91bmRzIHRvIGV4dGVuZC5cbiAqIEByZXR1cm4ge2dvb2dsZS5tYXBzLkxhdExuZ0JvdW5kc30gVGhlIGV4dGVuZGVkIGJvdW5kcy5cbiAqL1xuTWFya2VyQ2x1c3RlcmVyLnByb3RvdHlwZS5nZXRFeHRlbmRlZEJvdW5kcyA9IGZ1bmN0aW9uKGJvdW5kcykge1xuICB2YXIgcHJvamVjdGlvbiA9IHRoaXMuZ2V0UHJvamVjdGlvbigpO1xuXG4gIC8vIFR1cm4gdGhlIGJvdW5kcyBpbnRvIGxhdGxuZy5cbiAgdmFyIHRyID0gbmV3IGdvb2dsZS5tYXBzLkxhdExuZyhib3VuZHMuZ2V0Tm9ydGhFYXN0KCkubGF0KCksXG4gICAgICBib3VuZHMuZ2V0Tm9ydGhFYXN0KCkubG5nKCkpO1xuICB2YXIgYmwgPSBuZXcgZ29vZ2xlLm1hcHMuTGF0TG5nKGJvdW5kcy5nZXRTb3V0aFdlc3QoKS5sYXQoKSxcbiAgICAgIGJvdW5kcy5nZXRTb3V0aFdlc3QoKS5sbmcoKSk7XG5cbiAgLy8gQ29udmVydCB0aGUgcG9pbnRzIHRvIHBpeGVscyBhbmQgdGhlIGV4dGVuZCBvdXQgYnkgdGhlIGdyaWQgc2l6ZS5cbiAgdmFyIHRyUGl4ID0gcHJvamVjdGlvbi5mcm9tTGF0TG5nVG9EaXZQaXhlbCh0cik7XG4gIHRyUGl4LnggKz0gdGhpcy5ncmlkU2l6ZV87XG4gIHRyUGl4LnkgLT0gdGhpcy5ncmlkU2l6ZV87XG5cbiAgdmFyIGJsUGl4ID0gcHJvamVjdGlvbi5mcm9tTGF0TG5nVG9EaXZQaXhlbChibCk7XG4gIGJsUGl4LnggLT0gdGhpcy5ncmlkU2l6ZV87XG4gIGJsUGl4LnkgKz0gdGhpcy5ncmlkU2l6ZV87XG5cbiAgLy8gQ29udmVydCB0aGUgcGl4ZWwgcG9pbnRzIGJhY2sgdG8gTGF0TG5nXG4gIHZhciBuZSA9IHByb2plY3Rpb24uZnJvbURpdlBpeGVsVG9MYXRMbmcodHJQaXgpO1xuICB2YXIgc3cgPSBwcm9qZWN0aW9uLmZyb21EaXZQaXhlbFRvTGF0TG5nKGJsUGl4KTtcblxuICAvLyBFeHRlbmQgdGhlIGJvdW5kcyB0byBjb250YWluIHRoZSBuZXcgYm91bmRzLlxuICBib3VuZHMuZXh0ZW5kKG5lKTtcbiAgYm91bmRzLmV4dGVuZChzdyk7XG5cbiAgcmV0dXJuIGJvdW5kcztcbn07XG5cblxuLyoqXG4gKiBEZXRlcm1pbnMgaWYgYSBtYXJrZXIgaXMgY29udGFpbmVkIGluIGEgYm91bmRzLlxuICpcbiAqIEBwYXJhbSB7Z29vZ2xlLm1hcHMuTWFya2VyfSBtYXJrZXIgVGhlIG1hcmtlciB0byBjaGVjay5cbiAqIEBwYXJhbSB7Z29vZ2xlLm1hcHMuTGF0TG5nQm91bmRzfSBib3VuZHMgVGhlIGJvdW5kcyB0byBjaGVjayBhZ2FpbnN0LlxuICogQHJldHVybiB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgbWFya2VyIGlzIGluIHRoZSBib3VuZHMuXG4gKiBAcHJpdmF0ZVxuICovXG5NYXJrZXJDbHVzdGVyZXIucHJvdG90eXBlLmlzTWFya2VySW5Cb3VuZHNfID0gZnVuY3Rpb24obWFya2VyLCBib3VuZHMpIHtcbiAgcmV0dXJuIGJvdW5kcy5jb250YWlucyhtYXJrZXIuZ2V0UG9zaXRpb24oKSk7XG59O1xuXG5cbi8qKlxuICogQ2xlYXJzIGFsbCBjbHVzdGVycyBhbmQgbWFya2VycyBmcm9tIHRoZSBjbHVzdGVyZXIuXG4gKi9cbk1hcmtlckNsdXN0ZXJlci5wcm90b3R5cGUuY2xlYXJNYXJrZXJzID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMucmVzZXRWaWV3cG9ydCh0cnVlKTtcblxuICAvLyBTZXQgdGhlIG1hcmtlcnMgYSBlbXB0eSBhcnJheS5cbiAgdGhpcy5tYXJrZXJzXyA9IFtdO1xufTtcblxuXG4vKipcbiAqIENsZWFycyBhbGwgZXhpc3RpbmcgY2x1c3RlcnMgYW5kIHJlY3JlYXRlcyB0aGVtLlxuICogQHBhcmFtIHtib29sZWFufSBvcHRfaGlkZSBUbyBhbHNvIGhpZGUgdGhlIG1hcmtlci5cbiAqL1xuTWFya2VyQ2x1c3RlcmVyLnByb3RvdHlwZS5yZXNldFZpZXdwb3J0ID0gZnVuY3Rpb24ob3B0X2hpZGUpIHtcbiAgLy8gUmVtb3ZlIGFsbCB0aGUgY2x1c3RlcnNcbiAgZm9yICh2YXIgaSA9IDAsIGNsdXN0ZXI7IGNsdXN0ZXIgPSB0aGlzLmNsdXN0ZXJzX1tpXTsgaSsrKSB7XG4gICAgY2x1c3Rlci5yZW1vdmUoKTtcbiAgfVxuXG4gIC8vIFJlc2V0IHRoZSBtYXJrZXJzIHRvIG5vdCBiZSBhZGRlZCBhbmQgdG8gYmUgaW52aXNpYmxlLlxuICBmb3IgKHZhciBpID0gMCwgbWFya2VyOyBtYXJrZXIgPSB0aGlzLm1hcmtlcnNfW2ldOyBpKyspIHtcbiAgICBtYXJrZXIuaXNBZGRlZCA9IGZhbHNlO1xuICAgIGlmIChvcHRfaGlkZSkge1xuICAgICAgbWFya2VyLnNldE1hcChudWxsKTtcbiAgICB9XG4gIH1cblxuICB0aGlzLmNsdXN0ZXJzXyA9IFtdO1xufTtcblxuLyoqXG4gKlxuICovXG5NYXJrZXJDbHVzdGVyZXIucHJvdG90eXBlLnJlcGFpbnQgPSBmdW5jdGlvbigpIHtcbiAgdmFyIG9sZENsdXN0ZXJzID0gdGhpcy5jbHVzdGVyc18uc2xpY2UoKTtcbiAgdGhpcy5jbHVzdGVyc18ubGVuZ3RoID0gMDtcbiAgdGhpcy5yZXNldFZpZXdwb3J0KCk7XG4gIHRoaXMucmVkcmF3KCk7XG5cbiAgLy8gUmVtb3ZlIHRoZSBvbGQgY2x1c3RlcnMuXG4gIC8vIERvIGl0IGluIGEgdGltZW91dCBzbyB0aGUgb3RoZXIgY2x1c3RlcnMgaGF2ZSBiZWVuIGRyYXduIGZpcnN0LlxuICB3aW5kb3cuc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICBmb3IgKHZhciBpID0gMCwgY2x1c3RlcjsgY2x1c3RlciA9IG9sZENsdXN0ZXJzW2ldOyBpKyspIHtcbiAgICAgIGNsdXN0ZXIucmVtb3ZlKCk7XG4gICAgfVxuICB9LCAwKTtcbn07XG5cblxuLyoqXG4gKiBSZWRyYXdzIHRoZSBjbHVzdGVycy5cbiAqL1xuTWFya2VyQ2x1c3RlcmVyLnByb3RvdHlwZS5yZWRyYXcgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5jcmVhdGVDbHVzdGVyc18oKTtcbn07XG5cblxuLyoqXG4gKiBDYWxjdWxhdGVzIHRoZSBkaXN0YW5jZSBiZXR3ZWVuIHR3byBsYXRsbmcgbG9jYXRpb25zIGluIGttLlxuICogQHNlZSBodHRwOi8vd3d3Lm1vdmFibGUtdHlwZS5jby51ay9zY3JpcHRzL2xhdGxvbmcuaHRtbFxuICpcbiAqIEBwYXJhbSB7Z29vZ2xlLm1hcHMuTGF0TG5nfSBwMSBUaGUgZmlyc3QgbGF0IGxuZyBwb2ludC5cbiAqIEBwYXJhbSB7Z29vZ2xlLm1hcHMuTGF0TG5nfSBwMiBUaGUgc2Vjb25kIGxhdCBsbmcgcG9pbnQuXG4gKiBAcmV0dXJuIHtudW1iZXJ9IFRoZSBkaXN0YW5jZSBiZXR3ZWVuIHRoZSB0d28gcG9pbnRzIGluIGttLlxuICogQHByaXZhdGVcbiovXG5NYXJrZXJDbHVzdGVyZXIucHJvdG90eXBlLmRpc3RhbmNlQmV0d2VlblBvaW50c18gPSBmdW5jdGlvbihwMSwgcDIpIHtcbiAgaWYgKCFwMSB8fCAhcDIpIHtcbiAgICByZXR1cm4gMDtcbiAgfVxuXG4gIHZhciBSID0gNjM3MTsgLy8gUmFkaXVzIG9mIHRoZSBFYXJ0aCBpbiBrbVxuICB2YXIgZExhdCA9IChwMi5sYXQoKSAtIHAxLmxhdCgpKSAqIE1hdGguUEkgLyAxODA7XG4gIHZhciBkTG9uID0gKHAyLmxuZygpIC0gcDEubG5nKCkpICogTWF0aC5QSSAvIDE4MDtcbiAgdmFyIGEgPSBNYXRoLnNpbihkTGF0IC8gMikgKiBNYXRoLnNpbihkTGF0IC8gMikgK1xuICAgIE1hdGguY29zKHAxLmxhdCgpICogTWF0aC5QSSAvIDE4MCkgKiBNYXRoLmNvcyhwMi5sYXQoKSAqIE1hdGguUEkgLyAxODApICpcbiAgICBNYXRoLnNpbihkTG9uIC8gMikgKiBNYXRoLnNpbihkTG9uIC8gMik7XG4gIHZhciBjID0gMiAqIE1hdGguYXRhbjIoTWF0aC5zcXJ0KGEpLCBNYXRoLnNxcnQoMSAtIGEpKTtcbiAgdmFyIGQgPSBSICogYztcbiAgcmV0dXJuIGQ7XG59O1xuXG5cbi8qKlxuICogQWRkIGEgbWFya2VyIHRvIGEgY2x1c3Rlciwgb3IgY3JlYXRlcyBhIG5ldyBjbHVzdGVyLlxuICpcbiAqIEBwYXJhbSB7Z29vZ2xlLm1hcHMuTWFya2VyfSBtYXJrZXIgVGhlIG1hcmtlciB0byBhZGQuXG4gKiBAcHJpdmF0ZVxuICovXG5NYXJrZXJDbHVzdGVyZXIucHJvdG90eXBlLmFkZFRvQ2xvc2VzdENsdXN0ZXJfID0gZnVuY3Rpb24obWFya2VyKSB7XG4gIHZhciBkaXN0YW5jZSA9IDQwMDAwOyAvLyBTb21lIGxhcmdlIG51bWJlclxuICB2YXIgY2x1c3RlclRvQWRkVG8gPSBudWxsO1xuICB2YXIgcG9zID0gbWFya2VyLmdldFBvc2l0aW9uKCk7XG4gIGZvciAodmFyIGkgPSAwLCBjbHVzdGVyOyBjbHVzdGVyID0gdGhpcy5jbHVzdGVyc19baV07IGkrKykge1xuICAgIHZhciBjZW50ZXIgPSBjbHVzdGVyLmdldENlbnRlcigpO1xuICAgIGlmIChjZW50ZXIpIHtcbiAgICAgIHZhciBkID0gdGhpcy5kaXN0YW5jZUJldHdlZW5Qb2ludHNfKGNlbnRlciwgbWFya2VyLmdldFBvc2l0aW9uKCkpO1xuICAgICAgaWYgKGQgPCBkaXN0YW5jZSkge1xuICAgICAgICBkaXN0YW5jZSA9IGQ7XG4gICAgICAgIGNsdXN0ZXJUb0FkZFRvID0gY2x1c3RlcjtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBpZiAoY2x1c3RlclRvQWRkVG8gJiYgY2x1c3RlclRvQWRkVG8uaXNNYXJrZXJJbkNsdXN0ZXJCb3VuZHMobWFya2VyKSkge1xuICAgIGNsdXN0ZXJUb0FkZFRvLmFkZE1hcmtlcihtYXJrZXIpO1xuICB9IGVsc2Uge1xuICAgIHZhciBjbHVzdGVyID0gbmV3IENsdXN0ZXIodGhpcyk7XG4gICAgY2x1c3Rlci5hZGRNYXJrZXIobWFya2VyKTtcbiAgICB0aGlzLmNsdXN0ZXJzXy5wdXNoKGNsdXN0ZXIpO1xuICB9XG59O1xuXG5cbi8qKlxuICogQ3JlYXRlcyB0aGUgY2x1c3RlcnMuXG4gKlxuICogQHByaXZhdGVcbiAqL1xuTWFya2VyQ2x1c3RlcmVyLnByb3RvdHlwZS5jcmVhdGVDbHVzdGVyc18gPSBmdW5jdGlvbigpIHtcbiAgaWYgKCF0aGlzLnJlYWR5Xykge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8vIEdldCBvdXIgY3VycmVudCBtYXAgdmlldyBib3VuZHMuXG4gIC8vIENyZWF0ZSBhIG5ldyBib3VuZHMgb2JqZWN0IHNvIHdlIGRvbid0IGFmZmVjdCB0aGUgbWFwLlxuICB2YXIgbWFwQm91bmRzID0gbmV3IGdvb2dsZS5tYXBzLkxhdExuZ0JvdW5kcyh0aGlzLm1hcF8uZ2V0Qm91bmRzKCkuZ2V0U291dGhXZXN0KCksXG4gICAgICB0aGlzLm1hcF8uZ2V0Qm91bmRzKCkuZ2V0Tm9ydGhFYXN0KCkpO1xuICB2YXIgYm91bmRzID0gdGhpcy5nZXRFeHRlbmRlZEJvdW5kcyhtYXBCb3VuZHMpO1xuXG4gIGZvciAodmFyIGkgPSAwLCBtYXJrZXI7IG1hcmtlciA9IHRoaXMubWFya2Vyc19baV07IGkrKykge1xuICAgIGlmICghbWFya2VyLmlzQWRkZWQgJiYgdGhpcy5pc01hcmtlckluQm91bmRzXyhtYXJrZXIsIGJvdW5kcykpIHtcbiAgICAgIHRoaXMuYWRkVG9DbG9zZXN0Q2x1c3Rlcl8obWFya2VyKTtcbiAgICB9XG4gIH1cbn07XG5cblxuLyoqXG4gKiBBIGNsdXN0ZXIgdGhhdCBjb250YWlucyBtYXJrZXJzLlxuICpcbiAqIEBwYXJhbSB7TWFya2VyQ2x1c3RlcmVyfSBtYXJrZXJDbHVzdGVyZXIgVGhlIG1hcmtlcmNsdXN0ZXJlciB0aGF0IHRoaXNcbiAqICAgICBjbHVzdGVyIGlzIGFzc29jaWF0ZWQgd2l0aC5cbiAqIEBjb25zdHJ1Y3RvclxuICogQGlnbm9yZVxuICovXG5mdW5jdGlvbiBDbHVzdGVyKG1hcmtlckNsdXN0ZXJlcikge1xuICB0aGlzLm1hcmtlckNsdXN0ZXJlcl8gPSBtYXJrZXJDbHVzdGVyZXI7XG4gIHRoaXMubWFwXyA9IG1hcmtlckNsdXN0ZXJlci5nZXRNYXAoKTtcbiAgdGhpcy5ncmlkU2l6ZV8gPSBtYXJrZXJDbHVzdGVyZXIuZ2V0R3JpZFNpemUoKTtcbiAgdGhpcy5taW5DbHVzdGVyU2l6ZV8gPSBtYXJrZXJDbHVzdGVyZXIuZ2V0TWluQ2x1c3RlclNpemUoKTtcbiAgdGhpcy5hdmVyYWdlQ2VudGVyXyA9IG1hcmtlckNsdXN0ZXJlci5pc0F2ZXJhZ2VDZW50ZXIoKTtcbiAgdGhpcy5jZW50ZXJfID0gbnVsbDtcbiAgdGhpcy5tYXJrZXJzXyA9IFtdO1xuICB0aGlzLmJvdW5kc18gPSBudWxsO1xuICB0aGlzLmNsdXN0ZXJJY29uXyA9IG5ldyBDbHVzdGVySWNvbih0aGlzLCBtYXJrZXJDbHVzdGVyZXIuZ2V0U3R5bGVzKCksXG4gICAgICBtYXJrZXJDbHVzdGVyZXIuZ2V0R3JpZFNpemUoKSk7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5zIGlmIGEgbWFya2VyIGlzIGFscmVhZHkgYWRkZWQgdG8gdGhlIGNsdXN0ZXIuXG4gKlxuICogQHBhcmFtIHtnb29nbGUubWFwcy5NYXJrZXJ9IG1hcmtlciBUaGUgbWFya2VyIHRvIGNoZWNrLlxuICogQHJldHVybiB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgbWFya2VyIGlzIGFscmVhZHkgYWRkZWQuXG4gKi9cbkNsdXN0ZXIucHJvdG90eXBlLmlzTWFya2VyQWxyZWFkeUFkZGVkID0gZnVuY3Rpb24obWFya2VyKSB7XG4gIGlmICh0aGlzLm1hcmtlcnNfLmluZGV4T2YpIHtcbiAgICByZXR1cm4gdGhpcy5tYXJrZXJzXy5pbmRleE9mKG1hcmtlcikgIT0gLTE7XG4gIH0gZWxzZSB7XG4gICAgZm9yICh2YXIgaSA9IDAsIG07IG0gPSB0aGlzLm1hcmtlcnNfW2ldOyBpKyspIHtcbiAgICAgIGlmIChtID09IG1hcmtlcikge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufTtcblxuXG4vKipcbiAqIEFkZCBhIG1hcmtlciB0aGUgY2x1c3Rlci5cbiAqXG4gKiBAcGFyYW0ge2dvb2dsZS5tYXBzLk1hcmtlcn0gbWFya2VyIFRoZSBtYXJrZXIgdG8gYWRkLlxuICogQHJldHVybiB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgbWFya2VyIHdhcyBhZGRlZC5cbiAqL1xuQ2x1c3Rlci5wcm90b3R5cGUuYWRkTWFya2VyID0gZnVuY3Rpb24obWFya2VyKSB7XG4gIGlmICh0aGlzLmlzTWFya2VyQWxyZWFkeUFkZGVkKG1hcmtlcikpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBpZiAoIXRoaXMuY2VudGVyXykge1xuICAgIHRoaXMuY2VudGVyXyA9IG1hcmtlci5nZXRQb3NpdGlvbigpO1xuICAgIHRoaXMuY2FsY3VsYXRlQm91bmRzXygpO1xuICB9IGVsc2Uge1xuICAgIGlmICh0aGlzLmF2ZXJhZ2VDZW50ZXJfKSB7XG4gICAgICB2YXIgbCA9IHRoaXMubWFya2Vyc18ubGVuZ3RoICsgMTtcbiAgICAgIHZhciBsYXQgPSAodGhpcy5jZW50ZXJfLmxhdCgpICogKGwtMSkgKyBtYXJrZXIuZ2V0UG9zaXRpb24oKS5sYXQoKSkgLyBsO1xuICAgICAgdmFyIGxuZyA9ICh0aGlzLmNlbnRlcl8ubG5nKCkgKiAobC0xKSArIG1hcmtlci5nZXRQb3NpdGlvbigpLmxuZygpKSAvIGw7XG4gICAgICB0aGlzLmNlbnRlcl8gPSBuZXcgZ29vZ2xlLm1hcHMuTGF0TG5nKGxhdCwgbG5nKTtcbiAgICAgIHRoaXMuY2FsY3VsYXRlQm91bmRzXygpO1xuICAgIH1cbiAgfVxuXG4gIG1hcmtlci5pc0FkZGVkID0gdHJ1ZTtcbiAgdGhpcy5tYXJrZXJzXy5wdXNoKG1hcmtlcik7XG5cbiAgdmFyIGxlbiA9IHRoaXMubWFya2Vyc18ubGVuZ3RoO1xuICBpZiAobGVuIDwgdGhpcy5taW5DbHVzdGVyU2l6ZV8gJiYgbWFya2VyLmdldE1hcCgpICE9IHRoaXMubWFwXykge1xuICAgIC8vIE1pbiBjbHVzdGVyIHNpemUgbm90IHJlYWNoZWQgc28gc2hvdyB0aGUgbWFya2VyLlxuICAgIG1hcmtlci5zZXRNYXAodGhpcy5tYXBfKTtcbiAgfVxuXG4gIGlmIChsZW4gPT0gdGhpcy5taW5DbHVzdGVyU2l6ZV8pIHtcbiAgICAvLyBIaWRlIHRoZSBtYXJrZXJzIHRoYXQgd2VyZSBzaG93aW5nLlxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgIHRoaXMubWFya2Vyc19baV0uc2V0TWFwKG51bGwpO1xuICAgIH1cbiAgfVxuXG4gIGlmIChsZW4gPj0gdGhpcy5taW5DbHVzdGVyU2l6ZV8pIHtcbiAgICBtYXJrZXIuc2V0TWFwKG51bGwpO1xuICB9XG5cbiAgdGhpcy51cGRhdGVJY29uKCk7XG4gIHJldHVybiB0cnVlO1xufTtcblxuXG4vKipcbiAqIFJldHVybnMgdGhlIG1hcmtlciBjbHVzdGVyZXIgdGhhdCB0aGUgY2x1c3RlciBpcyBhc3NvY2lhdGVkIHdpdGguXG4gKlxuICogQHJldHVybiB7TWFya2VyQ2x1c3RlcmVyfSBUaGUgYXNzb2NpYXRlZCBtYXJrZXIgY2x1c3RlcmVyLlxuICovXG5DbHVzdGVyLnByb3RvdHlwZS5nZXRNYXJrZXJDbHVzdGVyZXIgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMubWFya2VyQ2x1c3RlcmVyXztcbn07XG5cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBib3VuZHMgb2YgdGhlIGNsdXN0ZXIuXG4gKlxuICogQHJldHVybiB7Z29vZ2xlLm1hcHMuTGF0TG5nQm91bmRzfSB0aGUgY2x1c3RlciBib3VuZHMuXG4gKi9cbkNsdXN0ZXIucHJvdG90eXBlLmdldEJvdW5kcyA9IGZ1bmN0aW9uKCkge1xuICB2YXIgYm91bmRzID0gbmV3IGdvb2dsZS5tYXBzLkxhdExuZ0JvdW5kcyh0aGlzLmNlbnRlcl8sIHRoaXMuY2VudGVyXyk7XG4gIHZhciBtYXJrZXJzID0gdGhpcy5nZXRNYXJrZXJzKCk7XG4gIGZvciAodmFyIGkgPSAwLCBtYXJrZXI7IG1hcmtlciA9IG1hcmtlcnNbaV07IGkrKykge1xuICAgIGJvdW5kcy5leHRlbmQobWFya2VyLmdldFBvc2l0aW9uKCkpO1xuICB9XG4gIHJldHVybiBib3VuZHM7XG59O1xuXG5cbi8qKlxuICogUmVtb3ZlcyB0aGUgY2x1c3RlclxuICovXG5DbHVzdGVyLnByb3RvdHlwZS5yZW1vdmUgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5jbHVzdGVySWNvbl8ucmVtb3ZlKCk7XG4gIHRoaXMubWFya2Vyc18ubGVuZ3RoID0gMDtcbiAgZGVsZXRlIHRoaXMubWFya2Vyc187XG59O1xuXG5cbi8qKlxuICogUmV0dXJucyB0aGUgY2VudGVyIG9mIHRoZSBjbHVzdGVyLlxuICpcbiAqIEByZXR1cm4ge251bWJlcn0gVGhlIGNsdXN0ZXIgY2VudGVyLlxuICovXG5DbHVzdGVyLnByb3RvdHlwZS5nZXRTaXplID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLm1hcmtlcnNfLmxlbmd0aDtcbn07XG5cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBjZW50ZXIgb2YgdGhlIGNsdXN0ZXIuXG4gKlxuICogQHJldHVybiB7QXJyYXkuPGdvb2dsZS5tYXBzLk1hcmtlcj59IFRoZSBjbHVzdGVyIGNlbnRlci5cbiAqL1xuQ2x1c3Rlci5wcm90b3R5cGUuZ2V0TWFya2VycyA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5tYXJrZXJzXztcbn07XG5cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBjZW50ZXIgb2YgdGhlIGNsdXN0ZXIuXG4gKlxuICogQHJldHVybiB7Z29vZ2xlLm1hcHMuTGF0TG5nfSBUaGUgY2x1c3RlciBjZW50ZXIuXG4gKi9cbkNsdXN0ZXIucHJvdG90eXBlLmdldENlbnRlciA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5jZW50ZXJfO1xufTtcblxuXG4vKipcbiAqIENhbGN1bGF0ZWQgdGhlIGV4dGVuZGVkIGJvdW5kcyBvZiB0aGUgY2x1c3RlciB3aXRoIHRoZSBncmlkLlxuICpcbiAqIEBwcml2YXRlXG4gKi9cbkNsdXN0ZXIucHJvdG90eXBlLmNhbGN1bGF0ZUJvdW5kc18gPSBmdW5jdGlvbigpIHtcbiAgdmFyIGJvdW5kcyA9IG5ldyBnb29nbGUubWFwcy5MYXRMbmdCb3VuZHModGhpcy5jZW50ZXJfLCB0aGlzLmNlbnRlcl8pO1xuICB0aGlzLmJvdW5kc18gPSB0aGlzLm1hcmtlckNsdXN0ZXJlcl8uZ2V0RXh0ZW5kZWRCb3VuZHMoYm91bmRzKTtcbn07XG5cblxuLyoqXG4gKiBEZXRlcm1pbmVzIGlmIGEgbWFya2VyIGxpZXMgaW4gdGhlIGNsdXN0ZXJzIGJvdW5kcy5cbiAqXG4gKiBAcGFyYW0ge2dvb2dsZS5tYXBzLk1hcmtlcn0gbWFya2VyIFRoZSBtYXJrZXIgdG8gY2hlY2suXG4gKiBAcmV0dXJuIHtib29sZWFufSBUcnVlIGlmIHRoZSBtYXJrZXIgbGllcyBpbiB0aGUgYm91bmRzLlxuICovXG5DbHVzdGVyLnByb3RvdHlwZS5pc01hcmtlckluQ2x1c3RlckJvdW5kcyA9IGZ1bmN0aW9uKG1hcmtlcikge1xuICByZXR1cm4gdGhpcy5ib3VuZHNfLmNvbnRhaW5zKG1hcmtlci5nZXRQb3NpdGlvbigpKTtcbn07XG5cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBtYXAgdGhhdCB0aGUgY2x1c3RlciBpcyBhc3NvY2lhdGVkIHdpdGguXG4gKlxuICogQHJldHVybiB7Z29vZ2xlLm1hcHMuTWFwfSBUaGUgbWFwLlxuICovXG5DbHVzdGVyLnByb3RvdHlwZS5nZXRNYXAgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMubWFwXztcbn07XG5cblxuLyoqXG4gKiBVcGRhdGVzIHRoZSBjbHVzdGVyIGljb25cbiAqL1xuQ2x1c3Rlci5wcm90b3R5cGUudXBkYXRlSWNvbiA9IGZ1bmN0aW9uKCkge1xuICB2YXIgem9vbSA9IHRoaXMubWFwXy5nZXRab29tKCk7XG4gIHZhciBteiA9IHRoaXMubWFya2VyQ2x1c3RlcmVyXy5nZXRNYXhab29tKCk7XG5cbiAgaWYgKG16ICYmIHpvb20gPiBteikge1xuICAgIC8vIFRoZSB6b29tIGlzIGdyZWF0ZXIgdGhhbiBvdXIgbWF4IHpvb20gc28gc2hvdyBhbGwgdGhlIG1hcmtlcnMgaW4gY2x1c3Rlci5cbiAgICBmb3IgKHZhciBpID0gMCwgbWFya2VyOyBtYXJrZXIgPSB0aGlzLm1hcmtlcnNfW2ldOyBpKyspIHtcbiAgICAgIG1hcmtlci5zZXRNYXAodGhpcy5tYXBfKTtcbiAgICB9XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKHRoaXMubWFya2Vyc18ubGVuZ3RoIDwgdGhpcy5taW5DbHVzdGVyU2l6ZV8pIHtcbiAgICAvLyBNaW4gY2x1c3RlciBzaXplIG5vdCB5ZXQgcmVhY2hlZC5cbiAgICB0aGlzLmNsdXN0ZXJJY29uXy5oaWRlKCk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIG51bVN0eWxlcyA9IHRoaXMubWFya2VyQ2x1c3RlcmVyXy5nZXRTdHlsZXMoKS5sZW5ndGg7XG4gIHZhciBzdW1zID0gdGhpcy5tYXJrZXJDbHVzdGVyZXJfLmdldENhbGN1bGF0b3IoKSh0aGlzLm1hcmtlcnNfLCBudW1TdHlsZXMpO1xuICB0aGlzLmNsdXN0ZXJJY29uXy5zZXRDZW50ZXIodGhpcy5jZW50ZXJfKTtcbiAgdGhpcy5jbHVzdGVySWNvbl8uc2V0U3VtcyhzdW1zKTtcbiAgdGhpcy5jbHVzdGVySWNvbl8uc2hvdygpO1xufTtcblxuXG4vKipcbiAqIEEgY2x1c3RlciBpY29uXG4gKlxuICogQHBhcmFtIHtDbHVzdGVyfSBjbHVzdGVyIFRoZSBjbHVzdGVyIHRvIGJlIGFzc29jaWF0ZWQgd2l0aC5cbiAqIEBwYXJhbSB7T2JqZWN0fSBzdHlsZXMgQW4gb2JqZWN0IHRoYXQgaGFzIHN0eWxlIHByb3BlcnRpZXM6XG4gKiAgICAgJ3VybCc6IChzdHJpbmcpIFRoZSBpbWFnZSB1cmwuXG4gKiAgICAgJ2hlaWdodCc6IChudW1iZXIpIFRoZSBpbWFnZSBoZWlnaHQuXG4gKiAgICAgJ3dpZHRoJzogKG51bWJlcikgVGhlIGltYWdlIHdpZHRoLlxuICogICAgICdhbmNob3InOiAoQXJyYXkpIFRoZSBhbmNob3IgcG9zaXRpb24gb2YgdGhlIGxhYmVsIHRleHQuXG4gKiAgICAgJ3RleHRDb2xvcic6IChzdHJpbmcpIFRoZSB0ZXh0IGNvbG9yLlxuICogICAgICd0ZXh0U2l6ZSc6IChudW1iZXIpIFRoZSB0ZXh0IHNpemUuXG4gKiAgICAgJ2JhY2tncm91bmRQb3NpdGlvbjogKHN0cmluZykgVGhlIGJhY2tncm91bmQgcG9zdGl0aW9uIHgsIHkuXG4gKiBAcGFyYW0ge251bWJlcj19IG9wdF9wYWRkaW5nIE9wdGlvbmFsIHBhZGRpbmcgdG8gYXBwbHkgdG8gdGhlIGNsdXN0ZXIgaWNvbi5cbiAqIEBjb25zdHJ1Y3RvclxuICogQGV4dGVuZHMgZ29vZ2xlLm1hcHMuT3ZlcmxheVZpZXdcbiAqIEBpZ25vcmVcbiAqL1xuZnVuY3Rpb24gQ2x1c3Rlckljb24oY2x1c3Rlciwgc3R5bGVzLCBvcHRfcGFkZGluZykge1xuICBjbHVzdGVyLmdldE1hcmtlckNsdXN0ZXJlcigpLmV4dGVuZChDbHVzdGVySWNvbiwgZ29vZ2xlLm1hcHMuT3ZlcmxheVZpZXcpO1xuXG4gIHRoaXMuc3R5bGVzXyA9IHN0eWxlcztcbiAgdGhpcy5wYWRkaW5nXyA9IG9wdF9wYWRkaW5nIHx8IDA7XG4gIHRoaXMuY2x1c3Rlcl8gPSBjbHVzdGVyO1xuICB0aGlzLmNlbnRlcl8gPSBudWxsO1xuICB0aGlzLm1hcF8gPSBjbHVzdGVyLmdldE1hcCgpO1xuICB0aGlzLmRpdl8gPSBudWxsO1xuICB0aGlzLnN1bXNfID0gbnVsbDtcbiAgdGhpcy52aXNpYmxlXyA9IGZhbHNlO1xuXG4gIHRoaXMuc2V0TWFwKHRoaXMubWFwXyk7XG59XG5cblxuLyoqXG4gKiBUcmlnZ2VycyB0aGUgY2x1c3RlcmNsaWNrIGV2ZW50IGFuZCB6b29tJ3MgaWYgdGhlIG9wdGlvbiBpcyBzZXQuXG4gKi9cbkNsdXN0ZXJJY29uLnByb3RvdHlwZS50cmlnZ2VyQ2x1c3RlckNsaWNrID0gZnVuY3Rpb24oKSB7XG4gIHZhciBtYXJrZXJDbHVzdGVyZXIgPSB0aGlzLmNsdXN0ZXJfLmdldE1hcmtlckNsdXN0ZXJlcigpO1xuXG4gIC8vIFRyaWdnZXIgdGhlIGNsdXN0ZXJjbGljayBldmVudC5cbiAgZ29vZ2xlLm1hcHMuZXZlbnQudHJpZ2dlcihtYXJrZXJDbHVzdGVyZXIsICdjbHVzdGVyY2xpY2snLCB0aGlzLmNsdXN0ZXJfKTtcblxuICBpZiAobWFya2VyQ2x1c3RlcmVyLmlzWm9vbU9uQ2xpY2soKSkge1xuICAgIC8vIFpvb20gaW50byB0aGUgY2x1c3Rlci5cbiAgICB0aGlzLm1hcF8uZml0Qm91bmRzKHRoaXMuY2x1c3Rlcl8uZ2V0Qm91bmRzKCkpO1xuICB9XG59O1xuXG5cbi8qKlxuICogQWRkaW5nIHRoZSBjbHVzdGVyIGljb24gdG8gdGhlIGRvbS5cbiAqIEBpZ25vcmVcbiAqL1xuQ2x1c3Rlckljb24ucHJvdG90eXBlLm9uQWRkID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuZGl2XyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ0RJVicpO1xuICBpZiAodGhpcy52aXNpYmxlXykge1xuICAgIHZhciBwb3MgPSB0aGlzLmdldFBvc0Zyb21MYXRMbmdfKHRoaXMuY2VudGVyXyk7XG4gICAgdGhpcy5kaXZfLnN0eWxlLmNzc1RleHQgPSB0aGlzLmNyZWF0ZUNzcyhwb3MpO1xuICAgIHRoaXMuZGl2Xy5pbm5lckhUTUwgPSB0aGlzLnN1bXNfLnRleHQ7XG4gIH1cblxuICB2YXIgcGFuZXMgPSB0aGlzLmdldFBhbmVzKCk7XG4gIHBhbmVzLm92ZXJsYXlNb3VzZVRhcmdldC5hcHBlbmRDaGlsZCh0aGlzLmRpdl8pO1xuXG4gIHZhciB0aGF0ID0gdGhpcztcbiAgZ29vZ2xlLm1hcHMuZXZlbnQuYWRkRG9tTGlzdGVuZXIodGhpcy5kaXZfLCAnY2xpY2snLCBmdW5jdGlvbigpIHtcbiAgICB0aGF0LnRyaWdnZXJDbHVzdGVyQ2xpY2soKTtcbiAgfSk7XG59O1xuXG5cbi8qKlxuICogUmV0dXJucyB0aGUgcG9zaXRpb24gdG8gcGxhY2UgdGhlIGRpdiBkZW5kaW5nIG9uIHRoZSBsYXRsbmcuXG4gKlxuICogQHBhcmFtIHtnb29nbGUubWFwcy5MYXRMbmd9IGxhdGxuZyBUaGUgcG9zaXRpb24gaW4gbGF0bG5nLlxuICogQHJldHVybiB7Z29vZ2xlLm1hcHMuUG9pbnR9IFRoZSBwb3NpdGlvbiBpbiBwaXhlbHMuXG4gKiBAcHJpdmF0ZVxuICovXG5DbHVzdGVySWNvbi5wcm90b3R5cGUuZ2V0UG9zRnJvbUxhdExuZ18gPSBmdW5jdGlvbihsYXRsbmcpIHtcbiAgdmFyIHBvcyA9IHRoaXMuZ2V0UHJvamVjdGlvbigpLmZyb21MYXRMbmdUb0RpdlBpeGVsKGxhdGxuZyk7XG4gIHBvcy54IC09IHBhcnNlSW50KHRoaXMud2lkdGhfIC8gMiwgMTApO1xuICBwb3MueSAtPSBwYXJzZUludCh0aGlzLmhlaWdodF8gLyAyLCAxMCk7XG4gIHJldHVybiBwb3M7XG59O1xuXG5cbi8qKlxuICogRHJhdyB0aGUgaWNvbi5cbiAqIEBpZ25vcmVcbiAqL1xuQ2x1c3Rlckljb24ucHJvdG90eXBlLmRyYXcgPSBmdW5jdGlvbigpIHtcbiAgaWYgKHRoaXMudmlzaWJsZV8pIHtcbiAgICB2YXIgcG9zID0gdGhpcy5nZXRQb3NGcm9tTGF0TG5nXyh0aGlzLmNlbnRlcl8pO1xuICAgIHRoaXMuZGl2Xy5zdHlsZS50b3AgPSBwb3MueSArICdweCc7XG4gICAgdGhpcy5kaXZfLnN0eWxlLmxlZnQgPSBwb3MueCArICdweCc7XG4gIH1cbn07XG5cblxuLyoqXG4gKiBIaWRlIHRoZSBpY29uLlxuICovXG5DbHVzdGVySWNvbi5wcm90b3R5cGUuaGlkZSA9IGZ1bmN0aW9uKCkge1xuICBpZiAodGhpcy5kaXZfKSB7XG4gICAgdGhpcy5kaXZfLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gIH1cbiAgdGhpcy52aXNpYmxlXyA9IGZhbHNlO1xufTtcblxuXG4vKipcbiAqIFBvc2l0aW9uIGFuZCBzaG93IHRoZSBpY29uLlxuICovXG5DbHVzdGVySWNvbi5wcm90b3R5cGUuc2hvdyA9IGZ1bmN0aW9uKCkge1xuICBpZiAodGhpcy5kaXZfKSB7XG4gICAgdmFyIHBvcyA9IHRoaXMuZ2V0UG9zRnJvbUxhdExuZ18odGhpcy5jZW50ZXJfKTtcbiAgICB0aGlzLmRpdl8uc3R5bGUuY3NzVGV4dCA9IHRoaXMuY3JlYXRlQ3NzKHBvcyk7XG4gICAgdGhpcy5kaXZfLnN0eWxlLmRpc3BsYXkgPSAnJztcbiAgfVxuICB0aGlzLnZpc2libGVfID0gdHJ1ZTtcbn07XG5cblxuLyoqXG4gKiBSZW1vdmUgdGhlIGljb24gZnJvbSB0aGUgbWFwXG4gKi9cbkNsdXN0ZXJJY29uLnByb3RvdHlwZS5yZW1vdmUgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5zZXRNYXAobnVsbCk7XG59O1xuXG5cbi8qKlxuICogSW1wbGVtZW50YXRpb24gb2YgdGhlIG9uUmVtb3ZlIGludGVyZmFjZS5cbiAqIEBpZ25vcmVcbiAqL1xuQ2x1c3Rlckljb24ucHJvdG90eXBlLm9uUmVtb3ZlID0gZnVuY3Rpb24oKSB7XG4gIGlmICh0aGlzLmRpdl8gJiYgdGhpcy5kaXZfLnBhcmVudE5vZGUpIHtcbiAgICB0aGlzLmhpZGUoKTtcbiAgICB0aGlzLmRpdl8ucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCh0aGlzLmRpdl8pO1xuICAgIHRoaXMuZGl2XyA9IG51bGw7XG4gIH1cbn07XG5cblxuLyoqXG4gKiBTZXQgdGhlIHN1bXMgb2YgdGhlIGljb24uXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHN1bXMgVGhlIHN1bXMgY29udGFpbmluZzpcbiAqICAgJ3RleHQnOiAoc3RyaW5nKSBUaGUgdGV4dCB0byBkaXNwbGF5IGluIHRoZSBpY29uLlxuICogICAnaW5kZXgnOiAobnVtYmVyKSBUaGUgc3R5bGUgaW5kZXggb2YgdGhlIGljb24uXG4gKi9cbkNsdXN0ZXJJY29uLnByb3RvdHlwZS5zZXRTdW1zID0gZnVuY3Rpb24oc3Vtcykge1xuICB0aGlzLnN1bXNfID0gc3VtcztcbiAgdGhpcy50ZXh0XyA9IHN1bXMudGV4dDtcbiAgdGhpcy5pbmRleF8gPSBzdW1zLmluZGV4O1xuICBpZiAodGhpcy5kaXZfKSB7XG4gICAgdGhpcy5kaXZfLmlubmVySFRNTCA9IHN1bXMudGV4dDtcbiAgfVxuXG4gIHRoaXMudXNlU3R5bGUoKTtcbn07XG5cblxuLyoqXG4gKiBTZXRzIHRoZSBpY29uIHRvIHRoZSB0aGUgc3R5bGVzLlxuICovXG5DbHVzdGVySWNvbi5wcm90b3R5cGUudXNlU3R5bGUgPSBmdW5jdGlvbigpIHtcbiAgdmFyIGluZGV4ID0gTWF0aC5tYXgoMCwgdGhpcy5zdW1zXy5pbmRleCAtIDEpO1xuICBpbmRleCA9IE1hdGgubWluKHRoaXMuc3R5bGVzXy5sZW5ndGggLSAxLCBpbmRleCk7XG4gIHZhciBzdHlsZSA9IHRoaXMuc3R5bGVzX1tpbmRleF07XG4gIHRoaXMudXJsXyA9IHN0eWxlWyd1cmwnXTtcbiAgdGhpcy5oZWlnaHRfID0gc3R5bGVbJ2hlaWdodCddO1xuICB0aGlzLndpZHRoXyA9IHN0eWxlWyd3aWR0aCddO1xuICB0aGlzLnRleHRDb2xvcl8gPSBzdHlsZVsndGV4dENvbG9yJ107XG4gIHRoaXMuYW5jaG9yXyA9IHN0eWxlWydhbmNob3InXTtcbiAgdGhpcy50ZXh0U2l6ZV8gPSBzdHlsZVsndGV4dFNpemUnXTtcbiAgdGhpcy5iYWNrZ3JvdW5kUG9zaXRpb25fID0gc3R5bGVbJ2JhY2tncm91bmRQb3NpdGlvbiddO1xufTtcblxuXG4vKipcbiAqIFNldHMgdGhlIGNlbnRlciBvZiB0aGUgaWNvbi5cbiAqXG4gKiBAcGFyYW0ge2dvb2dsZS5tYXBzLkxhdExuZ30gY2VudGVyIFRoZSBsYXRsbmcgdG8gc2V0IGFzIHRoZSBjZW50ZXIuXG4gKi9cbkNsdXN0ZXJJY29uLnByb3RvdHlwZS5zZXRDZW50ZXIgPSBmdW5jdGlvbihjZW50ZXIpIHtcbiAgdGhpcy5jZW50ZXJfID0gY2VudGVyO1xufTtcblxuXG4vKipcbiAqIENyZWF0ZSB0aGUgY3NzIHRleHQgYmFzZWQgb24gdGhlIHBvc2l0aW9uIG9mIHRoZSBpY29uLlxuICpcbiAqIEBwYXJhbSB7Z29vZ2xlLm1hcHMuUG9pbnR9IHBvcyBUaGUgcG9zaXRpb24uXG4gKiBAcmV0dXJuIHtzdHJpbmd9IFRoZSBjc3Mgc3R5bGUgdGV4dC5cbiAqL1xuQ2x1c3Rlckljb24ucHJvdG90eXBlLmNyZWF0ZUNzcyA9IGZ1bmN0aW9uKHBvcykge1xuICB2YXIgc3R5bGUgPSBbXTtcbiAgc3R5bGUucHVzaCgnYmFja2dyb3VuZC1pbWFnZTp1cmwoJyArIHRoaXMudXJsXyArICcpOycpO1xuICB2YXIgYmFja2dyb3VuZFBvc2l0aW9uID0gdGhpcy5iYWNrZ3JvdW5kUG9zaXRpb25fID8gdGhpcy5iYWNrZ3JvdW5kUG9zaXRpb25fIDogJzAgMCc7XG4gIHN0eWxlLnB1c2goJ2JhY2tncm91bmQtcG9zaXRpb246JyArIGJhY2tncm91bmRQb3NpdGlvbiArICc7Jyk7XG5cbiAgaWYgKHR5cGVvZiB0aGlzLmFuY2hvcl8gPT09ICdvYmplY3QnKSB7XG4gICAgaWYgKHR5cGVvZiB0aGlzLmFuY2hvcl9bMF0gPT09ICdudW1iZXInICYmIHRoaXMuYW5jaG9yX1swXSA+IDAgJiZcbiAgICAgICAgdGhpcy5hbmNob3JfWzBdIDwgdGhpcy5oZWlnaHRfKSB7XG4gICAgICBzdHlsZS5wdXNoKCdoZWlnaHQ6JyArICh0aGlzLmhlaWdodF8gLSB0aGlzLmFuY2hvcl9bMF0pICtcbiAgICAgICAgICAncHg7IHBhZGRpbmctdG9wOicgKyB0aGlzLmFuY2hvcl9bMF0gKyAncHg7Jyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0eWxlLnB1c2goJ2hlaWdodDonICsgdGhpcy5oZWlnaHRfICsgJ3B4OyBsaW5lLWhlaWdodDonICsgdGhpcy5oZWlnaHRfICtcbiAgICAgICAgICAncHg7Jyk7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgdGhpcy5hbmNob3JfWzFdID09PSAnbnVtYmVyJyAmJiB0aGlzLmFuY2hvcl9bMV0gPiAwICYmXG4gICAgICAgIHRoaXMuYW5jaG9yX1sxXSA8IHRoaXMud2lkdGhfKSB7XG4gICAgICBzdHlsZS5wdXNoKCd3aWR0aDonICsgKHRoaXMud2lkdGhfIC0gdGhpcy5hbmNob3JfWzFdKSArXG4gICAgICAgICAgJ3B4OyBwYWRkaW5nLWxlZnQ6JyArIHRoaXMuYW5jaG9yX1sxXSArICdweDsnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3R5bGUucHVzaCgnd2lkdGg6JyArIHRoaXMud2lkdGhfICsgJ3B4OyB0ZXh0LWFsaWduOmNlbnRlcjsnKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgc3R5bGUucHVzaCgnaGVpZ2h0OicgKyB0aGlzLmhlaWdodF8gKyAncHg7IGxpbmUtaGVpZ2h0OicgK1xuICAgICAgICB0aGlzLmhlaWdodF8gKyAncHg7IHdpZHRoOicgKyB0aGlzLndpZHRoXyArICdweDsgdGV4dC1hbGlnbjpjZW50ZXI7Jyk7XG4gIH1cblxuICB2YXIgdHh0Q29sb3IgPSB0aGlzLnRleHRDb2xvcl8gPyB0aGlzLnRleHRDb2xvcl8gOiAnYmxhY2snO1xuICB2YXIgdHh0U2l6ZSA9IHRoaXMudGV4dFNpemVfID8gdGhpcy50ZXh0U2l6ZV8gOiAxMTtcblxuICBzdHlsZS5wdXNoKCdjdXJzb3I6cG9pbnRlcjsgdG9wOicgKyBwb3MueSArICdweDsgbGVmdDonICtcbiAgICAgIHBvcy54ICsgJ3B4OyBjb2xvcjonICsgdHh0Q29sb3IgKyAnOyBwb3NpdGlvbjphYnNvbHV0ZTsgZm9udC1zaXplOicgK1xuICAgICAgdHh0U2l6ZSArICdweDsgZm9udC1mYW1pbHk6QXJpYWwsc2Fucy1zZXJpZjsgZm9udC13ZWlnaHQ6Ym9sZCcpO1xuICByZXR1cm4gc3R5bGUuam9pbignJyk7XG59O1xuIiwiKGZ1bmN0aW9uKHdpbmRvdyl7XG4gIHZhciBMaXN0ID0gKGZ1bmN0aW9uKCl7XG4gICAgZnVuY3Rpb24gTGlzdChwYXJhbXMpe1xuICAgICAgdGhpcy5pdGVtcyA9IFtdO1xuICAgIH07XG4gICAgTGlzdC5wcm90b3R5cGUgPSB7XG4gICAgICBhZGQ6IGZ1bmN0aW9uKGl0ZW0pe1xuICAgICAgICB0aGlzLml0ZW1zLnB1c2goaXRlbSk7XG4gICAgICB9LFxuICAgICAgcmVtb3ZlOiBmdW5jdGlvbihpdGVtKXsgXG4gICAgICAgIHZhciBpbmRleE9mID0gdGhpcy5pdGVtcy5pbmRleE9mKGl0ZW0pO1xuICAgICAgICBpZiAoaW5kZXhPZiAhPT0gLTEpIHtcbiAgICAgICAgICB0aGlzLml0ZW1zLnNwbGljZShpbmRleE9mLCAxKTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIGZpbmQ6IGZ1bmN0aW9uKGNhbGxiYWNrLCBhY3Rpb24pe1xuICAgICAgICB2YXIgY2FsbGJhY2tSZXR1cm4sXG4gICAgICAgICAgICBpdGVtcyA9IHRoaXMuaXRlbXMsXG4gICAgICAgICAgICBsZW5ndGggPSBpdGVtcy5sZW5ndGgsXG4gICAgICAgICAgICBtYXRjaGVzID0gW10sXG4gICAgICAgICAgICBpID0gMDtcbiAgICAgICAgXG4gICAgICAgIGZvcig7IGkgPCBsZW5ndGg7IGkrKyl7XG4gICAgICAgICAgY2FsbGJhY2tSZXR1cm4gPSBjYWxsYmFjayhpdGVtc1tpXSwgaSk7XG4gICAgICAgICAgaWYoY2FsbGJhY2tSZXR1cm4pIHtcbiAgICAgICAgICAgIG1hdGNoZXMucHVzaChpdGVtc1tpXSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGFjdGlvbikge1xuICAgICAgICAgIGFjdGlvbi5jYWxsKHRoaXMsIG1hdGNoZXMpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG1hdGNoZXM7XG4gICAgICB9LFxuICAgIH07XG4gICAgcmV0dXJuIExpc3Q7XG4gIH0oKSk7XG4gIExpc3QuY3JlYXRlID0gZnVuY3Rpb24ocGFyYW1zKSB7XG4gICAgcmV0dXJuIG5ldyBMaXN0KHBhcmFtcyk7XG4gIH1cbiAgd2luZG93Lkxpc3QgPSBMaXN0O1xufSh3aW5kb3cpKTsiLCIoZnVuY3Rpb24od2luZG93LCBnb29nbGUsIExpc3QpIHtcblxuICB2YXIgTWFwc3RlciA9IChmdW5jdGlvbigpIHtcbiAgICBmdW5jdGlvbiBNYXBzdGVyKGVsZW1lbnQsIG9wdHMpIHtcbiAgICAgIHRoaXMuZ01hcCA9IG5ldyBnb29nbGUubWFwcy5NYXAoZWxlbWVudCwgb3B0cyk7XG4gICAgICB0aGlzLm1hcmtlcnMgPSBMaXN0LmNyZWF0ZSgpO1xuICAgICAgaWYgKG9wdHMuY2x1c3Rlcikge1xuICAgICAgICB0aGlzLm1hcmtlckNsdXN0ZXJlciA9IG5ldyBNYXJrZXJDbHVzdGVyZXIodGhpcy5nTWFwLCBbXSwgb3B0cy5jbHVzdGVyLm9wdGlvbnMpO1xuICAgICAgfVxuICAgIH1cbiAgICBNYXBzdGVyLnByb3RvdHlwZSA9IHtcbiAgICAgIHpvb206IGZ1bmN0aW9uKGxldmVsKSB7XG4gICAgICAgIGlmKGxldmVsKSB7XG4gICAgICAgICAgdGhpcy5nTWFwLnNldFpvb20obGV2ZWwpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiB0aGlzLmdNYXAuZ2V0Wm9vbSgpO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgYWRkTWFya2VyOiBmdW5jdGlvbihvcHRzKSB7XG4gICAgICAgIHZhciBtYXJrZXI7XG4gICAgICAgIHZhciBpbmZvV2lkb3c7XG4gICAgICAgIG9wdHMucG9zaXRpb24gPSB7XG4gICAgICAgICAgbGF0OiBvcHRzLmxhdCxcbiAgICAgICAgICBsbmc6IG9wdHMubG5nXG4gICAgICAgIH1cbiAgICAgICAgbWFya2VyID0gdGhpcy5fY3JlYXRlTWFya2VyKG9wdHMpO1xuICAgICAgICBpZih0aGlzLm1hcmtlckNsdXN0ZXJlcikge1xuICAgICAgICAgIHRoaXMubWFya2VyQ2x1c3RlcmVyLmFkZE1hcmtlcihtYXJrZXIpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMubWFya2Vycy5hZGQobWFya2VyKTtcbiAgICAgICAgaWYgKG9wdHMuZXZlbnRzKSB7XG4gICAgICAgICAgdGhpcy5fYXR0YWNoRXZlbnRzKG1hcmtlciwgb3B0cy5ldmVudHMpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChvcHRzLmNvbnRlbnQpIHtcbiAgICAgICAgICB0aGlzLl9vbih7XG4gICAgICAgICAgICBvYmo6IG1hcmtlcixcbiAgICAgICAgICAgIGV2ZW50OiAnY2xpY2snLFxuICAgICAgICAgICAgY2FsbGJhY2s6IGZ1bmN0aW9uKGUpIHsgICAgICAgXG4gICAgICAgICAgICAgIGlmICghaW5mb1dpZG93KXtcbiAgICAgICAgICAgICAgICBpbmZvV2lkb3cgPSBuZXcgZ29vZ2xlLm1hcHMuSW5mb1dpbmRvdyh7XG4gICAgICAgICAgICAgICAgICBjb250ZW50OiBvcHRzLmNvbnRlbnRcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgfSBcbiAgICAgICAgICAgICAgaWYoIWluZm9XaWRvdy5nZXRNYXAoKSl7XG4gICAgICAgICAgICAgICAgaW5mb1dpZG93Lm9wZW4odGhpcy5nTWFwLCBtYXJrZXIpO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGluZm9XaWRvdy5jbG9zZSgpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG1hcmtlcjtcbiAgICAgIH0sXG4gICAgICBzZXRQYW5vOiBmdW5jdGlvbihlbGVtZW50LCBvcHRzKXtcbiAgICAgICAgdmFyIHBhbm9yYW1hID0gbmV3IGdvb2dsZS5tYXBzLlN0cmVldFZpZXdQYW5vcmFtYShlbGVtZW50LCBvcHRzKTtcbiAgICAgICAgdGhpcy5nTWFwLnNldFN0cmVldFZpZXcocGFub3JhbWEpO1xuICAgICAgICBpZiAob3B0cy5ldmVudHMpIHtcbiAgICAgICAgICB0aGlzLl9hdHRhY2hFdmVudHMocGFub3JhbWEsIG9wdHMuZXZlbnRzKTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIGZpbmRCeTogZnVuY3Rpb24oY2FsbGJhY2spIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubWFya2Vycy5maW5kKGNhbGxiYWNrKVxuICAgICAgfSxcbiAgICAgIHJlbW92ZUJ5OiBmdW5jdGlvbihjYWxsYmFjaykge1xuICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgICAgIHRoaXMubWFya2Vycy5maW5kKGNhbGxiYWNrLCBmdW5jdGlvbihtYXJrZXJzKSB7XG4gICAgICAgICAgbWFya2Vycy5mb3JFYWNoKGZ1bmN0aW9uKG1hcmtlcil7XG4gICAgICAgICAgICBpZihzZWxmLm1hcmtlckNsdXN0ZXJlcil7XG4gICAgICAgICAgICAgIHNlbGYubWFya2VyQ2x1c3RlcmVyLnJlbW92ZU1hcmtlcihtYXJrZXIpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgbWFya2VyLnNldE1hcChudWxsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KVxuICAgICAgICB9KTtcbiAgICAgIH0sXG4gICAgICBfYXR0YWNoRXZlbnRzOiBmdW5jdGlvbihvYmosIGV2ZW50cyl7XG4gICAgICAgIHZhciBzZWxmID0gdGhpcztcbiAgICAgICAgZXZlbnRzLmZvckVhY2goZnVuY3Rpb24oZXZlbnQpe1xuICAgICAgICAgIHNlbGYuX29uKHtcbiAgICAgICAgICAgIG9iajogb2JqLFxuICAgICAgICAgICAgZXZlbnQ6IGV2ZW50Lm5hbWUsXG4gICAgICAgICAgICBjYWxsYmFjazogZXZlbnQuY2FsbGJhY2tcbiAgICAgICAgICB9KVxuICAgICAgICB9KVxuICAgICAgfSxcbiAgICAgIF9vbjogZnVuY3Rpb24ob3B0cykge1xuICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgICAgIGdvb2dsZS5tYXBzLmV2ZW50LmFkZExpc3RlbmVyKG9wdHMub2JqLCBvcHRzLmV2ZW50LCBmdW5jdGlvbihlKXtcbiAgICAgICAgICBvcHRzLmNhbGxiYWNrLmNhbGwoc2VsZiwgZSwgb3B0cy5vYmopO1xuICAgICAgICB9KTtcbiAgICAgIH0sXG4gICAgICBfY3JlYXRlTWFya2VyOiBmdW5jdGlvbihvcHRzKSB7XG4gICAgICAgIG9wdHMubWFwID0gdGhpcy5nTWFwO1xuICAgICAgICByZXR1cm4gbmV3IGdvb2dsZS5tYXBzLk1hcmtlcihvcHRzKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIE1hcHN0ZXI7XG4gIH0oKSk7XG5cbiAgTWFwc3Rlci5jcmVhdGUgPSBmdW5jdGlvbihlbGVtZW50LCBvcHRzKSB7XG4gICAgcmV0dXJuIG5ldyBNYXBzdGVyKGVsZW1lbnQsIG9wdHMpO1xuICB9O1xuXG4gIHdpbmRvdy5NYXBzdGVyID0gTWFwc3Rlcjtcbn0od2luZG93LCBnb29nbGUsIExpc3QpKTsiLCIoZnVuY3Rpb24od2luZG93LCBnb29nbGUsIG1hcHN0ZXIpe1xuICB2YXIgc3R5bGVzID0gW1xuICAgIHtcbiAgICAgIFwiZWxlbWVudFR5cGVcIjogXCJnZW9tZXRyeVwiLFxuICAgICAgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAge1xuICAgICAgICAgIFwiY29sb3JcIjogXCIjZjVmNWY1XCJcbiAgICAgICAgfVxuICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgXCJlbGVtZW50VHlwZVwiOiBcImxhYmVscy5pY29uXCIsXG4gICAgICBcInN0eWxlcnNcIjogW1xuICAgICAgICB7XG4gICAgICAgICAgXCJ2aXNpYmlsaXR5XCI6IFwib2ZmXCJcbiAgICAgICAgfVxuICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgXCJlbGVtZW50VHlwZVwiOiBcImxhYmVscy50ZXh0LmZpbGxcIixcbiAgICAgIFwic3R5bGVyc1wiOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBcImNvbG9yXCI6IFwiIzYxNjE2MVwiXG4gICAgICAgIH1cbiAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgIFwiZWxlbWVudFR5cGVcIjogXCJsYWJlbHMudGV4dC5zdHJva2VcIixcbiAgICAgIFwic3R5bGVyc1wiOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBcImNvbG9yXCI6IFwiI2Y1ZjVmNVwiXG4gICAgICAgIH1cbiAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgIFwiZmVhdHVyZVR5cGVcIjogXCJhZG1pbmlzdHJhdGl2ZS5sYW5kX3BhcmNlbFwiLFxuICAgICAgXCJlbGVtZW50VHlwZVwiOiBcImxhYmVscy50ZXh0LmZpbGxcIixcbiAgICAgIFwic3R5bGVyc1wiOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBcImNvbG9yXCI6IFwiI2JkYmRiZFwiXG4gICAgICAgIH1cbiAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgIFwiZmVhdHVyZVR5cGVcIjogXCJwb2lcIixcbiAgICAgIFwiZWxlbWVudFR5cGVcIjogXCJnZW9tZXRyeVwiLFxuICAgICAgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAge1xuICAgICAgICAgIFwiY29sb3JcIjogXCIjZWVlZWVlXCJcbiAgICAgICAgfVxuICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgXCJmZWF0dXJlVHlwZVwiOiBcInBvaVwiLFxuICAgICAgXCJlbGVtZW50VHlwZVwiOiBcImxhYmVscy50ZXh0LmZpbGxcIixcbiAgICAgIFwic3R5bGVyc1wiOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBcImNvbG9yXCI6IFwiIzc1NzU3NVwiXG4gICAgICAgIH1cbiAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgIFwiZmVhdHVyZVR5cGVcIjogXCJwb2kucGFya1wiLFxuICAgICAgXCJlbGVtZW50VHlwZVwiOiBcImdlb21ldHJ5XCIsXG4gICAgICBcInN0eWxlcnNcIjogW1xuICAgICAgICB7XG4gICAgICAgICAgXCJjb2xvclwiOiBcIiNlNWU1ZTVcIlxuICAgICAgICB9XG4gICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICBcImZlYXR1cmVUeXBlXCI6IFwicG9pLnBhcmtcIixcbiAgICAgIFwiZWxlbWVudFR5cGVcIjogXCJsYWJlbHMudGV4dC5maWxsXCIsXG4gICAgICBcInN0eWxlcnNcIjogW1xuICAgICAgICB7XG4gICAgICAgICAgXCJjb2xvclwiOiBcIiM5ZTllOWVcIlxuICAgICAgICB9XG4gICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICBcImZlYXR1cmVUeXBlXCI6IFwicm9hZFwiLFxuICAgICAgXCJlbGVtZW50VHlwZVwiOiBcImdlb21ldHJ5XCIsXG4gICAgICBcInN0eWxlcnNcIjogW1xuICAgICAgICB7XG4gICAgICAgICAgXCJjb2xvclwiOiBcIiNmZmZmZmZcIlxuICAgICAgICB9XG4gICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICBcImZlYXR1cmVUeXBlXCI6IFwicm9hZC5hcnRlcmlhbFwiLFxuICAgICAgXCJlbGVtZW50VHlwZVwiOiBcImxhYmVscy50ZXh0LmZpbGxcIixcbiAgICAgIFwic3R5bGVyc1wiOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBcImNvbG9yXCI6IFwiIzc1NzU3NVwiXG4gICAgICAgIH1cbiAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgIFwiZmVhdHVyZVR5cGVcIjogXCJyb2FkLmhpZ2h3YXlcIixcbiAgICAgIFwiZWxlbWVudFR5cGVcIjogXCJnZW9tZXRyeVwiLFxuICAgICAgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAge1xuICAgICAgICAgIFwiY29sb3JcIjogXCIjZGFkYWRhXCJcbiAgICAgICAgfVxuICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgXCJmZWF0dXJlVHlwZVwiOiBcInJvYWQuaGlnaHdheVwiLFxuICAgICAgXCJlbGVtZW50VHlwZVwiOiBcImxhYmVscy50ZXh0LmZpbGxcIixcbiAgICAgIFwic3R5bGVyc1wiOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBcImNvbG9yXCI6IFwiIzYxNjE2MVwiXG4gICAgICAgIH1cbiAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgIFwiZmVhdHVyZVR5cGVcIjogXCJyb2FkLmxvY2FsXCIsXG4gICAgICBcImVsZW1lbnRUeXBlXCI6IFwibGFiZWxzLnRleHQuZmlsbFwiLFxuICAgICAgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAge1xuICAgICAgICAgIFwiY29sb3JcIjogXCIjOWU5ZTllXCJcbiAgICAgICAgfVxuICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgXCJmZWF0dXJlVHlwZVwiOiBcInRyYW5zaXQubGluZVwiLFxuICAgICAgXCJlbGVtZW50VHlwZVwiOiBcImdlb21ldHJ5XCIsXG4gICAgICBcInN0eWxlcnNcIjogW1xuICAgICAgICB7XG4gICAgICAgICAgXCJjb2xvclwiOiBcIiNlNWU1ZTVcIlxuICAgICAgICB9XG4gICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICBcImZlYXR1cmVUeXBlXCI6IFwidHJhbnNpdC5zdGF0aW9uXCIsXG4gICAgICBcImVsZW1lbnRUeXBlXCI6IFwiZ2VvbWV0cnlcIixcbiAgICAgIFwic3R5bGVyc1wiOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBcImNvbG9yXCI6IFwiI2VlZWVlZVwiXG4gICAgICAgIH1cbiAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgIFwiZmVhdHVyZVR5cGVcIjogXCJ3YXRlclwiLFxuICAgICAgXCJlbGVtZW50VHlwZVwiOiBcImdlb21ldHJ5XCIsXG4gICAgICBcInN0eWxlcnNcIjogW1xuICAgICAgICB7XG4gICAgICAgICAgXCJjb2xvclwiOiBcIiNjOWM5YzlcIlxuICAgICAgICB9XG4gICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICBcImZlYXR1cmVUeXBlXCI6IFwid2F0ZXJcIixcbiAgICAgIFwiZWxlbWVudFR5cGVcIjogXCJsYWJlbHMudGV4dC5maWxsXCIsXG4gICAgICBcInN0eWxlcnNcIjogW1xuICAgICAgICB7XG4gICAgICAgICAgXCJjb2xvclwiOiBcIiM5ZTllOWVcIlxuICAgICAgICB9XG4gICAgICBdXG4gICAgfVxuICBdO1xuICBtYXBzdGVyLk1BUF9PUFRJT05TID0ge1xuICAgIGNlbnRlcjoge1xuICAgICAgbGF0OiAzNy43OTEzNTAsXG4gICAgICBsbmc6IC0xMjIuNDM1ODgzICBcbiAgICB9LFxuICAgIHpvb206IDEwLFxuICAgIGRpc2FibGVEZWZhdWx0VUk6IGZhbHNlLFxuICAgIHNjcm9sbHdoZWVsOiB0cnVlLFxuICAgIGRyYWdnYWJsZTogdHJ1ZSxcbiAgICBtYXBUeXBlSWQ6IGdvb2dsZS5tYXBzLk1hcFR5cGVJZC5ST0FETUFQLFxuICAgIC8vIG1heFpvb206IDExLFxuICAgIC8vIG1pblpvb206IDksXG4gICAgem9vbUNvbnRyb2xPcHRpb25zOiB7XG4gICAgICBwb3NpdGlvbjogZ29vZ2xlLm1hcHMuQ29udHJvbFBvc2l0aW9uLkJPVFRPTV9MRUZULFxuICAgICAgc3R5bGU6IGdvb2dsZS5tYXBzLlpvb21Db250cm9sU3R5bGUuREVGQVVMVFxuICAgIH0sXG4gICAgcGFuQ29udHJvbE9wdGlvbnM6IHtcbiAgICAgIHBvc2l0aW9uOiBnb29nbGUubWFwcy5Db250cm9sUG9zaXRpb24uTEVGVF9CT1RUT01cbiAgICB9LFxuICAgIHN0eWxlczogc3R5bGVzLFxuICAgIGNsdXN0ZXI6IGZhbHNlXG4gIH1cbn0od2luZG93LCBnb29nbGUsIHdpbmRvdy5NYXBzdGVyIHx8ICh3aW5kb3cuTWFwc3RlciA9IHt9KSkpOyIsIihmdW5jdGlvbih3aW5kb3csIGdvb2dsZSwgTWFwc3Rlcil7XG4gICQud2lkZ2V0KFwibWFwc3Rlci5tYXBzdGVyXCIsIHtcbiAgICAvLyBkZWZhdWx0IG9wdGlvbnNcbiAgICBvcHRpb25zOiB7IH0sXG5cbiAgICAvLyBUaGUgY29uc3RydWN0b3JcbiAgICBfY3JlYXRlOiBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBlbGVtZW50ID0gdGhpcy5lbGVtZW50WzBdLFxuICAgICAgICAgIG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG4gICAgICB0aGlzLm1hcCA9IE1hcHN0ZXIuY3JlYXRlKGVsZW1lbnQsIG9wdGlvbnMpXG4gICAgfSxcblxuICAgIC8vIENhbGxlZCB3aGVuIGNyZWF0ZWQsIGFuZCBsYXRlciB3aGVuIGNoYW5naW5nIG9wdGlvbnNcbiAgICBfcmVmcmVzaDogZnVuY3Rpb24oKSB7XG4gICAgICBcbiAgICB9LFxuXG4gICAgYWRkTWFya2VyOiBmdW5jdGlvbiggb3B0aW9ucyApIHtcbiAgICAgIHJldHVybiB0aGlzLm1hcC5hZGRNYXJrZXIob3B0aW9ucyk7XG4gICAgfSxcbiAgICBmaW5kTWFya2VyOiBmdW5jdGlvbihjYWxsYmFjayl7XG4gICAgICByZXR1cm4gdGhpcy5tYXAuZmluZEJ5KGNhbGxiYWNrKVxuICAgIH0sXG4gICAgcmVtb3ZlTWFya2VyOiBmdW5jdGlvbihjYWxsYmFjayl7XG4gICAgICB0aGlzLm1hcC5yZW1vdmVCeShjYWxsYmFjayk7XG4gICAgfSxcbiAgICBnZXRNYXJrZXJzOiBmdW5jdGlvbigpe1xuICAgICAgcmV0dXJuIHRoaXMubWFwLm1hcmtlcnMuaXRlbXM7XG4gICAgfSxcbiAgICBzZXRQYW5vOiBmdW5jdGlvbihzZWxlY3Rvciwgb3B0cyl7XG4gICAgICB2YXIgZWxlbWVudHMgPSAkKHNlbGVjdG9yKSxcbiAgICAgICAgICBzZWxmID0gdGhpcztcbiAgICAgICQuZWFjaChlbGVtZW50cywgZnVuY3Rpb24oa2V5LCBlbGVtZW50KXtcbiAgICAgICAgc2VsZi5tYXAuc2V0UGFubyhlbGVtZW50LCBvcHRzKTtcbiAgICAgIH0pXG4gICAgfSxcbiAgICAvLyBFdmVudHMgYm91bmQgdmlhIF9vbiBhcmUgcmVtb3ZlZCBhdXRvbWF0aWNhbGx5XG4gICAgLy8gcmV2ZXJ0IG90aGVyIG1vZGlmaWNhdGlvbnMgaGVyZVxuICAgIF9kZXN0cm95OiBmdW5jdGlvbigpIHtcbiAgICAgIFxuICAgIH0sXG5cbiAgICAvLyBfc2V0T3B0aW9ucyBpcyBjYWxsZWQgd2l0aCBhIGhhc2ggb2YgYWxsIG9wdGlvbnMgdGhhdCBhcmUgY2hhbmdpbmdcbiAgICAvLyBhbHdheXMgcmVmcmVzaCB3aGVuIGNoYW5naW5nIG9wdGlvbnNcbiAgICBfc2V0T3B0aW9uczogZnVuY3Rpb24oKSB7XG4gICAgICAvLyBfc3VwZXIgYW5kIF9zdXBlckFwcGx5IGhhbmRsZSBrZWVwaW5nIHRoZSByaWdodCB0aGlzLWNvbnRleHRcbiAgICAgIHRoaXMuX3N1cGVyQXBwbHkoIGFyZ3VtZW50cyApO1xuICAgICAgdGhpcy5fcmVmcmVzaCgpO1xuICAgIH0sXG5cbiAgICAvLyBfc2V0T3B0aW9uIGlzIGNhbGxlZCBmb3IgZWFjaCBpbmRpdmlkdWFsIG9wdGlvbiB0aGF0IGlzIGNoYW5naW5nXG4gICAgX3NldE9wdGlvbjogZnVuY3Rpb24oIGtleSwgdmFsdWUgKSB7XG4gICAgICB0aGlzLl9zdXBlcigga2V5LCB2YWx1ZSApO1xuICAgIH1cbiAgfSk7XG5cbn0od2luZG93LCBnb29nbGUsIE1hcHN0ZXIpKTsiLCIoZnVuY3Rpb24od2luZG93LCAkICl7XG4gIFxuICB2YXIgJG1hcHN0ZXIgPSAkKCcjbWFwLWNhbnZhcycpLm1hcHN0ZXIoTWFwc3Rlci5NQVBfT1BUSU9OUyk7XG4gICRtYXBzdGVyLm1hcHN0ZXIoJ2FkZE1hcmtlcicgLCB7XG4gICAgbGF0OiAzNy43OTEzNTAsXG4gICAgbG5nOiAtMTIyLjQzNTg4MyxcbiAgICBkcmFnZ2FibGU6IHRydWUsXG4gICAgaWQ6MSxcbiAgICBldmVudHM6IFtcbiAgICAgIHtcbiAgICAgICAgbmFtZTogJ2NsaWNrJyxcbiAgICAgICAgY2FsbGJhY2s6IGZ1bmN0aW9uKGUsIG1hcmtlcil7XG4gICAgICAgICAgY29uc29sZS5sb2coZSk7XG4gICAgICAgICAgY29uc29sZS5sb2cobWFya2VyKTtcbiAgICAgICAgICBjb25zb2xlLmxvZyh0aGlzKVxuICAgICAgICB9XG4gICAgICB9LHtcbiAgICAgICAgbmFtZTogJ2RyYWdlbmQnLFxuICAgICAgICBjYWxsYmFjazogZnVuY3Rpb24oKXtcbiAgICAgICAgICBhbGVydCgnZHJhZ2dlZCcpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgXSxcbiAgICBpY29uOiAnLi4vaW1nL2ljb25zL21hcC1waW4ucG5nJ1xuICB9KTtcbiAgJG1hcHN0ZXIubWFwc3Rlcignc2V0UGFubycsICcjcGlwLXBhbm8nLCB7XG4gICAgcG9zaXRpb246IHtcbiAgICAgIGxhdDogMzcuNzkxMzUwLFxuICAgICAgbG5nOiAtMTIyLjQzNTg4MyxcbiAgICB9LFxuICAgIHBvdjoge1xuICAgICAgaGVhZGluZzogMjAwLCAvLyBob3Jpc29udGFsIGNhbWVyYSB2aWV3IFxuICAgICAgcGl0Y2g6IDAgIC8vIHZlcnRpY2FsIGNhbWVyYSB2aWV3XG4gICAgfSxcbiAgICBldmVudHM6W1xuICAgICAge1xuICAgICAgICBuYW1lOiAncG9zaXRpb25fY2hhbmdlZCcsXG4gICAgICAgIGNhbGxiYWNrOiBmdW5jdGlvbigpe1xuICAgICAgICAgIGNvbnNvbGUubG9nKCdjaGFuZ2VkIHBvc2l0aW9uJyk7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIG5hbWU6ICdwb3ZfY2hhbmdlZCcsXG4gICAgICAgIGNhbGxiYWNrOiBmdW5jdGlvbigpe1xuICAgICAgICAgIGNvbnNvbGUubG9nKCdjaGFuZ2VkIHBvdicpO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBuYW1lOiAnbGlua3NfY2hhbmdlZCcsXG4gICAgICAgIGNhbGxiYWNrOiBmdW5jdGlvbihlLCBwYW5vcmFtYSl7XG4gICAgICAgICAgY29uc29sZS5sb2cocGFub3JhbWEuZ2V0TGlua3MoKSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICBdXG4gIH0pO1xuICBjb25zb2xlLmxvZygkbWFwc3Rlci5tYXBzdGVyKCdnZXRNYXJrZXJzJykpXG59KHdpbmRvdywgalF1ZXJ5KSk7ICJdfQ==
